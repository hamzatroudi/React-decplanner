{"ast":null,"code":"/**\n * Bundle of @devexpress/dx-grid-core\n * Generated: 2018-12-25\n * Version: 1.10.0\n * License: https://js.devexpress.com/Licensing\n */\nimport { easeOutCubic } from '@devexpress/dx-core';\n\nvar rowIdGetter = function rowIdGetter(getRowId, rows) {\n  if (!getRowId) {\n    var map = new Map(rows.map(function (row, rowIndex) {\n      return [row, rowIndex];\n    }));\n    return function (row) {\n      return map.get(row);\n    };\n  }\n\n  return getRowId;\n};\n\nvar defaultGetCellValue = function defaultGetCellValue(row, columnName) {\n  return row[columnName];\n};\n\nvar cellValueGetter = function cellValueGetter() {\n  var getCellValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultGetCellValue;\n  var columns = arguments.length > 1 ? arguments[1] : undefined;\n  var useFastAccessor = true;\n  var map = columns.reduce(function (acc, column) {\n    if (column.getCellValue) {\n      useFastAccessor = false;\n      acc[column.name] = column.getCellValue;\n    }\n\n    return acc;\n  }, {});\n\n  if (useFastAccessor) {\n    return getCellValue;\n  }\n\n  return function (row, columnName) {\n    return map[columnName] ? map[columnName](row, columnName) : getCellValue(row, columnName);\n  };\n};\n\nvar changeColumnSorting = function changeColumnSorting(state, _ref) {\n  var columnName = _ref.columnName,\n      direction = _ref.direction,\n      keepOther = _ref.keepOther,\n      sortIndex = _ref.sortIndex;\n  var sorting = state.sorting;\n  var nextSorting = [];\n\n  if (keepOther === true) {\n    nextSorting = sorting.slice();\n  }\n\n  if (Array.isArray(keepOther)) {\n    nextSorting = sorting.slice().filter(function (columnSorting) {\n      return keepOther.indexOf(columnSorting.columnName) > -1;\n    });\n  }\n\n  var columnSortingIndex = sorting.findIndex(function (columnSorting) {\n    return columnSorting.columnName === columnName;\n  });\n  var columnSorting = sorting[columnSortingIndex];\n  var newColumnSorting = {\n    columnName: columnName,\n    direction: direction || (!columnSorting || columnSorting.direction === 'desc' ? 'asc' : 'desc')\n  };\n\n  if (columnSortingIndex > -1) {\n    nextSorting.splice(columnSortingIndex, 1);\n  }\n\n  if (direction !== null) {\n    var newIndexFallback = columnSortingIndex > -1 ? columnSortingIndex : nextSorting.length;\n    var newIndex = sortIndex !== undefined ? sortIndex : newIndexFallback;\n    nextSorting.splice(newIndex, 0, newColumnSorting);\n  }\n\n  return {\n    sorting: nextSorting\n  };\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nvar unique = function unique(arr) {\n  return _toConsumableArray(new Set(arr));\n};\n\nvar getColumnSortingDirection = function getColumnSortingDirection(sorting, columnName) {\n  var columnSorting = sorting.filter(function (s) {\n    return s.columnName === columnName;\n  })[0];\n  return columnSorting ? columnSorting.direction : null;\n};\n\nvar getPersistentSortedColumns = function getPersistentSortedColumns(sorting) {\n  var columnExtensions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return columnExtensions.reduce(function (acc, _ref) {\n    var columnName = _ref.columnName,\n        sortingEnabled = _ref.sortingEnabled;\n\n    if (sortingEnabled === false) {\n      if (sorting.findIndex(function (sortItem) {\n        return sortItem.columnName === columnName;\n      }) > -1) {\n        acc.push(columnName);\n      }\n    }\n\n    return acc;\n  }, []);\n};\n\nvar calculateKeepOther = function calculateKeepOther(sorting, keepOther) {\n  var persistentSortedColumns = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  if (!persistentSortedColumns.length) return keepOther;\n  if (!keepOther) return persistentSortedColumns;\n  return Array.isArray(keepOther) ? unique([].concat(_toConsumableArray(keepOther), _toConsumableArray(persistentSortedColumns))) : unique([].concat(_toConsumableArray(sorting.map(function (item) {\n    return item.columnName;\n  })), _toConsumableArray(persistentSortedColumns)));\n};\n/* eslint-disable no-plusplus, no-param-reassign, no-use-before-define, no-constant-condition */\n\n\nvar merge = function merge(array, auxiliary, lo, mid, hi, compare) {\n  var i = lo;\n  var j = mid + 1;\n  var k = lo;\n\n  while (true) {\n    var cmp = compare(array[i], array[j]);\n\n    if (cmp <= 0) {\n      auxiliary[k++] = array[i++];\n\n      if (i > mid) {\n        do {\n          auxiliary[k++] = array[j++];\n        } while (j <= hi);\n\n        break;\n      }\n    } else {\n      auxiliary[k++] = array[j++];\n\n      if (j > hi) {\n        do {\n          auxiliary[k++] = array[i++];\n        } while (i <= mid);\n\n        break;\n      }\n    }\n  }\n};\n\nvar sortArrayToAuxiliary = function sortArrayToAuxiliary(array, auxiliary, lo, hi, compare) {\n  if (hi < lo) return;\n\n  if (hi === lo) {\n    auxiliary[lo] = array[lo];\n    return;\n  }\n\n  var mid = Math.floor(lo + (hi - lo) / 2);\n  sortAuxiliaryToArray(array, auxiliary, lo, mid, compare);\n  sortAuxiliaryToArray(array, auxiliary, mid + 1, hi, compare);\n  merge(array, auxiliary, lo, mid, hi, compare);\n};\n\nvar sortAuxiliaryToArray = function sortAuxiliaryToArray(array, auxiliary, lo, hi, compare) {\n  if (hi <= lo) return;\n  var mid = Math.floor(lo + (hi - lo) / 2);\n  sortArrayToAuxiliary(array, auxiliary, lo, mid, compare);\n  sortArrayToAuxiliary(array, auxiliary, mid + 1, hi, compare);\n  merge(auxiliary, array, lo, mid, hi, compare);\n};\n\nvar mergeSort = function mergeSort(array) {\n  var compare = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (a, b) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  };\n  var result = array.slice();\n  var auxiliary = array.slice();\n  sortAuxiliaryToArray(result, auxiliary, 0, result.length - 1, compare);\n  return result;\n};\n\nvar NODE_CHECK = Symbol('node');\n\nvar rowsToTree = function rowsToTree(rows, getRowLevelKey) {\n  if (!rows.length) return rows;\n  var levels = [{\n    children: []\n  }];\n  rows.forEach(function (row) {\n    var levelKey = getRowLevelKey(row);\n\n    if (levelKey) {\n      var _node;\n\n      var levelIndex = levels.slice(1).findIndex(function (level) {\n        return getRowLevelKey(level.root) === levelKey;\n      }) + 1;\n\n      if (levelIndex > 0) {\n        levels.splice(levelIndex, levels.length - levelIndex);\n      }\n\n      var node = (_node = {}, _defineProperty(_node, NODE_CHECK, true), _defineProperty(_node, \"root\", row), _defineProperty(_node, \"children\", []), _node);\n      levels[levels.length - 1].children.push(node);\n      levels.push(node);\n    } else {\n      levels[levels.length - 1].children.push(row);\n    }\n  });\n  return levels[0].children;\n};\n\nvar treeToRows = function treeToRows(tree) {\n  var rows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  if (!tree.length) return tree;\n  return tree.reduce(function (acc, node) {\n    if (node[NODE_CHECK]) {\n      acc.push(node.root);\n      treeToRows(node.children, rows);\n    } else {\n      acc.push(node);\n    }\n\n    return acc;\n  }, rows);\n};\n\nvar defaultCompare = function defaultCompare(a, b) {\n  if (a === b) return 0;\n\n  if (a === null) {\n    return b === undefined ? -1 : 1;\n  }\n\n  if (a === undefined) {\n    return 1;\n  }\n\n  if (b === null || b === undefined) {\n    return -1;\n  }\n\n  return a < b ? -1 : 1;\n};\n\nvar createCompare = function createCompare(sorting, getColumnCompare, getComparableValue) {\n  return sorting.slice().reverse().reduce(function (prevCompare, columnSorting) {\n    var columnName = columnSorting.columnName;\n    var inverse = columnSorting.direction === 'desc';\n    var columnCompare = getColumnCompare && getColumnCompare(columnName) || defaultCompare;\n    return function (aRow, bRow) {\n      var a = getComparableValue(aRow, columnName);\n      var b = getComparableValue(bRow, columnName);\n      var result = columnCompare(a, b);\n\n      if (result !== 0) {\n        return inverse ? -result : result;\n      }\n\n      return prevCompare(aRow, bRow);\n    };\n  }, function () {\n    return 0;\n  });\n};\n\nvar sortTree = function sortTree(tree, compare) {\n  var sortedTree = tree.map(function (node) {\n    if (node[NODE_CHECK]) {\n      return _objectSpread({}, node, {\n        children: sortTree(node.children, compare)\n      });\n    }\n\n    return node;\n  });\n  return mergeSort(sortedTree, function (a, b) {\n    return compare(a[NODE_CHECK] ? a.root : a, b[NODE_CHECK] ? b.root : b);\n  });\n};\n\nvar sortHierarchicalRows = function sortHierarchicalRows(rows, compare, getRowLevelKey) {\n  var tree = rowsToTree(rows, getRowLevelKey);\n  var sortedTree = sortTree(tree, compare);\n  return treeToRows(sortedTree);\n};\n\nvar sortedRows = function sortedRows(rows, sorting, getCellValue, getColumnCompare, isGroupRow, getRowLevelKey) {\n  if (!sorting.length || !rows.length) return rows;\n\n  if (!getRowLevelKey) {\n    var _compare = createCompare(sorting, getColumnCompare, getCellValue);\n\n    return mergeSort(rows.slice(), _compare);\n  }\n\n  var compare = createCompare(sorting, getColumnCompare, function (row, columnName) {\n    if (isGroupRow && isGroupRow(row)) {\n      if (row.groupedBy === columnName) {\n        return row.value;\n      }\n\n      return undefined;\n    }\n\n    return getCellValue(row, columnName);\n  });\n  return sortHierarchicalRows(rows, compare, getRowLevelKey);\n};\n\nvar changeColumnFilter = function changeColumnFilter(filters, _ref) {\n  var columnName = _ref.columnName,\n      config = _ref.config;\n  var filterIndex = filters.findIndex(function (f) {\n    return f.columnName === columnName;\n  });\n  var nextState = filters.slice();\n\n  if (config) {\n    var filter = _objectSpread({\n      columnName: columnName\n    }, config);\n\n    if (filterIndex > -1) {\n      nextState.splice(filterIndex, 1, filter);\n    } else {\n      nextState.push(filter);\n    }\n  } else if (filterIndex > -1) {\n    nextState.splice(filterIndex, 1);\n  }\n\n  return nextState;\n};\n\nvar getColumnFilterConfig = function getColumnFilterConfig(filters, columnName) {\n  if (!filters.length) {\n    return null;\n  }\n\n  var filter = filters.filter(function (s) {\n    return s.columnName === columnName;\n  })[0];\n  if (!filter) return null;\n  return filter;\n};\n\nvar filterExpression = function filterExpression(filters, expression) {\n  var selfFilterExpr = {\n    operator: 'and',\n    filters: filters\n  };\n\n  if (!expression) {\n    return selfFilterExpr;\n  }\n\n  return {\n    operator: 'and',\n    filters: [expression, selfFilterExpr]\n  };\n};\n\nvar operators = {\n  or: function or(predicates) {\n    return function (row) {\n      return predicates.reduce(function (acc, predicate) {\n        return acc || predicate(row);\n      }, false);\n    };\n  },\n  and: function and(predicates) {\n    return function (row) {\n      return predicates.reduce(function (acc, predicate) {\n        return acc && predicate(row);\n      }, true);\n    };\n  }\n};\n\nvar toLowerCase = function toLowerCase(value) {\n  return String(value).toLowerCase();\n};\n\nvar operationPredicates = {\n  contains: function contains(value, filter) {\n    return toLowerCase(value).indexOf(toLowerCase(filter.value)) > -1;\n  },\n  notContains: function notContains(value, filter) {\n    return toLowerCase(value).indexOf(toLowerCase(filter.value)) === -1;\n  },\n  startsWith: function startsWith(value, filter) {\n    return toLowerCase(value).startsWith(toLowerCase(filter.value));\n  },\n  endsWith: function endsWith(value, filter) {\n    return toLowerCase(value).endsWith(toLowerCase(filter.value));\n  },\n  equal: function equal(value, filter) {\n    return value === filter.value;\n  },\n  notEqual: function notEqual(value, filter) {\n    return value !== filter.value;\n  },\n  greaterThan: function greaterThan(value, filter) {\n    return value > filter.value;\n  },\n  greaterThanOrEqual: function greaterThanOrEqual(value, filter) {\n    return value >= filter.value;\n  },\n  lessThan: function lessThan(value, filter) {\n    return value < filter.value;\n  },\n  lessThanOrEqual: function lessThanOrEqual(value, filter) {\n    return value <= filter.value;\n  }\n};\n\nvar defaultFilterPredicate = function defaultFilterPredicate(value, filter) {\n  var operation = filter.operation || 'contains';\n  return operationPredicates[operation](value, filter);\n};\n\nvar filterTree = function filterTree(tree, predicate) {\n  return tree.reduce(function (acc, node) {\n    if (node[NODE_CHECK]) {\n      var filteredChildren = filterTree(node.children, predicate);\n\n      if (filteredChildren.length > 0) {\n        acc.push(_objectSpread({}, node, {\n          children: filteredChildren\n        }));\n        return acc;\n      }\n\n      if (predicate(node.root, true)) {\n        acc.push(node.root);\n        return acc;\n      }\n\n      return acc;\n    }\n\n    if (predicate(node)) {\n      acc.push(node);\n      return acc;\n    }\n\n    return acc;\n  }, []);\n};\n\nvar filterHierarchicalRows = function filterHierarchicalRows(rows, predicate, getRowLevelKey, getCollapsedRows) {\n  var tree = rowsToTree(rows, getRowLevelKey);\n  var collapsedRowsMeta = [];\n  var filteredTree = filterTree(tree, function (row, isNode) {\n    if (isNode) {\n      var collapsedRows = getCollapsedRows && getCollapsedRows(row);\n\n      if (collapsedRows && collapsedRows.length) {\n        var filteredCollapsedRows = collapsedRows.filter(predicate);\n        collapsedRowsMeta.push([row, filteredCollapsedRows]);\n        return !!filteredCollapsedRows.length || predicate(row);\n      }\n\n      if (predicate(row)) {\n        collapsedRowsMeta.push([row, []]);\n        return true;\n      }\n\n      return false;\n    }\n\n    return predicate(row);\n  });\n  return {\n    rows: treeToRows(filteredTree),\n    collapsedRowsMeta: new Map(collapsedRowsMeta)\n  };\n};\n\nvar buildPredicate = function buildPredicate(initialFilterExpression, getCellValue, getColumnPredicate) {\n  var getSimplePredicate = function getSimplePredicate(filterExpression) {\n    var columnName = filterExpression.columnName;\n    var customPredicate = getColumnPredicate && getColumnPredicate(columnName);\n    var predicate = customPredicate || defaultFilterPredicate;\n    return function (row) {\n      return predicate(getCellValue(row, columnName), filterExpression, row);\n    };\n  };\n\n  var getOperatorPredicate = function getOperatorPredicate(filterExpression) {\n    var build = operators[toLowerCase(filterExpression.operator)]; // eslint-disable-next-line no-use-before-define\n\n    return build && build(filterExpression.filters.map(getPredicate));\n  };\n\n  var getPredicate = function getPredicate(filterExpression) {\n    return getOperatorPredicate(filterExpression) || getSimplePredicate(filterExpression);\n  };\n\n  return getPredicate(initialFilterExpression);\n};\n\nvar filteredRows = function filteredRows(rows, filterExpression, getCellValue, getColumnPredicate, getRowLevelKey, getCollapsedRows) {\n  if (!(filterExpression && Object.keys(filterExpression).length && rows.length)) {\n    return {\n      rows: rows\n    };\n  }\n\n  var predicate = buildPredicate(filterExpression, getCellValue, getColumnPredicate);\n  return getRowLevelKey ? filterHierarchicalRows(rows, predicate, getRowLevelKey, getCollapsedRows) : {\n    rows: rows.filter(predicate)\n  };\n};\n\nvar filteredCollapsedRowsGetter = function filteredCollapsedRowsGetter(_ref) {\n  var collapsedRowsMeta = _ref.collapsedRowsMeta;\n  return function (row) {\n    return collapsedRowsMeta && collapsedRowsMeta.get(row);\n  };\n};\n\nvar unwrappedFilteredRows = function unwrappedFilteredRows(_ref2) {\n  var rows = _ref2.rows;\n  return rows;\n};\n\nvar GROUP_KEY_SEPARATOR = '|';\n\nvar applyColumnGrouping = function applyColumnGrouping(grouping, _ref) {\n  var columnName = _ref.columnName,\n      groupIndex = _ref.groupIndex;\n  var nextGrouping = grouping.slice();\n  var groupingIndex = nextGrouping.findIndex(function (g) {\n    return g.columnName === columnName;\n  });\n  var targetIndex = groupIndex;\n\n  if (groupingIndex > -1) {\n    nextGrouping.splice(groupingIndex, 1);\n  } else if (groupIndex === undefined) {\n    targetIndex = nextGrouping.length;\n  }\n\n  if (targetIndex > -1) {\n    nextGrouping.splice(targetIndex, 0, {\n      columnName: columnName\n    });\n  }\n\n  return nextGrouping;\n};\n\nvar changeColumnGrouping = function changeColumnGrouping(_ref2, _ref3) {\n  var grouping = _ref2.grouping,\n      expandedGroups = _ref2.expandedGroups;\n  var columnName = _ref3.columnName,\n      groupIndex = _ref3.groupIndex;\n  var nextGrouping = applyColumnGrouping(grouping, {\n    columnName: columnName,\n    groupIndex: groupIndex\n  });\n  var ungroupedColumnIndex = grouping.findIndex(function (group, index) {\n    return !nextGrouping[index] || group.columnName !== nextGrouping[index].columnName;\n  });\n\n  if (ungroupedColumnIndex === -1) {\n    return {\n      grouping: nextGrouping\n    };\n  }\n\n  var filteredExpandedGroups = expandedGroups.filter(function (group) {\n    return group.split(GROUP_KEY_SEPARATOR).length <= ungroupedColumnIndex;\n  });\n\n  if (filteredExpandedGroups.length === expandedGroups.length) {\n    return {\n      grouping: nextGrouping\n    };\n  }\n\n  return {\n    grouping: nextGrouping,\n    expandedGroups: filteredExpandedGroups\n  };\n};\n\nvar toggleExpandedGroups = function toggleExpandedGroups(state, _ref4) {\n  var groupKey = _ref4.groupKey;\n  var expandedGroups = state.expandedGroups.slice();\n  var groupKeyIndex = expandedGroups.indexOf(groupKey);\n\n  if (groupKeyIndex > -1) {\n    expandedGroups.splice(groupKeyIndex, 1);\n  } else {\n    expandedGroups.push(groupKey);\n  }\n\n  return {\n    expandedGroups: expandedGroups\n  };\n};\n\nvar draftColumnGrouping = function draftColumnGrouping(_ref5, _ref6) {\n  var grouping = _ref5.grouping,\n      draftGrouping = _ref5.draftGrouping;\n  var columnName = _ref6.columnName,\n      groupIndex = _ref6.groupIndex;\n  return {\n    draftGrouping: applyColumnGrouping(draftGrouping || grouping, {\n      columnName: columnName,\n      groupIndex: groupIndex\n    })\n  };\n};\n\nvar cancelColumnGroupingDraft = function cancelColumnGroupingDraft() {\n  return {\n    draftGrouping: null\n  };\n};\n\nvar adjustSortIndex = function adjustSortIndex(groupingIndex, grouping, sorting) {\n  return Math.max(grouping.slice(0, groupingIndex).reduce(function (acc, columnGrouping) {\n    var columnSortingIndex = sorting.findIndex(function (columnSorting) {\n      return columnSorting.columnName === columnGrouping.columnName;\n    });\n    return columnSortingIndex === -1 ? acc - 1 : acc;\n  }, groupingIndex), 0);\n};\n\nvar GRID_GROUP_TYPE = Symbol('group');\nvar GRID_GROUP_CHECK = Symbol(\"\".concat(GRID_GROUP_TYPE.toString(), \"_check\"));\nvar GRID_GROUP_LEVEL_KEY = Symbol(\"\".concat(GRID_GROUP_TYPE.toString(), \"_levelKey\"));\nvar GRID_GROUP_COLLAPSED_ROWS = Symbol(\"\".concat(GRID_GROUP_TYPE.toString(), \"_collapsedRows\"));\n\nvar groupRowChecker = function groupRowChecker(row) {\n  return row[GRID_GROUP_CHECK];\n};\n\nvar groupRowLevelKeyGetter = function groupRowLevelKeyGetter(row) {\n  return row ? row[GRID_GROUP_LEVEL_KEY] : undefined;\n};\n\nvar defaultColumnCriteria = function defaultColumnCriteria(value) {\n  return {\n    key: String(value),\n    value: value\n  };\n};\n\nvar groupedRows = function groupedRows(rows, grouping, getCellValue, getColumnCriteria) {\n  var keyPrefix = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n  if (!grouping.length) return rows;\n  var columnName = grouping[0].columnName;\n  var groupCriteria = getColumnCriteria && getColumnCriteria(columnName) || defaultColumnCriteria;\n  var groups = rows.reduce(function (acc, row) {\n    var _groupCriteria = groupCriteria(getCellValue(row, columnName), row),\n        key = _groupCriteria.key,\n        _groupCriteria$value = _groupCriteria.value,\n        value = _groupCriteria$value === void 0 ? key : _groupCriteria$value;\n\n    var sameKeyItems = acc.get(key);\n\n    if (!sameKeyItems) {\n      acc.set(key, [value, key, [row]]);\n    } else {\n      sameKeyItems[2].push(row);\n    }\n\n    return acc;\n  }, new Map());\n  var groupedBy = grouping[0].columnName;\n  var nestedGrouping = grouping.slice(1);\n  return _toConsumableArray(groups.values()).reduce(function (acc, _ref) {\n    var _acc$push;\n\n    var _ref2 = _slicedToArray(_ref, 3),\n        value = _ref2[0],\n        key = _ref2[1],\n        items = _ref2[2];\n\n    var compoundKey = \"\".concat(keyPrefix).concat(key);\n    acc.push((_acc$push = {}, _defineProperty(_acc$push, GRID_GROUP_CHECK, true), _defineProperty(_acc$push, GRID_GROUP_LEVEL_KEY, \"\".concat(GRID_GROUP_TYPE.toString(), \"_\").concat(groupedBy)), _defineProperty(_acc$push, \"groupedBy\", groupedBy), _defineProperty(_acc$push, \"compoundKey\", compoundKey), _defineProperty(_acc$push, \"key\", key), _defineProperty(_acc$push, \"value\", value), _acc$push));\n    acc.push.apply(acc, _toConsumableArray(groupedRows(items, nestedGrouping, getCellValue, getColumnCriteria, \"\".concat(compoundKey).concat(GROUP_KEY_SEPARATOR))));\n    return acc;\n  }, []);\n};\n\nvar expandedGroupRows = function expandedGroupRows(rows, grouping, expandedGroups) {\n  if (!grouping.length) return rows;\n  var groupingColumnNames = grouping.map(function (columnGrouping) {\n    return columnGrouping.columnName;\n  });\n  var expandedGroupsSet = new Set(expandedGroups);\n  var currentGroupExpanded = true;\n  var currentGroupLevel = 0;\n  return rows.reduce(function (acc, row) {\n    if (!row[GRID_GROUP_CHECK]) {\n      if (currentGroupExpanded) {\n        acc.push(row);\n      } else {\n        acc[acc.length - 1][GRID_GROUP_COLLAPSED_ROWS].push(row);\n      }\n\n      return acc;\n    }\n\n    var groupLevel = groupingColumnNames.indexOf(row.groupedBy);\n\n    if (groupLevel > currentGroupLevel && !currentGroupExpanded) {\n      return acc;\n    }\n\n    currentGroupExpanded = expandedGroupsSet.has(row.compoundKey);\n    currentGroupLevel = groupLevel;\n\n    if (currentGroupExpanded) {\n      acc.push(row);\n    } else {\n      acc.push(_objectSpread({}, row, _defineProperty({}, GRID_GROUP_COLLAPSED_ROWS, [])));\n    }\n\n    return acc;\n  }, []);\n};\n\nvar groupCollapsedRowsGetter = function groupCollapsedRowsGetter(getCollapsedRows) {\n  return function (row) {\n    return row[GRID_GROUP_COLLAPSED_ROWS] || getCollapsedRows && getCollapsedRows(row);\n  };\n};\n\nvar customGroupedRows = function customGroupedRows(currentRows, grouping, getChildGroups) {\n  var rootRows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : currentRows;\n  var keyPrefix = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n  if (!currentRows || !currentRows.length) return [];\n  if (!grouping.length) return currentRows;\n  var groupedBy = grouping[0].columnName;\n  var nestedGrouping = grouping.slice(1);\n  return getChildGroups(currentRows, grouping[0], rootRows).reduce(function (acc, _ref) {\n    var _acc$push;\n\n    var key = _ref.key,\n        _ref$value = _ref.value,\n        value = _ref$value === void 0 ? key : _ref$value,\n        childRows = _ref.childRows;\n    var compoundKey = \"\".concat(keyPrefix).concat(key);\n    acc.push((_acc$push = {}, _defineProperty(_acc$push, GRID_GROUP_CHECK, true), _defineProperty(_acc$push, GRID_GROUP_LEVEL_KEY, \"\".concat(GRID_GROUP_TYPE.toString(), \"_\").concat(groupedBy)), _defineProperty(_acc$push, \"groupedBy\", groupedBy), _defineProperty(_acc$push, \"compoundKey\", compoundKey), _defineProperty(_acc$push, \"key\", key), _defineProperty(_acc$push, \"value\", value), _acc$push));\n    acc.push.apply(acc, _toConsumableArray(customGroupedRows(childRows, nestedGrouping, getChildGroups, rootRows, \"\".concat(compoundKey).concat(GROUP_KEY_SEPARATOR))));\n    return acc;\n  }, []);\n};\n\nvar customGroupingRowIdGetter = function customGroupingRowIdGetter(getRowId, rows) {\n  var firstRow = rows.find(function (row) {\n    return !row[GRID_GROUP_CHECK];\n  });\n\n  if (!firstRow || getRowId(firstRow) !== undefined) {\n    return getRowId;\n  }\n\n  var map = new Map(rows.filter(function (row) {\n    return !row[GRID_GROUP_CHECK];\n  }).map(function (row, rowIndex) {\n    return [row, rowIndex];\n  }));\n  return function (row) {\n    return map.get(row);\n  };\n};\n\nvar groupingPanelItems = function groupingPanelItems(columns, grouping, draftGrouping) {\n  var items = draftGrouping.map(function (_ref) {\n    var columnName = _ref.columnName;\n    return {\n      column: columns.find(function (c) {\n        return c.name === columnName;\n      }),\n      draft: !grouping.some(function (columnGrouping) {\n        return columnGrouping.columnName === columnName;\n      })\n    };\n  });\n  grouping.forEach(function (_ref2, index) {\n    var columnName = _ref2.columnName;\n    if (draftGrouping.some(function (columnGrouping) {\n      return columnGrouping.columnName === columnName;\n    })) return;\n    items.splice(index, 0, {\n      column: columns.find(function (c) {\n        return c.name === columnName;\n      }),\n      draft: true\n    });\n  });\n  return items;\n};\n\nvar setCurrentPage = function setCurrentPage(prevPage, page) {\n  return page;\n};\n\nvar setPageSize = function setPageSize(prevPageSize, size) {\n  return size;\n};\n\nvar clamp = function clamp(value, max) {\n  return Math.max(Math.min(value, max), 0);\n};\n\nvar PAGE_HEADERS_OVERFLOW_ERROR = 'Max row level exceeds the page size. Consider increasing the page size.';\n\nvar paginatedRows = function paginatedRows(rows, pageSize, page) {\n  return pageSize ? rows.slice(pageSize * page, pageSize * (page + 1)) : rows;\n};\n\nvar rowsWithPageHeaders = function rowsWithPageHeaders(rows, pageSize, getRowLevelKey) {\n  if (!pageSize || !getRowLevelKey) return rows;\n  var result = rows.slice();\n  var headerRows = [];\n  var currentIndex = 0;\n\n  var _loop = function _loop() {\n    var row = result[currentIndex];\n    var levelKey = getRowLevelKey(row);\n\n    if (levelKey) {\n      var headerIndex = headerRows.findIndex(function (headerRow) {\n        return getRowLevelKey(headerRow) === levelKey;\n      });\n\n      if (headerIndex === -1) {\n        headerRows = [].concat(_toConsumableArray(headerRows), [row]);\n      } else {\n        headerRows = [].concat(_toConsumableArray(headerRows.slice(0, headerIndex)), [row]);\n      }\n\n      if (headerRows.length >= pageSize) {\n        throw new Error(PAGE_HEADERS_OVERFLOW_ERROR);\n      }\n    }\n\n    var indexInPage = currentIndex % pageSize;\n\n    if (indexInPage < headerRows.length && row !== headerRows[indexInPage]) {\n      result = [].concat(_toConsumableArray(result.slice(0, currentIndex)), [headerRows[indexInPage]], _toConsumableArray(result.slice(currentIndex)));\n    }\n\n    currentIndex += 1;\n  };\n\n  while (result.length > currentIndex) {\n    _loop();\n  }\n\n  return result;\n};\n\nvar rowCount = function rowCount(rows) {\n  return rows.length;\n};\n\nvar pageCount = function pageCount(count, pageSize) {\n  return pageSize ? Math.ceil(count / pageSize) : 1;\n};\n\nvar currentPage = function currentPage(page, totalCount, pageSize, setCurrentPage) {\n  var totalPages = pageCount(totalCount, pageSize);\n  var adjustedCurrentPage = clamp(page, totalPages - 1);\n\n  if (page !== adjustedCurrentPage) {\n    setTimeout(function () {\n      return setCurrentPage(adjustedCurrentPage);\n    });\n  }\n\n  return adjustedCurrentPage;\n};\n\nvar firstRowOnPage = function firstRowOnPage(currentPage, pageSize, totalCount) {\n  if (totalCount === 0) {\n    return 0;\n  }\n\n  return pageSize ? currentPage * pageSize + 1 : 1;\n};\n\nvar lastRowOnPage = function lastRowOnPage(currentPage, pageSize, totalRowCount) {\n  var result = totalRowCount;\n\n  if (pageSize) {\n    var index = (currentPage + 1) * pageSize;\n    result = index > totalRowCount ? totalRowCount : index;\n  }\n\n  return result;\n};\n\nvar calculateStartPage = function calculateStartPage(currentPage, maxButtonCount, totalPageCount) {\n  return Math.max(Math.min(currentPage - Math.floor(maxButtonCount / 2, 10), totalPageCount - maxButtonCount + 1), 1);\n};\n\nvar toggle = function toggle(source, items, state) {\n  var itemsSet = new Set(items);\n  var sourceState = state;\n\n  if (sourceState === undefined) {\n    var availableSelection = source.filter(function (item) {\n      return itemsSet.has(item);\n    });\n    sourceState = availableSelection.length !== itemsSet.size;\n  }\n\n  if (sourceState) {\n    var sourceSet = new Set(source);\n    return [].concat(_toConsumableArray(source), _toConsumableArray(items.filter(function (item) {\n      return !sourceSet.has(item);\n    })));\n  }\n\n  return source.filter(function (item) {\n    return !itemsSet.has(item);\n  });\n};\n\nvar toggleSelection = function toggleSelection(selection, _ref) {\n  var rowIds = _ref.rowIds,\n      state = _ref.state;\n  return toggle(selection, rowIds, state);\n};\n\nvar rowsWithAvailableToSelect = function rowsWithAvailableToSelect(rows, getRowId, isGroupRow) {\n  var dataRows = rows;\n\n  if (isGroupRow) {\n    dataRows = dataRows.filter(function (row) {\n      return !isGroupRow(row);\n    });\n  }\n\n  return {\n    rows: rows,\n    availableToSelect: dataRows.map(function (row) {\n      return getRowId(row);\n    })\n  };\n};\n\nvar someSelected = function someSelected(_ref, selection) {\n  var availableToSelect = _ref.availableToSelect;\n  var selectionSet = new Set(selection);\n  return availableToSelect.length !== 0 && selectionSet.size !== 0 && availableToSelect.some(function (elem) {\n    return selectionSet.has(elem);\n  }) && availableToSelect.some(function (elem) {\n    return !selectionSet.has(elem);\n  });\n};\n\nvar allSelected = function allSelected(_ref2, selection) {\n  var availableToSelect = _ref2.availableToSelect;\n  var selectionSet = new Set(selection);\n  return selectionSet.size !== 0 && availableToSelect.length !== 0 && !availableToSelect.some(function (elem) {\n    return !selectionSet.has(elem);\n  });\n};\n\nvar unwrapSelectedRows = function unwrapSelectedRows(_ref3) {\n  var rows = _ref3.rows;\n  return rows;\n};\n\nvar startEditRows = function startEditRows(prevEditingRowIds, _ref) {\n  var rowIds = _ref.rowIds;\n  return [].concat(_toConsumableArray(prevEditingRowIds), _toConsumableArray(rowIds));\n};\n\nvar stopEditRows = function stopEditRows(prevEditingRowIds, _ref2) {\n  var rowIds = _ref2.rowIds;\n  var rowIdSet = new Set(rowIds);\n  return prevEditingRowIds.filter(function (id) {\n    return !rowIdSet.has(id);\n  });\n};\n\nvar addRow = function addRow(addedRows) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    row: {}\n  },\n      row = _ref3.row;\n\n  return [].concat(_toConsumableArray(addedRows), [row]);\n};\n\nvar changeAddedRow = function changeAddedRow(addedRows, _ref4) {\n  var rowId = _ref4.rowId,\n      change = _ref4.change;\n  var result = addedRows.slice();\n  result[rowId] = _objectSpread({}, result[rowId], change);\n  return result;\n};\n\nvar cancelAddedRows = function cancelAddedRows(addedRows, _ref5) {\n  var rowIds = _ref5.rowIds;\n  var result = [];\n  var indexSet = new Set(rowIds);\n  addedRows.forEach(function (row, index) {\n    if (!indexSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nvar changeRow = function changeRow(prevRowChanges, _ref6) {\n  var rowId = _ref6.rowId,\n      change = _ref6.change;\n  var prevChange = prevRowChanges[rowId] || {};\n  return _objectSpread({}, prevRowChanges, _defineProperty({}, rowId, _objectSpread({}, prevChange, change)));\n};\n\nvar cancelChanges = function cancelChanges(prevRowChanges, _ref7) {\n  var rowIds = _ref7.rowIds;\n\n  var result = _objectSpread({}, prevRowChanges);\n\n  rowIds.forEach(function (rowId) {\n    delete result[rowId];\n  });\n  return result;\n};\n\nvar deleteRows = function deleteRows(deletedRowIds, _ref8) {\n  var rowIds = _ref8.rowIds;\n  return [].concat(_toConsumableArray(deletedRowIds), _toConsumableArray(rowIds));\n};\n\nvar cancelDeletedRows = function cancelDeletedRows(deletedRowIds, _ref9) {\n  var rowIds = _ref9.rowIds;\n  var rowIdSet = new Set(rowIds);\n  return deletedRowIds.filter(function (rowId) {\n    return !rowIdSet.has(rowId);\n  });\n};\n\nvar changedRowsByIds = function changedRowsByIds(changes, rowIds) {\n  var result = {};\n  rowIds.forEach(function (rowId) {\n    result[rowId] = changes[rowId];\n  });\n  return result;\n};\n\nvar addedRowsByIds = function addedRowsByIds(addedRows, rowIds) {\n  var rowIdSet = new Set(rowIds);\n  var result = [];\n  addedRows.forEach(function (row, index) {\n    if (rowIdSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nvar defaultCreateRowChange = function defaultCreateRowChange(row, value, columnName) {\n  return _defineProperty({}, columnName, value);\n};\n\nvar createRowChangeGetter = function createRowChangeGetter() {\n  var createRowChange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultCreateRowChange;\n  var columnExtensions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var map = columnExtensions.reduce(function (acc, columnExtension) {\n    if (columnExtension.createRowChange) {\n      acc[columnExtension.columnName] = columnExtension.createRowChange;\n    }\n\n    return acc;\n  }, {});\n  return function (row, value, columnName) {\n    if (map[columnName]) {\n      return map[columnName](row, value, columnName);\n    }\n\n    return createRowChange(row, value, columnName);\n  };\n};\n\nvar getRowChange = function getRowChange(rowChanges, rowId) {\n  return rowChanges[rowId] || {};\n};\n\nvar TABLE_REORDERING_TYPE = Symbol('reordering');\n\nvar changeColumnOrder = function changeColumnOrder(order, _ref) {\n  var sourceColumnName = _ref.sourceColumnName,\n      targetColumnName = _ref.targetColumnName;\n  var sourceColumnIndex = order.indexOf(sourceColumnName);\n  var targetColumnIndex = order.indexOf(targetColumnName);\n  var newOrder = order.slice();\n  newOrder.splice(sourceColumnIndex, 1);\n  newOrder.splice(targetColumnIndex, 0, sourceColumnName);\n  return newOrder;\n};\n\nvar TABLE_DATA_TYPE = Symbol('data');\nvar TABLE_NODATA_TYPE = Symbol('nodata');\nvar TABLE_FLEX_TYPE = Symbol('flex');\n\nvar orderedColumns = function orderedColumns(tableColumns, order) {\n  return mergeSort(tableColumns, function (a, b) {\n    if (a.type !== TABLE_DATA_TYPE || b.type !== TABLE_DATA_TYPE) return 0;\n    var aPos = order.indexOf(a.column.name);\n    var bPos = order.indexOf(b.column.name);\n    return aPos - bPos;\n  });\n};\n\nvar tableHeaderRowsWithReordering = function tableHeaderRowsWithReordering(tableHeaderRows) {\n  return [].concat(_toConsumableArray(tableHeaderRows), [{\n    key: TABLE_REORDERING_TYPE.toString(),\n    type: TABLE_REORDERING_TYPE,\n    height: 0\n  }]);\n};\n\nvar draftOrder = function draftOrder(order, sourceColumnIndex, targetColumnIndex) {\n  if (sourceColumnIndex === -1 || targetColumnIndex === -1 || sourceColumnIndex === targetColumnIndex) {\n    return order;\n  }\n\n  var result = order.slice();\n  var sourceColumn = order[sourceColumnIndex];\n  result.splice(sourceColumnIndex, 1);\n  result.splice(targetColumnIndex, 0, sourceColumn);\n  return result;\n};\n\nvar UNSET_COLUMN_WIDTH_ERROR = ['The \"$1\" column\\'s width is not specified.', 'The TableColumnResizing plugin requires that all columns have the specified width.'].join('\\n');\n\nvar specifyWidths = function specifyWidths(tableColumns, widths, onAbsence) {\n  if (!widths.length) return tableColumns;\n  return tableColumns.reduce(function (acc, tableColumn) {\n    if (tableColumn.type === TABLE_DATA_TYPE) {\n      var columnName = tableColumn.column.name;\n      var column = widths.find(function (el) {\n        return el.columnName === columnName;\n      });\n      var width = column && column.width;\n\n      if (width === undefined) {\n        onAbsence(columnName);\n        acc.push(tableColumn);\n      } else {\n        acc.push(_objectSpread({}, tableColumn, {\n          width: width\n        }));\n      }\n    } else {\n      acc.push(tableColumn);\n    }\n\n    return acc;\n  }, []);\n};\n\nvar tableColumnsWithWidths = function tableColumnsWithWidths(tableColumns, columnWidths) {\n  return specifyWidths(tableColumns, columnWidths, function (columnName) {\n    throw new Error(UNSET_COLUMN_WIDTH_ERROR.replace('$1', columnName));\n  });\n};\n\nvar tableColumnsWithDraftWidths = function tableColumnsWithDraftWidths(tableColumns, draftColumnWidths) {\n  return specifyWidths(tableColumns, draftColumnWidths, function () {});\n};\n\nvar changeTableColumnWidth = function changeTableColumnWidth(state, _ref) {\n  var columnName = _ref.columnName,\n      shift = _ref.shift,\n      minColumnWidth = _ref.minColumnWidth;\n  var columnWidths = state.columnWidths;\n  var nextColumnWidth = columnWidths.slice();\n  var index = nextColumnWidth.findIndex(function (elem) {\n    return elem.columnName === columnName;\n  });\n  var updatedColumn = nextColumnWidth[index];\n  var size = Math.max(minColumnWidth, updatedColumn.width + shift);\n  nextColumnWidth.splice(index, 1, {\n    columnName: columnName,\n    width: size\n  });\n  return {\n    columnWidths: nextColumnWidth\n  };\n};\n\nvar draftTableColumnWidth = function draftTableColumnWidth(state, _ref2) {\n  var columnName = _ref2.columnName,\n      shift = _ref2.shift,\n      minColumnWidth = _ref2.minColumnWidth;\n  var columnWidths = state.columnWidths;\n  var updatedColumn = columnWidths.find(function (elem) {\n    return elem.columnName === columnName;\n  });\n  var size = Math.max(minColumnWidth, updatedColumn.width + shift);\n  return {\n    draftColumnWidths: [{\n      columnName: updatedColumn.columnName,\n      width: size\n    }]\n  };\n};\n\nvar cancelTableColumnWidthDraft = function cancelTableColumnWidthDraft() {\n  return {\n    draftColumnWidths: []\n  };\n};\n\nvar TABLE_EDIT_COMMAND_TYPE = Symbol('editCommand');\nvar TABLE_ADDED_TYPE = Symbol('added');\nvar TABLE_EDIT_TYPE = Symbol('edit');\nvar TABLE_HEADING_TYPE = Symbol('heading');\n\nvar isHeadingEditCommandsTableCell = function isHeadingEditCommandsTableCell(tableRow, tableColumn) {\n  return tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\n};\n\nvar isEditCommandsTableCell = function isEditCommandsTableCell(tableRow, tableColumn) {\n  return (tableRow.type === TABLE_DATA_TYPE || tableRow.type === TABLE_ADDED_TYPE || tableRow.type === TABLE_EDIT_TYPE) && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\n};\n\nvar tableColumnsWithEditing = function tableColumnsWithEditing(tableColumns, width) {\n  return [{\n    key: TABLE_EDIT_COMMAND_TYPE.toString(),\n    type: TABLE_EDIT_COMMAND_TYPE,\n    width: width\n  }].concat(_toConsumableArray(tableColumns));\n};\n\nvar isEditTableCell = function isEditTableCell(tableRow, tableColumn) {\n  return (tableRow.type === TABLE_ADDED_TYPE || tableRow.type === TABLE_EDIT_TYPE) && tableColumn.type === TABLE_DATA_TYPE;\n};\n\nvar isAddedTableRow = function isAddedTableRow(tableRow) {\n  return tableRow.type === TABLE_ADDED_TYPE;\n};\n\nvar isEditTableRow = function isEditTableRow(tableRow) {\n  return tableRow.type === TABLE_EDIT_TYPE;\n};\n\nvar tableRowsWithEditing = function tableRowsWithEditing(tableRows, editingRowIds, addedRows, rowHeight) {\n  var rowIds = new Set(editingRowIds);\n  var editedTableRows = tableRows.map(function (tableRow) {\n    return tableRow.type === TABLE_DATA_TYPE && rowIds.has(tableRow.rowId) ? _objectSpread({}, tableRow, {\n      type: TABLE_EDIT_TYPE,\n      height: rowHeight\n    }) : tableRow;\n  });\n  var addedTableRows = addedRows.map(function (row, rowIndex) {\n    return {\n      key: \"\".concat(TABLE_ADDED_TYPE.toString(), \"_\").concat(rowIndex),\n      type: TABLE_ADDED_TYPE,\n      rowId: rowIndex,\n      height: rowHeight,\n      row: row\n    };\n  });\n  return [].concat(_toConsumableArray(addedTableRows.reverse()), _toConsumableArray(editedTableRows));\n};\n\nvar TABLE_FILTER_TYPE = Symbol('filter');\nvar DEFAULT_FILTER_OPERATIONS = ['contains', 'notContains', 'startsWith', 'endsWith', 'equal', 'notEqual'];\n\nvar isFilterTableCell = function isFilterTableCell(tableRow, tableColumn) {\n  return tableRow.type === TABLE_FILTER_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n};\n\nvar isFilterTableRow = function isFilterTableRow(tableRow) {\n  return tableRow.type === TABLE_FILTER_TYPE;\n};\n\nvar getColumnFilterOperations = function getColumnFilterOperations(getAvailableFilterOperations, columnName) {\n  return getAvailableFilterOperations && getAvailableFilterOperations(columnName) || DEFAULT_FILTER_OPERATIONS;\n};\n\nvar isFilterValueEmpty = function isFilterValueEmpty(value) {\n  return value === undefined || !String(value).length;\n};\n\nvar getSelectedFilterOperation = function getSelectedFilterOperation(filterOperations, columnName, columnFilter, columnFilterOperations) {\n  if (filterOperations[columnName]) {\n    return filterOperations[columnName];\n  }\n\n  return columnFilter && columnFilter.operation ? columnFilter.operation : columnFilterOperations[0];\n};\n\nvar tableHeaderRowsWithFilter = function tableHeaderRowsWithFilter(headerRows, rowHeight) {\n  return [].concat(_toConsumableArray(headerRows), [{\n    key: TABLE_FILTER_TYPE.toString(),\n    type: TABLE_FILTER_TYPE,\n    height: rowHeight\n  }]);\n};\n\nvar TABLE_GROUP_TYPE = Symbol('group');\n\nvar isGroupTableCell = function isGroupTableCell(tableRow, tableColumn) {\n  return tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE && tableRow.row.groupedBy === tableColumn.column.name;\n};\n\nvar isGroupIndentTableCell = function isGroupIndentTableCell(tableRow, tableColumn, grouping) {\n  if (tableRow.type !== TABLE_GROUP_TYPE || tableColumn.type !== TABLE_GROUP_TYPE) return false;\n  if (tableRow.row.groupedBy === tableColumn.column.name) return false;\n  var rowGroupIndex = grouping.findIndex(function (columnGrouping) {\n    return columnGrouping.columnName === tableRow.row.groupedBy;\n  });\n  var columnGroupIndex = grouping.findIndex(function (columnGrouping) {\n    return columnGrouping.columnName === tableColumn.column.name;\n  });\n  return columnGroupIndex < rowGroupIndex;\n};\n\nvar isGroupTableRow = function isGroupTableRow(tableRow) {\n  return tableRow.type === TABLE_GROUP_TYPE;\n};\n\nvar tableColumnsWithDraftGrouping = function tableColumnsWithDraftGrouping(tableColumns, grouping, draftGrouping, showColumnWhenGrouped) {\n  return tableColumns.reduce(function (acc, tableColumn) {\n    if (tableColumn.type !== TABLE_DATA_TYPE) {\n      acc.push(tableColumn);\n      return acc;\n    }\n\n    var columnName = tableColumn.column.name;\n    var columnGroupingExists = grouping.some(function (columnGrouping) {\n      return columnGrouping.columnName === columnName;\n    });\n    var columnDraftGroupingExists = draftGrouping.some(function (columnGrouping) {\n      return columnGrouping.columnName === columnName;\n    });\n\n    if (!columnGroupingExists && !columnDraftGroupingExists || showColumnWhenGrouped(columnName)) {\n      acc.push(tableColumn);\n    } else if (!columnGroupingExists && columnDraftGroupingExists || columnGroupingExists && !columnDraftGroupingExists) {\n      acc.push(_objectSpread({}, tableColumn, {\n        draft: true\n      }));\n    }\n\n    return acc;\n  }, []);\n};\n\nvar tableColumnsWithGrouping = function tableColumnsWithGrouping(columns, tableColumns, grouping, draftGrouping, indentColumnWidth, showColumnWhenGrouped) {\n  return [].concat(_toConsumableArray(grouping.map(function (columnGrouping) {\n    var groupedColumn = columns.find(function (column) {\n      return column.name === columnGrouping.columnName;\n    });\n    return {\n      key: \"\".concat(TABLE_GROUP_TYPE.toString(), \"_\").concat(groupedColumn.name),\n      type: TABLE_GROUP_TYPE,\n      column: groupedColumn,\n      width: indentColumnWidth\n    };\n  })), _toConsumableArray(tableColumnsWithDraftGrouping(tableColumns, grouping, draftGrouping, showColumnWhenGrouped)));\n};\n\nvar tableRowsWithGrouping = function tableRowsWithGrouping(tableRows, isGroupRow) {\n  return tableRows.map(function (tableRow) {\n    if (tableRow.type !== TABLE_DATA_TYPE || !isGroupRow(tableRow.row)) {\n      return tableRow;\n    }\n\n    return _objectSpread({}, tableRow, {\n      key: \"\".concat(TABLE_GROUP_TYPE.toString(), \"_\").concat(tableRow.row.compoundKey),\n      type: TABLE_GROUP_TYPE\n    });\n  });\n};\n\nvar tableGroupCellColSpanGetter = function tableGroupCellColSpanGetter(getTableCellColSpan) {\n  return function (params) {\n    var tableRow = params.tableRow,\n        tableColumns = params.tableColumns,\n        tableColumn = params.tableColumn;\n\n    if (tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE && tableRow.row.groupedBy === tableColumn.column.name) {\n      return tableColumns.length - tableColumns.indexOf(tableColumn);\n    }\n\n    return getTableCellColSpan(params);\n  };\n};\n\nvar isHeadingTableCell = function isHeadingTableCell(tableRow, tableColumn) {\n  return tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n};\n\nvar isHeadingTableRow = function isHeadingTableRow(tableRow) {\n  return tableRow.type === TABLE_HEADING_TYPE;\n};\n\nvar findChainByColumnIndex = function findChainByColumnIndex(chains, columnIndex) {\n  return chains.find(function (chain) {\n    return chain.start <= columnIndex && columnIndex < chain.start + chain.columns.length;\n  });\n};\n\nvar splitHeaderColumnChains = function splitHeaderColumnChains(tableColumnChains, tableColumns, shouldSplitChain, extendChainProps) {\n  return tableColumnChains.map(function (row, rowIndex) {\n    return row.reduce(function (acc, chain) {\n      var currentChain = null;\n      chain.columns.forEach(function (col) {\n        var column = tableColumns.find(function (c) {\n          return c.key === col.key;\n        });\n        var isNewGroup = shouldSplitChain(currentChain, column, rowIndex);\n\n        if (isNewGroup) {\n          var start = currentChain ? currentChain.start + currentChain.columns.length : chain.start;\n          acc.push(_objectSpread({}, chain, extendChainProps(column), {\n            start: start,\n            columns: []\n          }));\n          currentChain = acc[acc.length - 1];\n        }\n\n        currentChain.columns.push(column);\n      });\n      return acc;\n    }, []);\n  });\n};\n\nvar generateSimpleChains = function generateSimpleChains(rows, columns) {\n  return rows.map(function () {\n    return [{\n      start: 0,\n      columns: columns\n    }];\n  });\n};\n\nvar tableRowsWithHeading = function tableRowsWithHeading(headerRows) {\n  return [{\n    key: TABLE_HEADING_TYPE.toString(),\n    type: TABLE_HEADING_TYPE\n  }].concat(_toConsumableArray(headerRows));\n};\n\nvar TABLE_BAND_TYPE = Symbol('band');\nvar BAND_GROUP_CELL = 'bandGroupCell';\nvar BAND_HEADER_CELL = 'bandHeaderCell';\nvar BAND_EMPTY_CELL = 'bandEmptyCell';\nvar BAND_DUPLICATE_RENDER = 'bandDuplicateRender';\n\nvar isBandedTableRow = function isBandedTableRow(tableRow) {\n  return tableRow.type === TABLE_BAND_TYPE;\n};\n\nvar isBandedOrHeaderRow = function isBandedOrHeaderRow(tableRow) {\n  return isBandedTableRow(tableRow) || tableRow.type === TABLE_HEADING_TYPE;\n};\n\nvar isNoDataColumn = function isNoDataColumn(columnType) {\n  return columnType !== TABLE_DATA_TYPE;\n};\n\nvar getColumnMeta = function getColumnMeta(columnName, bands, tableRowLevel) {\n  var level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var title = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  var result = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n  return bands.reduce(function (acc, column) {\n    if (column.columnName === columnName) {\n      acc.title = title;\n      acc.level = level;\n      return acc;\n    }\n\n    if (column.children !== undefined) {\n      return getColumnMeta(columnName, column.children, tableRowLevel, level + 1, level > tableRowLevel ? title : column.title, acc);\n    }\n\n    return acc;\n  }, result || {\n    level: level,\n    title: title\n  });\n};\n\nvar getBandComponent = function getBandComponent(_ref, tableHeaderRows, tableColumns, columnBands, tableHeaderColumnChains) {\n  var currentTableColumn = _ref.tableColumn,\n      tableRow = _ref.tableRow,\n      rowSpan = _ref.rowSpan;\n  if (rowSpan) return {\n    type: BAND_DUPLICATE_RENDER,\n    payload: null\n  };\n  var maxLevel = tableHeaderRows.filter(function (column) {\n    return column.type === TABLE_BAND_TYPE;\n  }).length + 1;\n  var currentRowLevel = tableRow.level === undefined ? maxLevel - 1 : tableRow.level;\n  var currentColumnMeta = currentTableColumn.type === TABLE_DATA_TYPE ? getColumnMeta(currentTableColumn.column.name, columnBands, currentRowLevel) : {\n    level: 0,\n    title: ''\n  };\n  if (currentColumnMeta.level < currentRowLevel) return {\n    type: BAND_EMPTY_CELL,\n    payload: null\n  };\n  var currentColumnIndex = tableColumns.findIndex(function (column) {\n    return column.key === currentTableColumn.key;\n  });\n  var previousTableColumn = tableColumns[currentColumnIndex - 1];\n  var beforeBorder = false;\n\n  if (currentColumnIndex > 0 && currentTableColumn.type === TABLE_DATA_TYPE && isNoDataColumn(previousTableColumn.type)) {\n    beforeBorder = true;\n  }\n\n  if (currentColumnMeta.level === currentRowLevel) {\n    return {\n      type: BAND_HEADER_CELL,\n      payload: _objectSpread({\n        tableRow: tableHeaderRows.find(function (row) {\n          return row.type === TABLE_HEADING_TYPE;\n        }),\n        rowSpan: maxLevel - currentRowLevel\n      }, beforeBorder && {\n        beforeBorder: beforeBorder\n      })\n    };\n  }\n\n  var currentColumnChain = findChainByColumnIndex(tableHeaderColumnChains[currentRowLevel], currentColumnIndex);\n\n  if (currentColumnChain.start < currentColumnIndex) {\n    return {\n      type: null,\n      payload: null\n    };\n  }\n\n  return {\n    type: BAND_GROUP_CELL,\n    payload: _objectSpread({\n      colSpan: currentColumnChain.columns.length,\n      value: currentColumnMeta.title,\n      column: currentColumnMeta\n    }, beforeBorder && {\n      beforeBorder: beforeBorder\n    })\n  };\n};\n\nvar tableRowsWithBands = function tableRowsWithBands(tableHeaderRows, columnBands, tableColumns) {\n  var tableDataColumns = tableColumns.filter(function (column) {\n    return column.type === TABLE_DATA_TYPE;\n  });\n\n  var getMaxNestedLevel = function getMaxNestedLevel(bands) {\n    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return bands.reduce(function (acc, column) {\n      if (column.children !== undefined) {\n        return getMaxNestedLevel(column.children, level + 1, acc);\n      }\n\n      var isDataColumn = tableDataColumns.findIndex(function (dataColumn) {\n        return dataColumn.column.name === column.columnName;\n      }) > -1;\n\n      if (level > acc.level && isDataColumn) {\n        acc.level = level;\n        return acc;\n      }\n\n      return acc;\n    }, result || {\n      level: 0\n    });\n  };\n\n  var tableBandHeaders = Array.from({\n    length: getMaxNestedLevel(columnBands, 0).level\n  }).map(function (row, index) {\n    return {\n      key: \"\".concat(TABLE_BAND_TYPE.toString(), \"_\").concat(index),\n      type: TABLE_BAND_TYPE,\n      level: index\n    };\n  });\n  return [].concat(_toConsumableArray(tableBandHeaders), _toConsumableArray(tableHeaderRows));\n};\n\nvar tableHeaderColumnChainsWithBands = function tableHeaderColumnChainsWithBands(tableHeaderRows, tableColumns, bands) {\n  var chains = generateSimpleChains(tableHeaderRows, tableColumns);\n  var maxBandRowIndex = tableHeaderRows.filter(function (row) {\n    return row.type === TABLE_BAND_TYPE;\n  }).length;\n  var rawBandChains = chains.slice(0, maxBandRowIndex);\n  var currentBand = null;\n\n  var shouldSplitChain = function shouldSplitChain(chain, column, rowIndex) {\n    if (rowIndex > maxBandRowIndex) return false;\n    var columnName = column.column && column.column.name;\n    currentBand = getColumnMeta(columnName, bands, rowIndex);\n    return !chain || chain.bandTitle !== currentBand.title;\n  };\n\n  var extendChainProps = function extendChainProps() {\n    return {\n      bandTitle: (currentBand || {}).title\n    };\n  };\n\n  var bandChains = splitHeaderColumnChains(rawBandChains, tableColumns, shouldSplitChain, extendChainProps);\n  return [].concat(_toConsumableArray(bandChains), _toConsumableArray(chains.slice(maxBandRowIndex)));\n};\n\nvar toggleDetailRowExpanded = function toggleDetailRowExpanded(prevExpanded, _ref) {\n  var rowId = _ref.rowId,\n      state = _ref.state;\n  return toggle(prevExpanded, [rowId], state);\n};\n\nvar TABLE_DETAIL_TYPE = Symbol('detail');\n\nvar isDetailRowExpanded = function isDetailRowExpanded(expandedDetailRowIds, rowId) {\n  return expandedDetailRowIds.indexOf(rowId) > -1;\n};\n\nvar isDetailToggleTableCell = function isDetailToggleTableCell(tableRow, tableColumn) {\n  return tableColumn.type === TABLE_DETAIL_TYPE && tableRow.type === TABLE_DATA_TYPE;\n};\n\nvar isDetailTableRow = function isDetailTableRow(tableRow) {\n  return tableRow.type === TABLE_DETAIL_TYPE;\n};\n\nvar isDetailTableCell = function isDetailTableCell(tableColumn, tableColumns) {\n  return tableColumns.indexOf(tableColumn) === 0;\n};\n\nvar tableRowsWithExpandedDetail = function tableRowsWithExpandedDetail(tableRows, expandedDetailRowIds, rowHeight) {\n  var result = tableRows;\n  expandedDetailRowIds.forEach(function (expandedRowId) {\n    var rowIndex = result.findIndex(function (tableRow) {\n      return tableRow.type === TABLE_DATA_TYPE && tableRow.rowId === expandedRowId;\n    });\n    if (rowIndex === -1) return;\n    var insertIndex = rowIndex + 1;\n    var _result$rowIndex = result[rowIndex],\n        row = _result$rowIndex.row,\n        rowId = _result$rowIndex.rowId;\n    result = [].concat(_toConsumableArray(result.slice(0, insertIndex)), [{\n      key: \"\".concat(TABLE_DETAIL_TYPE.toString(), \"_\").concat(rowId),\n      type: TABLE_DETAIL_TYPE,\n      rowId: rowId,\n      row: row,\n      height: rowHeight\n    }], _toConsumableArray(result.slice(insertIndex)));\n  });\n  return result;\n};\n\nvar tableColumnsWithDetail = function tableColumnsWithDetail(tableColumns, toggleColumnWidth) {\n  return [{\n    key: TABLE_DETAIL_TYPE.toString(),\n    type: TABLE_DETAIL_TYPE,\n    width: toggleColumnWidth\n  }].concat(_toConsumableArray(tableColumns));\n};\n\nvar tableDetailCellColSpanGetter = function tableDetailCellColSpanGetter(getTableCellColSpan) {\n  return function (params) {\n    var tableRow = params.tableRow,\n        tableColumns = params.tableColumns,\n        tableColumn = params.tableColumn;\n\n    if (tableRow.type === TABLE_DETAIL_TYPE && tableColumns.indexOf(tableColumn) === 0) {\n      return tableColumns.length;\n    }\n\n    return getTableCellColSpan(params);\n  };\n};\n\nvar TABLE_SELECT_TYPE = Symbol('select');\n\nvar isSelectTableCell = function isSelectTableCell(tableRow, tableColumn) {\n  return tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_DATA_TYPE;\n};\n\nvar isSelectAllTableCell = function isSelectAllTableCell(tableRow, tableColumn) {\n  return tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_HEADING_TYPE;\n};\n\nvar tableColumnsWithSelection = function tableColumnsWithSelection(tableColumns, selectionColumnWidth) {\n  return [{\n    key: TABLE_SELECT_TYPE.toString(),\n    type: TABLE_SELECT_TYPE,\n    width: selectionColumnWidth\n  }].concat(_toConsumableArray(tableColumns));\n};\n\nvar isDataTableCell = function isDataTableCell(tableRow, tableColumn) {\n  return tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n};\n\nvar isHeaderStubTableCell = function isHeaderStubTableCell(tableRow, headerRows) {\n  return headerRows.indexOf(tableRow) > -1;\n};\n\nvar isDataTableRow = function isDataTableRow(tableRow) {\n  return tableRow.type === TABLE_DATA_TYPE;\n};\n\nvar isNoDataTableRow = function isNoDataTableRow(tableRow) {\n  return tableRow.type === TABLE_NODATA_TYPE;\n};\n\nvar isNoDataTableCell = function isNoDataTableCell(tableColumn, tableColumns) {\n  return tableColumns.indexOf(tableColumn) === 0;\n};\n\nvar getColumnExtension = function getColumnExtension(columnExtensions, columnName) {\n  if (!columnExtensions) {\n    return {};\n  }\n\n  var columnExtension = columnExtensions.find(function (extension) {\n    return extension.columnName === columnName;\n  });\n\n  if (!columnExtension) {\n    return {};\n  }\n\n  return columnExtension;\n};\n\nvar getColumnExtensionValueGetter = function getColumnExtensionValueGetter(columnExtensions, extensionName, defaultValue) {\n  return function (columnName) {\n    if (columnExtensions) {\n      var columnExtension = getColumnExtension(columnExtensions, columnName);\n      var extensionValue = columnExtension[extensionName];\n      return extensionValue !== undefined ? extensionValue : defaultValue;\n    }\n\n    return defaultValue;\n  };\n};\n\nvar tableColumnsWithDataRows = function tableColumnsWithDataRows(columns, columnExtensions) {\n  return columns.map(function (column) {\n    var name = column.name;\n    var columnExtension = getColumnExtension(columnExtensions, name);\n    return {\n      key: \"\".concat(TABLE_DATA_TYPE.toString(), \"_\").concat(name),\n      type: TABLE_DATA_TYPE,\n      width: columnExtension.width,\n      align: columnExtension.align,\n      wordWrapEnabled: columnExtension.wordWrapEnabled,\n      column: column\n    };\n  });\n};\n\nvar tableRowsWithDataRows = function tableRowsWithDataRows(rows, getRowId) {\n  return !rows.length ? [{\n    key: TABLE_NODATA_TYPE.toString(),\n    type: TABLE_NODATA_TYPE\n  }] : rows.map(function (row) {\n    var rowId = getRowId(row);\n    return {\n      row: row,\n      rowId: rowId,\n      type: TABLE_DATA_TYPE,\n      key: \"\".concat(TABLE_DATA_TYPE.toString(), \"_\").concat(rowId)\n    };\n  });\n};\n\nvar tableCellColSpanGetter = function tableCellColSpanGetter(params) {\n  var tableRow = params.tableRow,\n      tableColumns = params.tableColumns,\n      tableColumn = params.tableColumn;\n\n  if (tableRow.type === TABLE_NODATA_TYPE && tableColumns.indexOf(tableColumn) === 0) {\n    return tableColumns.length;\n  }\n\n  return 1;\n};\n\nvar visibleTableColumns = function visibleTableColumns(tableColumns, hiddenColumnNames) {\n  return tableColumns.filter(function (tableColumn) {\n    return tableColumn.type !== TABLE_DATA_TYPE || hiddenColumnNames.indexOf(tableColumn.column.name) === -1;\n  });\n};\n\nvar tableDataColumnsExist = function tableDataColumnsExist(tableColumns) {\n  return tableColumns.some(function (column) {\n    return column.type === TABLE_DATA_TYPE;\n  });\n};\n\nvar columnChooserItems = function columnChooserItems(columns, hiddenColumnNames) {\n  return columns.map(function (column) {\n    return {\n      column: column,\n      hidden: hiddenColumnNames.indexOf(column.name) !== -1\n    };\n  });\n};\n\nvar toggleColumn = function toggleColumn(hiddenColumnNames, columnName) {\n  return hiddenColumnNames.indexOf(columnName) === -1 ? [].concat(_toConsumableArray(hiddenColumnNames), [columnName]) : hiddenColumnNames.filter(function (hiddenColumn) {\n    return hiddenColumn !== columnName;\n  });\n};\n\nvar toggleRowExpanded = function toggleRowExpanded(prevExpanded, _ref) {\n  var rowId = _ref.rowId,\n      state = _ref.state;\n  return toggle(prevExpanded, [rowId], state);\n};\n\nvar GRID_TREE_NODE_TYPE = Symbol('treeNode');\n\nvar customTreeRows = function customTreeRows(currentRow, getChildRows, rootRows) {\n  var level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var childRows = getChildRows(currentRow, rootRows);\n  if (!childRows) return {\n    rows: [],\n    treeMeta: [],\n    empty: true\n  };\n  return childRows.reduce(function (acc, row) {\n    var _acc$rows, _acc$treeMeta;\n\n    var nestedResult = customTreeRows(row, getChildRows, rootRows, level + 1);\n\n    (_acc$rows = acc.rows).push.apply(_acc$rows, [row].concat(_toConsumableArray(nestedResult.rows)));\n\n    (_acc$treeMeta = acc.treeMeta).push.apply(_acc$treeMeta, [[row, {\n      level: level,\n      leaf: !!nestedResult.empty\n    }]].concat(_toConsumableArray(nestedResult.treeMeta)));\n\n    return acc;\n  }, {\n    rows: [],\n    treeMeta: []\n  });\n};\n\nvar customTreeRowsWithMeta = function customTreeRowsWithMeta(rows, getChildRows) {\n  var result = customTreeRows(null, getChildRows, rows);\n  return {\n    rows: result.rows,\n    treeMeta: new Map(result.treeMeta)\n  };\n};\n\nvar customTreeRowIdGetter = function customTreeRowIdGetter(getRowId, _ref) {\n  var rows = _ref.rows,\n      treeMeta = _ref.treeMeta;\n  var firstNestedRowIndex = rows.findIndex(function (row) {\n    return treeMeta.get(row).level > 0;\n  });\n\n  if (firstNestedRowIndex === -1 || getRowId(rows[firstNestedRowIndex]) !== undefined) {\n    return getRowId;\n  }\n\n  var map = new Map(rows.map(function (row, rowIndex) {\n    return [row, rowIndex];\n  }));\n  return function (row) {\n    return map.get(row);\n  };\n};\n\nvar customTreeRowLevelKeyGetter = function customTreeRowLevelKeyGetter(getRowLevelKey, _ref2) {\n  var treeMeta = _ref2.treeMeta;\n  return function (row) {\n    var rowMeta = treeMeta.get(row);\n\n    if (rowMeta !== undefined) {\n      return \"\".concat(GRID_TREE_NODE_TYPE.toString(), \"_\").concat(rowMeta.level);\n    }\n\n    return getRowLevelKey && getRowLevelKey();\n  };\n};\n\nvar expandedTreeRows = function expandedTreeRows(_ref3, getRowId, expandedRowIds) {\n  var rows = _ref3.rows,\n      treeMeta = _ref3.treeMeta;\n  var expandedRowIdsSet = new Set(expandedRowIds);\n  var currentExpanded = true;\n  var currentLevel = 0;\n  return rows.reduce(function (acc, row) {\n    var rowMeta = treeMeta.get(row);\n    var level = rowMeta && rowMeta.level;\n\n    if (level === undefined && currentExpanded) {\n      acc.rows.push(row);\n      return acc;\n    }\n\n    if (!currentExpanded && (level === undefined || level > currentLevel)) {\n      var lastRow = acc.rows[acc.rows.length - 1];\n      var collapsedItems = acc.collapsedRowsMeta.get(lastRow);\n\n      if (!collapsedItems) {\n        collapsedItems = [];\n        acc.collapsedRowsMeta.set(lastRow, collapsedItems);\n      }\n\n      collapsedItems.push(row);\n      return acc;\n    }\n\n    currentExpanded = expandedRowIdsSet.has(getRowId(row));\n    currentLevel = level;\n    acc.rows.push(row);\n    return acc;\n  }, {\n    rows: [],\n    treeMeta: treeMeta,\n    collapsedRowsMeta: new Map()\n  });\n};\n\nvar collapsedTreeRowsGetter = function collapsedTreeRowsGetter(getCollapsedRows, _ref4) {\n  var collapsedRowsMeta = _ref4.collapsedRowsMeta;\n  return function (row) {\n    return collapsedRowsMeta.get(row) || getCollapsedRows && getCollapsedRows(row);\n  };\n};\n\nvar isTreeRowLeafGetter = function isTreeRowLeafGetter(_ref5) {\n  var treeMeta = _ref5.treeMeta;\n  return function (row) {\n    var rowMeta = treeMeta.get(row);\n    return rowMeta && rowMeta.leaf;\n  };\n};\n\nvar getTreeRowLevelGetter = function getTreeRowLevelGetter(_ref6) {\n  var treeMeta = _ref6.treeMeta;\n  return function (row) {\n    var rowMeta = treeMeta.get(row);\n    return rowMeta && rowMeta.level;\n  };\n};\n\nvar unwrappedCustomTreeRows = function unwrappedCustomTreeRows(_ref7) {\n  var rows = _ref7.rows;\n  return rows;\n};\n\nvar isTreeTableCell = function isTreeTableCell(tableRow, tableColumn, forColumnName) {\n  return tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE && tableColumn.column.name === forColumnName;\n};\n\nvar changeSearchValue = function changeSearchValue(prevSearchValue, searchValue) {\n  return searchValue;\n};\n\nvar searchFilterExpression = function searchFilterExpression(searchValue, columns, filterExpression) {\n  var filters = columns.map(function (_ref) {\n    var name = _ref.name;\n    return {\n      columnName: name,\n      value: searchValue\n    };\n  });\n  var selfFilterExpression = {\n    operator: 'or',\n    filters: filters\n  };\n\n  if (!filterExpression) {\n    return selfFilterExpression;\n  }\n\n  return {\n    operator: 'and',\n    filters: [filterExpression, selfFilterExpression]\n  };\n};\n\nvar getAvailableFilterOperationsGetter = function getAvailableFilterOperationsGetter(getAvailableFilterOperations, availableFilterOperations, columnNames) {\n  return function (columnName) {\n    return columnNames.indexOf(columnName) > -1 && availableFilterOperations || typeof getAvailableFilterOperations === 'function' && getAvailableFilterOperations(columnName) || undefined;\n  };\n};\n\nvar FIXED_COLUMN_LEFT_SIDE = 'left';\nvar FIXED_COLUMN_RIGHT_SIDE = 'right';\nvar TABLE_FIXED_TYPE = Symbol('fixed');\n\nvar getFixedColumnKeys = function getFixedColumnKeys(tableColumns, fixedNames) {\n  return tableColumns.filter(function (tableColumn) {\n    return tableColumn.type === TABLE_DATA_TYPE && fixedNames.indexOf(tableColumn.column.name) !== -1 || fixedNames.indexOf(tableColumn.type) !== -1;\n  }).map(function (_ref) {\n    var key = _ref.key;\n    return key;\n  });\n};\n\nvar isFixedTableRow = function isFixedTableRow(tableRow) {\n  return tableRow.type === TABLE_FIXED_TYPE;\n};\n\nvar calculatePosition = function calculatePosition(array, index, tableColumnDimensions) {\n  return index === 0 ? 0 : array.slice(0, index).reduce(function (acc, target) {\n    return acc + tableColumnDimensions[target] || 0;\n  }, 0);\n};\n\nvar calculateFixedColumnProps = function calculateFixedColumnProps(_ref2, _ref3, tableColumns, tableColumnDimensions, tableHeaderColumnChains) {\n  var tableColumn = _ref2.tableColumn;\n  var leftColumns = _ref3.leftColumns,\n      rightColumns = _ref3.rightColumns;\n  var side = tableColumn.fixed;\n  var targetArray = side === FIXED_COLUMN_LEFT_SIDE ? getFixedColumnKeys(tableColumns, leftColumns) : getFixedColumnKeys(tableColumns, rightColumns).reverse();\n  var index = tableColumns.findIndex(function (_ref4) {\n    var key = _ref4.key;\n    return key === tableColumn.key;\n  });\n  var fixedIndex = targetArray.indexOf(tableColumn.key);\n  var columnChain = findChainByColumnIndex(tableHeaderColumnChains[0], index);\n  var showLeftDivider = columnChain.start === index && index !== 0;\n  var showRightDivider = columnChain.start + columnChain.columns.length - 1 === index && index < tableColumns.length - 1;\n  var position = calculatePosition(targetArray, fixedIndex, tableColumnDimensions);\n  return {\n    showRightDivider: showRightDivider,\n    showLeftDivider: showLeftDivider,\n    position: position,\n    side: side\n  };\n};\n\nvar tableColumnsWithFixed = function tableColumnsWithFixed(tableColumns, leftColumns, rightColumns) {\n  return tableColumns.map(function (tableColumn) {\n    var fixed;\n\n    if (tableColumn.type === TABLE_DATA_TYPE && leftColumns.indexOf(tableColumn.column.name) !== -1 || leftColumns.indexOf(tableColumn.type) !== -1) {\n      fixed = FIXED_COLUMN_LEFT_SIDE;\n    }\n\n    if (tableColumn.type === TABLE_DATA_TYPE && rightColumns.indexOf(tableColumn.column.name) !== -1 || rightColumns.indexOf(tableColumn.type) !== -1) {\n      fixed = FIXED_COLUMN_RIGHT_SIDE;\n    }\n\n    return fixed ? _objectSpread({}, tableColumn, {\n      fixed: fixed\n    }) : tableColumn;\n  });\n};\n\nvar tableHeaderRowsWithFixed = function tableHeaderRowsWithFixed(tableHeaderRows) {\n  return [].concat(_toConsumableArray(tableHeaderRows), [{\n    key: TABLE_FIXED_TYPE.toString(),\n    type: TABLE_FIXED_TYPE,\n    height: 0\n  }]);\n};\n\nvar tableHeaderColumnChainsWithFixed = function tableHeaderColumnChainsWithFixed(tableHeaderColumnChains, tableHeaderRows, tableColumns) {\n  var chains = tableHeaderColumnChains || generateSimpleChains(tableHeaderRows, tableColumns);\n\n  var shouldSplitChain = function shouldSplitChain(currentGroup, column) {\n    return !currentGroup || currentGroup.fixed !== column.fixed;\n  };\n\n  var extendChainProps = function extendChainProps(column) {\n    return {\n      fixed: column.fixed\n    };\n  };\n\n  return splitHeaderColumnChains(chains, tableColumns, shouldSplitChain, extendChainProps);\n};\n\nvar defaultSummaryCalculators = {\n  count: function count(rows) {\n    return rows.length;\n  },\n  sum: function sum(rows, getValue) {\n    return rows.reduce(function (acc, row) {\n      return acc + getValue(row);\n    }, 0);\n  },\n  max: function max(rows, getValue) {\n    return rows.length ? rows.reduce(function (acc, row) {\n      return Math.max(acc, getValue(row));\n    }, -Infinity) : null;\n  },\n  min: function min(rows, getValue) {\n    return rows.length ? rows.reduce(function (acc, row) {\n      return Math.min(acc, getValue(row));\n    }, Infinity) : null;\n  },\n  avg: function avg(rows, getValue) {\n    return rows.length ? rows.reduce(function (acc, row) {\n      return acc + getValue(row);\n    }, 0) / rows.length : null;\n  }\n};\n\nvar defaultSummaryCalculator = function defaultSummaryCalculator(type, rows, getValue) {\n  var summaryCalculator = defaultSummaryCalculators[type];\n\n  if (!summaryCalculator) {\n    throw new Error(\"The summary type '\".concat(type, \"' is not defined\"));\n  }\n\n  return summaryCalculator(rows, getValue);\n};\n\nvar rowsSummary = function rowsSummary(rows, summaryItems, getCellValue, calculator) {\n  return summaryItems.reduce(function (acc, _ref) {\n    var type = _ref.type,\n        columnName = _ref.columnName;\n\n    var getValue = function getValue(row) {\n      return getCellValue(row, columnName);\n    };\n\n    acc.push(calculator(type, rows, getValue));\n    return acc;\n  }, []);\n};\n\nvar totalSummaryValues = function totalSummaryValues(rows, summaryItems, getCellValue, getRowLevelKey, isGroupRow, getCollapsedRows) {\n  var calculator = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : defaultSummaryCalculator;\n  var plainRows = rows.reduce(function (acc, row) {\n    if (getRowLevelKey && getRowLevelKey(row)) {\n      if (!isGroupRow || !isGroupRow(row)) {\n        acc.push(row);\n      }\n\n      var collapsedRows = getCollapsedRows && getCollapsedRows(row);\n\n      if (collapsedRows) {\n        acc.push.apply(acc, _toConsumableArray(collapsedRows));\n      }\n\n      return acc;\n    }\n\n    acc.push(row);\n    return acc;\n  }, []);\n  return rowsSummary(plainRows, summaryItems, getCellValue, calculator);\n};\n\nvar groupSummaryValues = function groupSummaryValues(rows, summaryItems, getCellValue, getRowLevelKey, isGroupRow) {\n  var calculator = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : defaultSummaryCalculator;\n  var levels = [];\n  var summaries = {};\n  rows.forEach(function (row) {\n    var levelKey = getRowLevelKey(row);\n\n    if (!levelKey) {\n      levels.forEach(function (level) {\n        level.rows.push(row);\n      });\n    }\n\n    var levelIndex = levels.findIndex(function (level) {\n      return level.levelKey === levelKey;\n    });\n\n    if (levelIndex > -1) {\n      levels.slice(levelIndex).forEach(function (level) {\n        summaries[level.row.compoundKey] = rowsSummary(level.rows, summaryItems, getCellValue, calculator);\n      });\n      levels = levels.slice(0, levelIndex);\n    }\n\n    if (isGroupRow(row)) {\n      levels.push({\n        levelKey: levelKey,\n        row: row,\n        rows: []\n      });\n    }\n  }, {});\n  levels.forEach(function (level) {\n    summaries[level.row.compoundKey] = rowsSummary(level.rows, summaryItems, getCellValue, calculator);\n  });\n  return summaries;\n};\n\nvar treeSummaryValues = function treeSummaryValues(rows, summaryItems, getCellValue, getRowLevelKey, isGroupRow, getRowId) {\n  var calculator = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : defaultSummaryCalculator;\n  var levels = [];\n  var summaries = {};\n  rows.forEach(function (row) {\n    var levelKey = getRowLevelKey(row);\n\n    if (!levelKey) {\n      levels[levels.length - 1].rows.push(row);\n      return;\n    }\n\n    var levelIndex = levels.findIndex(function (level) {\n      return level.levelKey === levelKey;\n    });\n\n    if (levelIndex > -1) {\n      levels.slice(levelIndex).forEach(function (level) {\n        if (level.rows.length) {\n          summaries[getRowId(level.row)] = rowsSummary(level.rows, summaryItems, getCellValue, calculator);\n        }\n      });\n      levels = levels.slice(0, levelIndex);\n    }\n\n    if (!isGroupRow || !isGroupRow(row)) {\n      if (levels.length) {\n        levels[levels.length - 1].rows.push(row);\n      }\n\n      levels.push({\n        levelKey: levelKey,\n        row: row,\n        rows: []\n      });\n    }\n  }, {});\n  levels.forEach(function (level) {\n    if (level.rows.length) {\n      summaries[getRowId(level.row)] = rowsSummary(level.rows, summaryItems, getCellValue, calculator);\n    }\n  });\n  return summaries;\n};\n\nvar TABLE_TOTAL_SUMMARY_TYPE = Symbol('totalSummary');\nvar TABLE_GROUP_SUMMARY_TYPE = Symbol('groupSummary');\nvar TABLE_TREE_SUMMARY_TYPE = Symbol('treeSummary');\n\nvar tableRowsWithTotalSummaries = function tableRowsWithTotalSummaries(footerRows) {\n  return [{\n    key: TABLE_TOTAL_SUMMARY_TYPE.toString(),\n    type: TABLE_TOTAL_SUMMARY_TYPE\n  }].concat(_toConsumableArray(footerRows));\n};\n\nvar tableRowsWithSummaries = function tableRowsWithSummaries(tableRows, getRowLevelKey, isGroupRow, getRowId) {\n  if (!getRowLevelKey) return tableRows;\n  var result = [];\n\n  var closeLevel = function closeLevel(level) {\n    if (!level.opened) return;\n\n    if (isGroupRow && isGroupRow(level.row)) {\n      var compoundKey = level.row.compoundKey;\n      result.push({\n        key: \"\".concat(TABLE_GROUP_SUMMARY_TYPE.toString(), \"_\").concat(compoundKey),\n        type: TABLE_GROUP_SUMMARY_TYPE,\n        row: level.row\n      });\n    } else {\n      var rowId = getRowId(level.row);\n      result.push({\n        key: \"\".concat(TABLE_TREE_SUMMARY_TYPE.toString(), \"_\").concat(rowId),\n        type: TABLE_TREE_SUMMARY_TYPE,\n        row: level.row\n      });\n    }\n  };\n\n  var levels = [];\n  tableRows.forEach(function (tableRow) {\n    var row = tableRow.row;\n    var levelKey = getRowLevelKey(row);\n\n    if (levelKey) {\n      var levelIndex = levels.findIndex(function (level) {\n        return level.levelKey === levelKey;\n      });\n\n      if (levelIndex > -1) {\n        levels.slice(levelIndex).forEach(closeLevel);\n        levels = levels.slice(0, levelIndex);\n      }\n\n      if (!isGroupRow || !isGroupRow(row)) {\n        levels = levels.map(function (level) {\n          return _objectSpread({}, level, {\n            opened: true\n          });\n        });\n      }\n\n      levels.push({\n        levelKey: levelKey,\n        row: row,\n        opened: false\n      });\n    } else {\n      levels = levels.map(function (level) {\n        return _objectSpread({}, level, {\n          opened: true\n        });\n      });\n    }\n\n    result.push(tableRow);\n  });\n  levels.slice().reverse().forEach(closeLevel);\n  return result;\n};\n\nvar isTotalSummaryTableCell = function isTotalSummaryTableCell(tableRow, tableColumn) {\n  return tableRow.type === TABLE_TOTAL_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n};\n\nvar isGroupSummaryTableCell = function isGroupSummaryTableCell(tableRow, tableColumn) {\n  return tableRow.type === TABLE_GROUP_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n};\n\nvar isTreeSummaryTableCell = function isTreeSummaryTableCell(tableRow, tableColumn) {\n  return tableRow.type === TABLE_TREE_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n};\n\nvar isTotalSummaryTableRow = function isTotalSummaryTableRow(tableRow) {\n  return tableRow.type === TABLE_TOTAL_SUMMARY_TYPE;\n};\n\nvar isGroupSummaryTableRow = function isGroupSummaryTableRow(tableRow) {\n  return tableRow.type === TABLE_GROUP_SUMMARY_TYPE;\n};\n\nvar isTreeSummaryTableRow = function isTreeSummaryTableRow(tableRow) {\n  return tableRow.type === TABLE_TREE_SUMMARY_TYPE;\n};\n\nvar getColumnSummaries = function getColumnSummaries(summaryItems, columnName, summaryValues) {\n  return summaryItems.map(function (item, index) {\n    return [item, index];\n  }).filter(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        item = _ref2[0];\n\n    return item.columnName === columnName;\n  }).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        item = _ref4[0],\n        index = _ref4[1];\n\n    return {\n      type: item.type,\n      value: summaryValues[index]\n    };\n  });\n};\n\nvar getTargetColumnGeometries = function getTargetColumnGeometries(columnGeometries, sourceIndex) {\n  var sourceWidth = columnGeometries[sourceIndex].right - columnGeometries[sourceIndex].left;\n\n  var getWidthDifference = function getWidthDifference(index) {\n    return columnGeometries[index].right - columnGeometries[index].left - sourceWidth;\n  };\n\n  return columnGeometries.map(function (_ref, targetIndex) {\n    var top = _ref.top,\n        right = _ref.right,\n        bottom = _ref.bottom,\n        left = _ref.left;\n    var leftBorder = left;\n\n    if (targetIndex > 0 && targetIndex <= sourceIndex) {\n      leftBorder = Math.min(leftBorder, leftBorder - getWidthDifference(targetIndex - 1));\n    }\n\n    if (targetIndex > sourceIndex) {\n      leftBorder = Math.max(leftBorder, leftBorder + getWidthDifference(targetIndex));\n    }\n\n    var rightBorder = right;\n\n    if (targetIndex < columnGeometries.length - 1 && targetIndex >= sourceIndex) {\n      rightBorder = Math.max(rightBorder, rightBorder + getWidthDifference(targetIndex + 1));\n    }\n\n    if (targetIndex < sourceIndex) {\n      rightBorder = Math.min(rightBorder, rightBorder - getWidthDifference(targetIndex));\n    }\n\n    return {\n      top: top,\n      right: rightBorder,\n      bottom: bottom,\n      left: leftBorder\n    };\n  });\n};\n\nvar getTableColumnGeometries = function getTableColumnGeometries(columns, tableWidth) {\n  var columnWidths = columns.map(function (column) {\n    return column.width;\n  });\n  var freeSpace = tableWidth;\n  var restrictedSpace = columnWidths.reduce(function (accum, width) {\n    return accum + (width || 0);\n  }, 0);\n  var freeSpacePortions = columnWidths.reduce(function (accum, width) {\n    return accum + (width === undefined ? 1 : 0);\n  }, 0);\n  var freeSpacePortion = (freeSpace - restrictedSpace) / freeSpacePortions;\n  var lastRightPosition = 0;\n  return columnWidths.map(function (width) {\n    return width === undefined ? freeSpacePortion : width;\n  }).map(function (width) {\n    lastRightPosition += width;\n    return {\n      left: lastRightPosition - width,\n      right: lastRightPosition\n    };\n  });\n};\n\nvar getTableTargetColumnIndex = function getTableTargetColumnIndex(columnGeometries, sourceIndex, offset) {\n  return getTargetColumnGeometries(columnGeometries, sourceIndex).findIndex(function (_ref) {\n    var left = _ref.left,\n        right = _ref.right;\n    return offset > left && offset < right;\n  });\n};\n\nvar ANIMATION_DURATION = 200;\n\nvar getAnimationProgress = function getAnimationProgress(animation) {\n  return (new Date().getTime() - animation.startTime) / ANIMATION_DURATION;\n};\n\nvar getAnimations = function getAnimations(prevColumns, nextColumns, tableWidth, prevAnimations) {\n  var resizing = prevColumns.map(function (column) {\n    return column.key;\n  }).join() === nextColumns.map(function (column) {\n    return column.key;\n  }).join();\n  var prevColumnGeometries = new Map(getTableColumnGeometries(prevColumns, tableWidth).map(function (geometry, index) {\n    return [prevColumns[index].key, geometry];\n  }).map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        geometry = _ref3[1];\n\n    var animation = prevAnimations.get(key);\n    if (!animation) return [key, geometry];\n    var progress = easeOutCubic(getAnimationProgress(animation));\n    var left = (animation.left.to - animation.left.from) * progress + animation.left.from;\n    return [key, {\n      left: left,\n      right: geometry.right - (geometry.left - left)\n    }];\n  }));\n  var nextColumnGeometries = new Map(getTableColumnGeometries(nextColumns, tableWidth).map(function (geometry, index) {\n    return [nextColumns[index].key, geometry];\n  }));\n  return new Map(_toConsumableArray(nextColumnGeometries.keys()).map(function (key) {\n    var prev = prevColumnGeometries.get(key);\n    var next = nextColumnGeometries.get(key);\n    var result = {\n      startTime: new Date().getTime(),\n      style: {}\n    };\n    var takePrevColumnIntoAccount = !!prevAnimations.get(key) || prev && !resizing;\n\n    if (Math.abs((takePrevColumnIntoAccount ? prev.left : next.left) - next.left) > 1) {\n      result.left = {\n        from: prev.left,\n        to: next.left\n      };\n    }\n\n    return [key, result];\n  }).filter(function (animation) {\n    return animation[1].left;\n  }));\n};\n\nvar filterActiveAnimations = function filterActiveAnimations(animations) {\n  return new Map(_toConsumableArray(animations.entries()).filter(function (_ref4) {\n    var _ref5 = _slicedToArray(_ref4, 2),\n        animation = _ref5[1];\n\n    return getAnimationProgress(animation) < 1;\n  }));\n};\n\nvar evalAnimations = function evalAnimations(animations) {\n  return new Map(_toConsumableArray(animations.entries()).map(function (_ref6) {\n    var _ref7 = _slicedToArray(_ref6, 2),\n        key = _ref7[0],\n        animation = _ref7[1];\n\n    var progress = easeOutCubic(getAnimationProgress(animation));\n\n    var result = _objectSpread({}, animation.style);\n\n    if (animation.left) {\n      var offset = (animation.left.to - animation.left.from) * (progress - 1);\n      result.transform = \"translateX(\".concat(offset, \"px)\");\n    }\n\n    return [key, result];\n  }));\n};\n\nvar isOnTheSameLine = function isOnTheSameLine(geometry, y) {\n  return y >= geometry.top && y <= geometry.bottom;\n};\n\nvar rectToObject = function rectToObject(_ref) {\n  var top = _ref.top,\n      right = _ref.right,\n      bottom = _ref.bottom,\n      left = _ref.left;\n  return {\n    top: top,\n    right: right,\n    bottom: bottom,\n    left: left\n  };\n};\n\nvar collapseGapsBetweenItems = function collapseGapsBetweenItems(geometries) {\n  return geometries.map(function (geometry, index) {\n    if (index !== geometries.length - 1 && geometry.top === geometries[index + 1].top) {\n      return _objectSpread({}, geometry, {\n        right: geometries[index + 1].left\n      });\n    }\n\n    return geometry;\n  });\n};\n\nvar getGroupCellTargetIndex = function getGroupCellTargetIndex(geometries, sourceIndex, _ref2) {\n  var x = _ref2.x,\n      y = _ref2.y;\n  if (geometries.length === 0) return 0;\n  var targetGeometries = sourceIndex !== -1 ? getTargetColumnGeometries(geometries, sourceIndex) : geometries.map(rectToObject);\n  var targetIndex = collapseGapsBetweenItems(targetGeometries).findIndex(function (geometry, index) {\n    var inVerticalBounds = isOnTheSameLine(geometry, y);\n    var inHorizontalBounds = x >= geometry.left && x <= geometry.right;\n    var shouldGoFirst = index === 0 && x < geometry.left;\n    var shouldGoOnLineBreak = !inVerticalBounds && !!geometries[index - 1] && isOnTheSameLine(geometries[index - 1], y);\n    return inVerticalBounds && inHorizontalBounds || shouldGoFirst || shouldGoOnLineBreak;\n  });\n  return targetIndex === -1 ? geometries.length : targetIndex;\n};\n\nvar TABLE_STUB_TYPE = Symbol('stub');\n\nvar getVisibleBoundaryWithFixed = function getVisibleBoundaryWithFixed(visibleBoundary, items) {\n  return items.reduce(function (acc, item, index) {\n    if (item.fixed && (index < visibleBoundary[0] || index > visibleBoundary[1])) {\n      acc.push([index, index]);\n    }\n\n    return acc;\n  }, [visibleBoundary]);\n};\n\nvar getVisibleBoundary = function getVisibleBoundary(items, viewportStart, viewportSize, getItemSize, overscan) {\n  var start = null;\n  var end = null;\n  var viewportEnd = viewportStart + viewportSize;\n  var index = 0;\n  var beforePosition = 0;\n\n  while (end === null && index < items.length) {\n    var item = items[index];\n    var afterPosition = beforePosition + getItemSize(item);\n    var isVisible = beforePosition >= viewportStart && beforePosition < viewportEnd || afterPosition > viewportStart && afterPosition <= viewportEnd || beforePosition < viewportStart && afterPosition > viewportEnd;\n\n    if (isVisible && start === null) {\n      start = index;\n    }\n\n    if (!isVisible && start !== null) {\n      end = index - 1;\n      break;\n    }\n\n    index += 1;\n    beforePosition = afterPosition;\n  }\n\n  if (start !== null && end === null) {\n    end = index - 1;\n  }\n\n  start = start === null ? 0 : start;\n  end = end === null ? 0 : end;\n\n  if (overscan) {\n    start = Math.max(0, start - overscan);\n    end = Math.min(items.length - 1, end + overscan);\n  }\n\n  return [start, end];\n};\n\nvar getSpanBoundary = function getSpanBoundary(items, visibleBoundaries, getItemSpan) {\n  return visibleBoundaries.map(function (visibleBoundary) {\n    var _visibleBoundary = _slicedToArray(visibleBoundary, 2),\n        start = _visibleBoundary[0],\n        end = _visibleBoundary[1];\n\n    for (var index = 0; index <= visibleBoundary[1]; index += 1) {\n      var span = getItemSpan(items[index]);\n\n      if (index < visibleBoundary[0] && index + span > visibleBoundary[0]) {\n        start = index;\n      }\n\n      if (index + (span - 1) > visibleBoundary[1]) {\n        end = index + (span - 1);\n      }\n    }\n\n    return [start, end];\n  });\n};\n\nvar collapseBoundaries = function collapseBoundaries(itemsCount, visibleBoundaries, spanBoundaries) {\n  var boundaries = [];\n  var visiblePoints = visibleBoundaries.reduce(function (acc, boundary) {\n    for (var point = boundary[0]; point <= boundary[1]; point += 1) {\n      acc.push(point);\n    }\n\n    return acc;\n  }, []);\n  var spanStartPoints = new Set();\n  var spanEndPoints = new Set();\n  spanBoundaries.forEach(function (rowBoundaries) {\n    return rowBoundaries.forEach(function (boundary) {\n      spanStartPoints.add(boundary[0]);\n      spanEndPoints.add(boundary[1]);\n    });\n  });\n  var lastPoint;\n\n  for (var index = 0; index < itemsCount; index += 1) {\n    if (visiblePoints.indexOf(index) !== -1) {\n      if (lastPoint !== undefined) {\n        boundaries.push([lastPoint, index - 1]);\n        lastPoint = undefined;\n      }\n\n      boundaries.push([index, index]);\n    } else if (spanStartPoints.has(index)) {\n      if (index > 0) {\n        boundaries.push([lastPoint !== undefined ? lastPoint : index, index - 1]);\n      }\n\n      lastPoint = index;\n    } else if (spanEndPoints.has(index)) {\n      boundaries.push([lastPoint !== undefined ? lastPoint : index, index]);\n      lastPoint = undefined;\n    } else if (lastPoint === undefined) {\n      lastPoint = index;\n    }\n  }\n\n  if (lastPoint !== undefined) {\n    boundaries.push([lastPoint, itemsCount - 1]);\n  }\n\n  return boundaries;\n};\n\nvar getColumnsSize = function getColumnsSize(columns, startIndex, endIndex, getColumnSize) {\n  var size = 0;\n  var index;\n  var loopEndIndex = endIndex + 1;\n\n  for (index = startIndex; index < loopEndIndex; index += 1) {\n    size += getColumnSize(columns[index], 0) || 0;\n  }\n\n  return size;\n};\n\nvar getCollapsedColumns = function getCollapsedColumns(columns, visibleBoundaries, boundaries, getColumnWidth) {\n  var collapsedColumns = [];\n  boundaries.forEach(function (boundary) {\n    var isVisible = visibleBoundaries.reduce(function (acc, visibleBoundary) {\n      return acc || visibleBoundary[0] <= boundary[0] && boundary[1] <= visibleBoundary[1];\n    }, false);\n\n    if (isVisible) {\n      var column = columns[boundary[0]];\n      collapsedColumns.push(_objectSpread({}, column, {\n        width: getColumnWidth(column, 0)\n      }));\n    } else {\n      collapsedColumns.push({\n        key: \"\".concat(TABLE_STUB_TYPE.toString(), \"_\").concat(boundary[0], \"_\").concat(boundary[1]),\n        type: TABLE_STUB_TYPE,\n        width: getColumnsSize(columns, boundary[0], boundary[1], getColumnWidth)\n      });\n    }\n  });\n  return collapsedColumns;\n};\n\nvar getCollapsedRows = function getCollapsedRows(rows, visibleBoundary, boundaries, getRowHeight, getCells) {\n  var collapsedColumns = [];\n  boundaries.forEach(function (boundary) {\n    var isVisible = visibleBoundary[0] <= boundary[0] && boundary[1] <= visibleBoundary[1];\n\n    if (isVisible) {\n      var row = rows[boundary[0]];\n      collapsedColumns.push({\n        row: row,\n        cells: getCells(row)\n      });\n    } else {\n      collapsedColumns.push({\n        row: {\n          key: \"\".concat(TABLE_STUB_TYPE.toString(), \"_\").concat(boundary[0], \"_\").concat(boundary[1]),\n          type: TABLE_STUB_TYPE,\n          height: getColumnsSize(rows, boundary[0], boundary[1], getRowHeight)\n        }\n      });\n    }\n  });\n  return collapsedColumns;\n};\n\nvar getCollapsedCells = function getCollapsedCells(columns, spanBoundaries, boundaries, getColSpan) {\n  var collapsedColumns = [];\n  var index = 0;\n\n  var _loop = function _loop() {\n    var boundary = boundaries[index];\n    var isSpan = spanBoundaries.reduce(function (acc, spanBoundary) {\n      return acc || spanBoundary[0] <= boundary[0] && boundary[1] <= spanBoundary[1];\n    }, false);\n\n    if (isSpan) {\n      var column = columns[boundary[0]];\n      var realColSpan = getColSpan(column);\n      var realColSpanEnd = realColSpan + boundary[0] - 1;\n      var colSpanEnd = boundaries.findIndex(function (colSpanBoundary) {\n        return colSpanBoundary[0] <= realColSpanEnd && realColSpanEnd <= colSpanBoundary[1];\n      });\n      collapsedColumns.push({\n        column: column,\n        colSpan: colSpanEnd - index + 1\n      });\n      index += 1;\n    } else {\n      collapsedColumns.push({\n        column: {\n          key: \"\".concat(TABLE_STUB_TYPE.toString(), \"_\").concat(boundary[0], \"_\").concat(boundary[1]),\n          type: TABLE_STUB_TYPE\n        },\n        colSpan: 1\n      });\n      index += 1;\n    }\n  };\n\n  while (index < boundaries.length) {\n    _loop();\n  }\n\n  return collapsedColumns;\n};\n\nvar getCollapsedGrid = function getCollapsedGrid(_ref) {\n  var rows = _ref.rows,\n      columns = _ref.columns,\n      top = _ref.top,\n      height = _ref.height,\n      left = _ref.left,\n      width = _ref.width,\n      _ref$getColumnWidth = _ref.getColumnWidth,\n      getColumnWidth = _ref$getColumnWidth === void 0 ? function (column) {\n    return column.width;\n  } : _ref$getColumnWidth,\n      _ref$getRowHeight = _ref.getRowHeight,\n      getRowHeight = _ref$getRowHeight === void 0 ? function (row) {\n    return row.height;\n  } : _ref$getRowHeight,\n      _ref$getColSpan = _ref.getColSpan,\n      getColSpan = _ref$getColSpan === void 0 ? function () {\n    return 1;\n  } : _ref$getColSpan;\n\n  if (!rows.length || !columns.length) {\n    return {\n      columns: [],\n      rows: []\n    };\n  }\n\n  var rowsVisibleBoundary = getVisibleBoundary(rows, top, height, getRowHeight, 3);\n  var columnsVisibleBoundary = getVisibleBoundaryWithFixed(getVisibleBoundary(columns, left, width, getColumnWidth, 1), columns);\n  var rowSpanBoundaries = rows.slice(rowsVisibleBoundary[0], rowsVisibleBoundary[1]).map(function (row) {\n    return getSpanBoundary(columns, columnsVisibleBoundary, function (column) {\n      return getColSpan(row, column);\n    });\n  });\n  var columnBoundaries = collapseBoundaries(columns.length, columnsVisibleBoundary, rowSpanBoundaries);\n  var rowBoundaries = collapseBoundaries(rows.length, [rowsVisibleBoundary], []);\n  return {\n    columns: getCollapsedColumns(columns, columnsVisibleBoundary, columnBoundaries, getColumnWidth),\n    rows: getCollapsedRows(rows, rowsVisibleBoundary, rowBoundaries, getRowHeight, function (row) {\n      return getCollapsedCells(columns, getSpanBoundary(columns, columnsVisibleBoundary, function (column) {\n        return getColSpan(row, column);\n      }), columnBoundaries, function (column) {\n        return getColSpan(row, column);\n      });\n    })\n  };\n};\n\nexport { getColumnExtension, getColumnExtensionValueGetter, getTableColumnGeometries, getTableTargetColumnIndex, getAnimations, filterActiveAnimations, evalAnimations, getGroupCellTargetIndex, getCollapsedGrid, TABLE_STUB_TYPE, rowIdGetter, cellValueGetter, changeColumnSorting, getColumnSortingDirection, getPersistentSortedColumns, calculateKeepOther, sortedRows, changeColumnFilter, getColumnFilterConfig, filterExpression, defaultFilterPredicate, filteredRows, filteredCollapsedRowsGetter, unwrappedFilteredRows, GROUP_KEY_SEPARATOR, changeColumnGrouping, toggleExpandedGroups, draftColumnGrouping, cancelColumnGroupingDraft, adjustSortIndex, groupRowChecker, groupRowLevelKeyGetter, groupedRows, expandedGroupRows, groupCollapsedRowsGetter, customGroupedRows, customGroupingRowIdGetter, groupingPanelItems, setCurrentPage, setPageSize, paginatedRows, rowsWithPageHeaders, rowCount, pageCount, currentPage, clamp, firstRowOnPage, lastRowOnPage, calculateStartPage, toggleSelection, rowsWithAvailableToSelect, someSelected, allSelected, unwrapSelectedRows, startEditRows, stopEditRows, addRow, changeAddedRow, cancelAddedRows, changeRow, cancelChanges, deleteRows, cancelDeletedRows, changedRowsByIds, addedRowsByIds, createRowChangeGetter, getRowChange, TABLE_REORDERING_TYPE, changeColumnOrder, orderedColumns, tableHeaderRowsWithReordering, draftOrder, tableColumnsWithWidths, tableColumnsWithDraftWidths, changeTableColumnWidth, draftTableColumnWidth, cancelTableColumnWidthDraft, TABLE_EDIT_COMMAND_TYPE, isHeadingEditCommandsTableCell, isEditCommandsTableCell, tableColumnsWithEditing, TABLE_ADDED_TYPE, TABLE_EDIT_TYPE, isEditTableCell, isAddedTableRow, isEditTableRow, tableRowsWithEditing, TABLE_FILTER_TYPE, DEFAULT_FILTER_OPERATIONS, isFilterTableCell, isFilterTableRow, getColumnFilterOperations, isFilterValueEmpty, getSelectedFilterOperation, tableHeaderRowsWithFilter, TABLE_GROUP_TYPE, isGroupTableCell, isGroupIndentTableCell, isGroupTableRow, tableColumnsWithGrouping, tableRowsWithGrouping, tableGroupCellColSpanGetter, TABLE_HEADING_TYPE, isHeadingTableCell, isHeadingTableRow, findChainByColumnIndex, splitHeaderColumnChains, generateSimpleChains, tableRowsWithHeading, TABLE_BAND_TYPE, BAND_GROUP_CELL, BAND_HEADER_CELL, BAND_EMPTY_CELL, BAND_DUPLICATE_RENDER, isBandedTableRow, isBandedOrHeaderRow, isNoDataColumn, getColumnMeta, getBandComponent, tableRowsWithBands, tableHeaderColumnChainsWithBands, toggleDetailRowExpanded, TABLE_DETAIL_TYPE, isDetailRowExpanded, isDetailToggleTableCell, isDetailTableRow, isDetailTableCell, tableRowsWithExpandedDetail, tableColumnsWithDetail, tableDetailCellColSpanGetter, TABLE_SELECT_TYPE, isSelectTableCell, isSelectAllTableCell, tableColumnsWithSelection, TABLE_DATA_TYPE, TABLE_NODATA_TYPE, TABLE_FLEX_TYPE, isDataTableCell, isHeaderStubTableCell, isDataTableRow, isNoDataTableRow, isNoDataTableCell, tableColumnsWithDataRows, tableRowsWithDataRows, tableCellColSpanGetter, visibleTableColumns, tableDataColumnsExist, columnChooserItems, toggleColumn, toggleRowExpanded, customTreeRowsWithMeta, customTreeRowIdGetter, customTreeRowLevelKeyGetter, expandedTreeRows, collapsedTreeRowsGetter, isTreeRowLeafGetter, getTreeRowLevelGetter, unwrappedCustomTreeRows, isTreeTableCell, changeSearchValue, searchFilterExpression, getAvailableFilterOperationsGetter, FIXED_COLUMN_LEFT_SIDE, FIXED_COLUMN_RIGHT_SIDE, TABLE_FIXED_TYPE, getFixedColumnKeys, isFixedTableRow, calculateFixedColumnProps, tableColumnsWithFixed, tableHeaderRowsWithFixed, tableHeaderColumnChainsWithFixed, defaultSummaryCalculator, totalSummaryValues, groupSummaryValues, treeSummaryValues, tableRowsWithTotalSummaries, tableRowsWithSummaries, isTotalSummaryTableCell, isGroupSummaryTableCell, isTreeSummaryTableCell, isTotalSummaryTableRow, isGroupSummaryTableRow, isTreeSummaryTableRow, getColumnSummaries, TABLE_TOTAL_SUMMARY_TYPE, TABLE_GROUP_SUMMARY_TYPE, TABLE_TREE_SUMMARY_TYPE };","map":null,"metadata":{},"sourceType":"module"}