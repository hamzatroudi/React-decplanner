{"ast":null,"code":"/**\n * Bundle of @devexpress/dx-react-grid\n * Generated: 2018-12-25\n * Version: 1.10.0\n * License: https://js.devexpress.com/Licensing\n */\nimport { createElement, PureComponent, Fragment, createRef } from 'react';\nimport { array, func, node, object, bool, number, arrayOf, string, shape, any, oneOfType, symbol, oneOf } from 'prop-types';\nimport { Plugin, Getter, Template, TemplatePlaceholder, PluginHost, TemplateConnector, createStateHelper, Action, DragDropProvider, withComponents, DropTarget, DragSource, RefHolder, Sizer, RefType, connectProps } from '@devexpress/dx-react-core';\nimport { rowIdGetter, cellValueGetter, columnChooserItems, changeColumnFilter, getColumnExtensionValueGetter, filterExpression, defaultFilterPredicate, filteredCollapsedRowsGetter, unwrappedFilteredRows, filteredRows, getColumnExtension, startEditRows, stopEditRows, changeRow, cancelChanges, changedRowsByIds, addRow, changeAddedRow, cancelAddedRows, addedRowsByIds, deleteRows, cancelDeletedRows, createRowChangeGetter, setCurrentPage, setPageSize, rowsWithPageHeaders, rowCount, paginatedRows, currentPage, toggleExpandedGroups, draftColumnGrouping, cancelColumnGroupingDraft, adjustSortIndex, changeColumnGrouping, groupRowChecker, groupRowLevelKeyGetter, groupCollapsedRowsGetter, expandedGroupRows, groupedRows, customGroupingRowIdGetter, customGroupedRows, toggleSelection, rowsWithAvailableToSelect, allSelected, someSelected, unwrapSelectedRows, getPersistentSortedColumns, calculateKeepOther, changeColumnSorting, sortedRows, draftOrder, TABLE_DATA_TYPE, getTableTargetColumnIndex, changeColumnOrder, TABLE_REORDERING_TYPE, tableHeaderRowsWithReordering, orderedColumns, tableColumnsWithDataRows, tableCellColSpanGetter, isHeaderStubTableCell, isDataTableCell, isNoDataTableRow, isNoDataTableCell, isDataTableRow, TABLE_NODATA_TYPE, tableRowsWithDataRows, isSelectAllTableCell, isSelectTableCell, TABLE_SELECT_TYPE, tableColumnsWithSelection, toggleDetailRowExpanded, isDetailToggleTableCell, isDetailRowExpanded, isDetailTableRow, isDetailTableCell, TABLE_DETAIL_TYPE, tableDetailCellColSpanGetter, tableColumnsWithDetail, tableRowsWithExpandedDetail, isGroupTableRow, isGroupTableCell, isGroupIndentTableCell, TABLE_GROUP_TYPE, tableRowsWithGrouping, tableGroupCellColSpanGetter, tableColumnsWithGrouping, isHeadingTableCell, getColumnSortingDirection, isHeadingTableRow, TABLE_HEADING_TYPE, tableRowsWithHeading, isBandedOrHeaderRow, getBandComponent, BAND_DUPLICATE_RENDER, BAND_EMPTY_CELL, BAND_GROUP_CELL, BAND_HEADER_CELL, isBandedTableRow, TABLE_BAND_TYPE, tableRowsWithBands, tableHeaderColumnChainsWithBands, isFilterTableCell, getColumnFilterConfig, getColumnFilterOperations, getSelectedFilterOperation, isFilterTableRow, TABLE_FILTER_TYPE, tableHeaderRowsWithFilter, isFilterValueEmpty, isEditTableCell, isAddedTableRow, getRowChange, isEditTableRow, TABLE_ADDED_TYPE, TABLE_EDIT_TYPE, tableRowsWithEditing, isHeadingEditCommandsTableCell, isEditCommandsTableCell, TABLE_EDIT_COMMAND_TYPE, tableColumnsWithEditing, tableColumnsWithWidths, tableColumnsWithDraftWidths, changeTableColumnWidth, draftTableColumnWidth, cancelTableColumnWidthDraft, pageCount, getGroupCellTargetIndex, groupingPanelItems, getAvailableFilterOperationsGetter, toggleColumn, tableDataColumnsExist, visibleTableColumns, toggleRowExpanded, expandedTreeRows, customTreeRowIdGetter, customTreeRowLevelKeyGetter, isTreeRowLeafGetter, getTreeRowLevelGetter, collapsedTreeRowsGetter, unwrappedCustomTreeRows, customTreeRowsWithMeta, isTreeTableCell, changeSearchValue, searchFilterExpression, calculateFixedColumnProps, isFixedTableRow, tableHeaderRowsWithFixed, tableHeaderColumnChainsWithFixed, tableColumnsWithFixed, defaultSummaryCalculator, totalSummaryValues, groupSummaryValues, treeSummaryValues, isTotalSummaryTableCell, getColumnSummaries, isGroupSummaryTableCell, isTreeSummaryTableCell, isTotalSummaryTableRow, isGroupSummaryTableRow, isTreeSummaryTableRow, TABLE_TREE_SUMMARY_TYPE, TABLE_GROUP_SUMMARY_TYPE, TABLE_TOTAL_SUMMARY_TYPE, tableRowsWithSummaries, tableRowsWithTotalSummaries, getAnimations, TABLE_FLEX_TYPE, filterActiveAnimations, evalAnimations, TABLE_STUB_TYPE, getCollapsedGrid } from '@devexpress/dx-grid-core';\nimport { getMessagesFormatter, memoize, isEdgeBrowser } from '@devexpress/dx-core';\nimport { findDOMNode } from 'react-dom';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nvar GridCore =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(GridCore, _React$PureComponent);\n\n  function GridCore() {\n    _classCallCheck(this, GridCore);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GridCore).apply(this, arguments));\n  }\n\n  _createClass(GridCore, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          rows = _this$props.rows,\n          columns = _this$props.columns,\n          getRowId = _this$props.getRowId,\n          getCellValue = _this$props.getCellValue,\n          Root = _this$props.rootComponent;\n      return createElement(Plugin, null, createElement(Getter, {\n        name: \"rows\",\n        value: rows\n      }), createElement(Getter, {\n        name: \"getRowId\",\n        value: rowIdGetter(getRowId, rows)\n      }), createElement(Getter, {\n        name: \"columns\",\n        value: columns\n      }), createElement(Getter, {\n        name: \"getCellValue\",\n        value: cellValueGetter(getCellValue, columns)\n      }), createElement(Template, {\n        name: \"root\"\n      }, createElement(Root, null, createElement(TemplatePlaceholder, {\n        name: \"header\"\n      }), createElement(TemplatePlaceholder, {\n        name: \"body\"\n      }), createElement(TemplatePlaceholder, {\n        name: \"footer\"\n      }))));\n    }\n  }]);\n\n  return GridCore;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? GridCore.propTypes = {\n  rows: array.isRequired,\n  getRowId: func,\n  getCellValue: func,\n  columns: array.isRequired,\n  rootComponent: func.isRequired\n} : void 0;\nGridCore.defaultProps = {\n  getRowId: undefined,\n  getCellValue: undefined\n};\n\nvar Grid = function Grid(_ref) {\n  var rows = _ref.rows,\n      columns = _ref.columns,\n      getRowId = _ref.getRowId,\n      getCellValue = _ref.getCellValue,\n      rootComponent = _ref.rootComponent,\n      children = _ref.children;\n  return createElement(PluginHost, null, createElement(GridCore, {\n    rows: rows,\n    columns: columns,\n    getRowId: getRowId,\n    getCellValue: getCellValue,\n    rootComponent: rootComponent\n  }), children);\n};\n\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes = {\n  rows: array.isRequired,\n  getRowId: func,\n  getCellValue: func,\n  columns: array.isRequired,\n  rootComponent: func.isRequired,\n  children: node\n} : void 0;\nGrid.defaultProps = {\n  getRowId: undefined,\n  getCellValue: undefined,\n  children: undefined\n};\nvar pluginDependencies = [{\n  name: 'TableColumnVisibility'\n}, {\n  name: 'Toolbar'\n}];\n\nvar ColumnChooser =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(ColumnChooser, _React$PureComponent);\n\n  function ColumnChooser(props) {\n    var _this;\n\n    _classCallCheck(this, ColumnChooser);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColumnChooser).call(this, props));\n    _this.state = {\n      visible: false\n    };\n    _this.handleToggle = _this.handleToggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleHide = _this.handleHide.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setButtonRef = _this.setButtonRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ColumnChooser, [{\n    key: \"setButtonRef\",\n    value: function setButtonRef(button) {\n      this.button = button;\n    }\n  }, {\n    key: \"handleToggle\",\n    value: function handleToggle() {\n      var visible = this.state.visible;\n      this.setState({\n        visible: !visible\n      });\n    }\n  }, {\n    key: \"handleHide\",\n    value: function handleHide() {\n      this.setState({\n        visible: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          Overlay = _this$props.overlayComponent,\n          Container = _this$props.containerComponent,\n          Item = _this$props.itemComponent,\n          ToggleButton = _this$props.toggleButtonComponent,\n          messages = _this$props.messages;\n      var getMessage = getMessagesFormatter(messages);\n      var visible = this.state.visible;\n      return createElement(Plugin, {\n        name: \"ColumnChooser\",\n        dependencies: pluginDependencies\n      }, createElement(Template, {\n        name: \"toolbarContent\"\n      }, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_ref, _ref2) {\n        var columns = _ref.columns,\n            hiddenColumnNames = _ref.hiddenColumnNames,\n            isColumnTogglingEnabled = _ref.isColumnTogglingEnabled;\n        var toggleColumnVisibility = _ref2.toggleColumnVisibility;\n        return createElement(Fragment, null, createElement(ToggleButton, {\n          buttonRef: _this2.setButtonRef,\n          onToggle: _this2.handleToggle,\n          getMessage: getMessage,\n          active: visible\n        }), createElement(Overlay, {\n          visible: visible,\n          target: _this2.button,\n          onHide: _this2.handleHide\n        }, createElement(Container, null, columnChooserItems(columns, hiddenColumnNames).map(function (item) {\n          var columnName = item.column.name;\n          var togglingEnabled = isColumnTogglingEnabled(columnName);\n          return createElement(Item, {\n            key: columnName,\n            item: item,\n            disabled: !togglingEnabled,\n            onToggle: function onToggle() {\n              return toggleColumnVisibility(columnName);\n            }\n          });\n        }))));\n      })));\n    }\n  }]);\n\n  return ColumnChooser;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? ColumnChooser.propTypes = {\n  overlayComponent: func.isRequired,\n  containerComponent: func.isRequired,\n  itemComponent: func.isRequired,\n  toggleButtonComponent: func.isRequired,\n  messages: object\n} : void 0;\nColumnChooser.defaultProps = {\n  messages: {}\n};\nColumnChooser.components = {\n  overlayComponent: 'Overlay',\n  containerComponent: 'Container',\n  itemComponent: 'Item',\n  toggleButtonComponent: 'ToggleButton'\n};\n\nvar columnExtensionValueGetter = function columnExtensionValueGetter(columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'filteringEnabled', defaultValue);\n};\n\nvar filterExpressionComputed = function filterExpressionComputed(_ref) {\n  var filters = _ref.filters,\n      filterExpressionValue = _ref.filterExpression;\n  return filterExpression(filters, filterExpressionValue);\n};\n\nvar FilteringState =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(FilteringState, _React$PureComponent);\n\n  function FilteringState(props) {\n    var _this;\n\n    _classCallCheck(this, FilteringState);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FilteringState).call(this, props));\n    _this.state = {\n      filters: props.filters || props.defaultFilters\n    };\n    var stateHelper = createStateHelper(_assertThisInitialized(_assertThisInitialized(_this)), {\n      filters: function filters() {\n        var onFiltersChange = _this.props.onFiltersChange;\n        return onFiltersChange;\n      }\n    });\n    _this.changeColumnFilter = stateHelper.applyFieldReducer.bind(stateHelper, 'filters', changeColumnFilter);\n    return _this;\n  }\n\n  _createClass(FilteringState, [{\n    key: \"render\",\n    value: function render() {\n      var filters = this.state.filters;\n      var _this$props = this.props,\n          columnExtensions = _this$props.columnExtensions,\n          columnFilteringEnabled = _this$props.columnFilteringEnabled;\n      return createElement(Plugin, {\n        name: \"FilteringState\"\n      }, createElement(Getter, {\n        name: \"filters\",\n        value: filters\n      }), createElement(Getter, {\n        name: \"filterExpression\",\n        computed: filterExpressionComputed\n      }), createElement(Getter, {\n        name: \"isColumnFilteringEnabled\",\n        value: columnExtensionValueGetter(columnExtensions, columnFilteringEnabled)\n      }), createElement(Action, {\n        name: \"changeColumnFilter\",\n        action: this.changeColumnFilter\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$filters = nextProps.filters,\n          filters = _nextProps$filters === void 0 ? prevState.filters : _nextProps$filters;\n      return {\n        filters: filters\n      };\n    }\n  }]);\n\n  return FilteringState;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? FilteringState.propTypes = {\n  filters: array,\n  defaultFilters: array,\n  onFiltersChange: func,\n  columnExtensions: array,\n  columnFilteringEnabled: bool\n} : void 0;\nFilteringState.defaultProps = {\n  filters: undefined,\n  defaultFilters: [],\n  onFiltersChange: undefined,\n  columnExtensions: undefined,\n  columnFilteringEnabled: true\n};\nvar pluginDependencies$1 = [{\n  name: 'FilteringState',\n  optional: true\n}, {\n  name: 'SearchState',\n  optional: true\n}];\n\nvar getCollapsedRowsComputed = function getCollapsedRowsComputed(_ref) {\n  var rows = _ref.rows;\n  return filteredCollapsedRowsGetter(rows);\n};\n\nvar unwrappedRowsComputed = function unwrappedRowsComputed(_ref2) {\n  var rows = _ref2.rows;\n  return unwrappedFilteredRows(rows);\n};\n\nvar IntegratedFiltering =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(IntegratedFiltering, _React$PureComponent);\n\n  function IntegratedFiltering() {\n    _classCallCheck(this, IntegratedFiltering);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IntegratedFiltering).apply(this, arguments));\n  }\n\n  _createClass(IntegratedFiltering, [{\n    key: \"render\",\n    value: function render() {\n      var columnExtensions = this.props.columnExtensions;\n\n      var getColumnPredicate = function getColumnPredicate(columnName) {\n        return getColumnExtension(columnExtensions, columnName).predicate;\n      };\n\n      var rowsComputed = function rowsComputed(_ref3) {\n        var rows = _ref3.rows,\n            filterExpression$$1 = _ref3.filterExpression,\n            getCellValue = _ref3.getCellValue,\n            getRowLevelKey = _ref3.getRowLevelKey,\n            getCollapsedRows = _ref3.getCollapsedRows;\n        return filteredRows(rows, filterExpression$$1, getCellValue, getColumnPredicate, getRowLevelKey, getCollapsedRows);\n      };\n\n      return createElement(Plugin, {\n        name: \"IntegratedFiltering\",\n        dependencies: pluginDependencies$1\n      }, createElement(Getter, {\n        name: \"rows\",\n        computed: rowsComputed\n      }), createElement(Getter, {\n        name: \"getCollapsedRows\",\n        computed: getCollapsedRowsComputed\n      }), createElement(Getter, {\n        name: \"rows\",\n        computed: unwrappedRowsComputed\n      }));\n    }\n  }]);\n\n  return IntegratedFiltering;\n}(PureComponent);\n\nIntegratedFiltering.defaultPredicate = defaultFilterPredicate;\nprocess.env.NODE_ENV !== \"production\" ? IntegratedFiltering.propTypes = {\n  columnExtensions: array\n} : void 0;\nIntegratedFiltering.defaultProps = {\n  columnExtensions: undefined\n};\n\nvar columnExtensionValueGetter$1 = function columnExtensionValueGetter(columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'editingEnabled', defaultValue);\n};\n\nvar EditingState =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(EditingState, _React$PureComponent);\n\n  function EditingState(props) {\n    var _this;\n\n    _classCallCheck(this, EditingState);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditingState).call(this, props));\n    var rowChanges = props.rowChanges || props.defaultRowChanges;\n    var addedRows = props.addedRows || props.defaultAddedRows;\n\n    var getRowChanges = function getRowChanges() {\n      var stateRowChanges = _this.state.rowChanges;\n      return stateRowChanges;\n    };\n\n    var getAddedRows = function getAddedRows() {\n      var stateAddedRows = _this.state.addedRows;\n      return stateAddedRows;\n    };\n\n    _this.state = {\n      editingRowIds: props.editingRowIds || props.defaultEditingRowIds,\n      addedRows: addedRows,\n      rowChanges: rowChanges,\n      deletedRowIds: props.deletedRowIds || props.defaultDeletedRowIds\n    };\n    var stateHelper = createStateHelper(_assertThisInitialized(_assertThisInitialized(_this)), {\n      editingRowIds: function editingRowIds() {\n        var onEditingRowIdsChange = _this.props.onEditingRowIdsChange;\n        return onEditingRowIdsChange;\n      },\n      addedRows: function addedRows() {\n        var onAddedRowsChange = _this.props.onAddedRowsChange;\n        return onAddedRowsChange;\n      },\n      rowChanges: function rowChanges() {\n        var onRowChangesChange = _this.props.onRowChangesChange;\n        return onRowChangesChange;\n      },\n      deletedRowIds: function deletedRowIds() {\n        var onDeletedRowIdsChange = _this.props.onDeletedRowIdsChange;\n        return onDeletedRowIdsChange;\n      }\n    });\n    _this.startEditRows = stateHelper.applyFieldReducer.bind(stateHelper, 'editingRowIds', startEditRows);\n    _this.stopEditRows = stateHelper.applyFieldReducer.bind(stateHelper, 'editingRowIds', stopEditRows);\n    _this.changeRow = stateHelper.applyFieldReducer.bind(stateHelper, 'rowChanges', changeRow);\n    _this.cancelChangedRows = stateHelper.applyFieldReducer.bind(stateHelper, 'rowChanges', cancelChanges);\n\n    _this.commitChangedRows = function (_ref) {\n      var rowIds = _ref.rowIds;\n      var onCommitChanges = _this.props.onCommitChanges;\n      onCommitChanges({\n        changed: changedRowsByIds(getRowChanges(), rowIds)\n      });\n\n      _this.cancelChangedRows({\n        rowIds: rowIds\n      });\n    };\n\n    _this.addRow = stateHelper.applyFieldReducer.bind(stateHelper, 'addedRows', addRow);\n    _this.changeAddedRow = stateHelper.applyFieldReducer.bind(stateHelper, 'addedRows', changeAddedRow);\n    _this.cancelAddedRows = stateHelper.applyFieldReducer.bind(stateHelper, 'addedRows', cancelAddedRows);\n\n    _this.commitAddedRows = function (_ref2) {\n      var rowIds = _ref2.rowIds;\n      var onCommitChanges = _this.props.onCommitChanges;\n      onCommitChanges({\n        added: addedRowsByIds(getAddedRows(), rowIds)\n      });\n\n      _this.cancelAddedRows({\n        rowIds: rowIds\n      });\n    };\n\n    _this.deleteRows = stateHelper.applyFieldReducer.bind(stateHelper, 'deletedRowIds', deleteRows);\n    _this.cancelDeletedRows = stateHelper.applyFieldReducer.bind(stateHelper, 'deletedRowIds', cancelDeletedRows);\n\n    _this.commitDeletedRows = function (_ref3) {\n      var rowIds = _ref3.rowIds;\n      var onCommitChanges = _this.props.onCommitChanges;\n      onCommitChanges({\n        deleted: rowIds\n      });\n\n      _this.cancelDeletedRows({\n        rowIds: rowIds\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(EditingState, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          createRowChange = _this$props.createRowChange,\n          columnExtensions = _this$props.columnExtensions,\n          columnEditingEnabled = _this$props.columnEditingEnabled;\n      var _this$state = this.state,\n          editingRowIds = _this$state.editingRowIds,\n          rowChanges = _this$state.rowChanges,\n          addedRows = _this$state.addedRows,\n          deletedRowIds = _this$state.deletedRowIds;\n      return createElement(Plugin, {\n        name: \"EditingState\"\n      }, createElement(Getter, {\n        name: \"createRowChange\",\n        value: createRowChangeGetter(createRowChange, columnExtensions)\n      }), createElement(Getter, {\n        name: \"editingRowIds\",\n        value: editingRowIds\n      }), createElement(Action, {\n        name: \"startEditRows\",\n        action: this.startEditRows\n      }), createElement(Action, {\n        name: \"stopEditRows\",\n        action: this.stopEditRows\n      }), createElement(Getter, {\n        name: \"rowChanges\",\n        value: rowChanges\n      }), createElement(Action, {\n        name: \"changeRow\",\n        action: this.changeRow\n      }), createElement(Action, {\n        name: \"cancelChangedRows\",\n        action: this.cancelChangedRows\n      }), createElement(Action, {\n        name: \"commitChangedRows\",\n        action: this.commitChangedRows\n      }), createElement(Getter, {\n        name: \"addedRows\",\n        value: addedRows\n      }), createElement(Action, {\n        name: \"addRow\",\n        action: this.addRow\n      }), createElement(Action, {\n        name: \"changeAddedRow\",\n        action: this.changeAddedRow\n      }), createElement(Action, {\n        name: \"cancelAddedRows\",\n        action: this.cancelAddedRows\n      }), createElement(Action, {\n        name: \"commitAddedRows\",\n        action: this.commitAddedRows\n      }), createElement(Getter, {\n        name: \"deletedRowIds\",\n        value: deletedRowIds\n      }), createElement(Action, {\n        name: \"deleteRows\",\n        action: this.deleteRows\n      }), createElement(Action, {\n        name: \"cancelDeletedRows\",\n        action: this.cancelDeletedRows\n      }), createElement(Action, {\n        name: \"commitDeletedRows\",\n        action: this.commitDeletedRows\n      }), createElement(Getter, {\n        name: \"isColumnEditingEnabled\",\n        value: columnExtensionValueGetter$1(columnExtensions, columnEditingEnabled)\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$editingRow = nextProps.editingRowIds,\n          editingRowIds = _nextProps$editingRow === void 0 ? prevState.editingRowIds : _nextProps$editingRow,\n          _nextProps$rowChanges = nextProps.rowChanges,\n          rowChanges = _nextProps$rowChanges === void 0 ? prevState.rowChanges : _nextProps$rowChanges,\n          _nextProps$addedRows = nextProps.addedRows,\n          addedRows = _nextProps$addedRows === void 0 ? prevState.addedRows : _nextProps$addedRows,\n          _nextProps$deletedRow = nextProps.deletedRowIds,\n          deletedRowIds = _nextProps$deletedRow === void 0 ? prevState.deletedRowIds : _nextProps$deletedRow;\n      return {\n        editingRowIds: editingRowIds,\n        rowChanges: rowChanges,\n        addedRows: addedRows,\n        deletedRowIds: deletedRowIds\n      };\n    }\n  }]);\n\n  return EditingState;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? EditingState.propTypes = {\n  createRowChange: func,\n  columnEditingEnabled: bool,\n  columnExtensions: array,\n  editingRowIds: array,\n  defaultEditingRowIds: array,\n  onEditingRowIdsChange: func,\n  addedRows: array,\n  defaultAddedRows: array,\n  onAddedRowsChange: func,\n  rowChanges: object,\n  defaultRowChanges: object,\n  onRowChangesChange: func,\n  deletedRowIds: array,\n  defaultDeletedRowIds: array,\n  onDeletedRowIdsChange: func,\n  onCommitChanges: func.isRequired\n} : void 0;\nEditingState.defaultProps = {\n  createRowChange: undefined,\n  columnEditingEnabled: true,\n  columnExtensions: undefined,\n  editingRowIds: undefined,\n  defaultEditingRowIds: [],\n  onEditingRowIdsChange: undefined,\n  rowChanges: undefined,\n  defaultRowChanges: {},\n  onRowChangesChange: undefined,\n  addedRows: undefined,\n  defaultAddedRows: [],\n  onAddedRowsChange: undefined,\n  deletedRowIds: undefined,\n  defaultDeletedRowIds: [],\n  onDeletedRowIdsChange: undefined\n};\n\nvar PagingState =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(PagingState, _React$PureComponent);\n\n  function PagingState(props) {\n    var _this;\n\n    _classCallCheck(this, PagingState);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PagingState).call(this, props));\n    _this.state = {\n      currentPage: props.currentPage || props.defaultCurrentPage,\n      pageSize: props.pageSize !== undefined ? props.pageSize : props.defaultPageSize\n    };\n    var stateHelper = createStateHelper(_assertThisInitialized(_assertThisInitialized(_this)), {\n      currentPage: function currentPage$$1() {\n        var onCurrentPageChange = _this.props.onCurrentPageChange;\n        return onCurrentPageChange;\n      },\n      pageSize: function pageSize() {\n        var onPageSizeChange = _this.props.onPageSizeChange;\n        return onPageSizeChange;\n      }\n    });\n    _this.setCurrentPage = stateHelper.applyFieldReducer.bind(stateHelper, 'currentPage', setCurrentPage);\n    _this.setPageSize = stateHelper.applyFieldReducer.bind(stateHelper, 'pageSize', setPageSize);\n    return _this;\n  }\n\n  _createClass(PagingState, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          pageSize = _this$state.pageSize,\n          currentPage$$1 = _this$state.currentPage;\n      return createElement(Plugin, {\n        name: \"PagingState\"\n      }, createElement(Getter, {\n        name: \"currentPage\",\n        value: currentPage$$1\n      }), createElement(Getter, {\n        name: \"pageSize\",\n        value: pageSize\n      }), createElement(Action, {\n        name: \"setCurrentPage\",\n        action: this.setCurrentPage\n      }), createElement(Action, {\n        name: \"setPageSize\",\n        action: this.setPageSize\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$currentPag = nextProps.currentPage,\n          currentPage$$1 = _nextProps$currentPag === void 0 ? prevState.currentPage : _nextProps$currentPag,\n          _nextProps$pageSize = nextProps.pageSize,\n          pageSize = _nextProps$pageSize === void 0 ? prevState.pageSize : _nextProps$pageSize;\n      return {\n        currentPage: currentPage$$1,\n        pageSize: pageSize\n      };\n    }\n  }]);\n\n  return PagingState;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? PagingState.propTypes = {\n  pageSize: number,\n  defaultPageSize: number,\n  onPageSizeChange: func,\n  currentPage: number,\n  defaultCurrentPage: number,\n  onCurrentPageChange: func\n} : void 0;\nPagingState.defaultProps = {\n  pageSize: undefined,\n  defaultPageSize: 10,\n  onPageSizeChange: undefined,\n  currentPage: undefined,\n  defaultCurrentPage: 0,\n  onCurrentPageChange: undefined\n};\nvar pluginDependencies$2 = [{\n  name: 'PagingState'\n}];\n\nvar rowsWithHeadersComputed = function rowsWithHeadersComputed(_ref) {\n  var rows = _ref.rows,\n      pageSize = _ref.pageSize,\n      getRowLevelKey = _ref.getRowLevelKey;\n  return rowsWithPageHeaders(rows, pageSize, getRowLevelKey);\n};\n\nvar totalCountComputed = function totalCountComputed(_ref2) {\n  var rows = _ref2.rows;\n  return rowCount(rows);\n};\n\nvar paginatedRowsComputed = function paginatedRowsComputed(_ref3) {\n  var rows = _ref3.rows,\n      pageSize = _ref3.pageSize,\n      page = _ref3.currentPage;\n  return paginatedRows(rows, pageSize, page);\n};\n\nvar currentPageComputed = function currentPageComputed(_ref4, _ref5) {\n  var page = _ref4.currentPage,\n      totalCount = _ref4.totalCount,\n      pageSize = _ref4.pageSize;\n  var setCurrentPage$$1 = _ref5.setCurrentPage;\n  return currentPage(page, totalCount, pageSize, setCurrentPage$$1);\n}; // eslint-disable-next-line react/prefer-stateless-function\n\n\nvar IntegratedPaging =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(IntegratedPaging, _React$PureComponent);\n\n  function IntegratedPaging() {\n    _classCallCheck(this, IntegratedPaging);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IntegratedPaging).apply(this, arguments));\n  }\n\n  _createClass(IntegratedPaging, [{\n    key: \"render\",\n    value: function render() {\n      return createElement(Plugin, {\n        name: \"IntegratedPaging\",\n        dependencies: pluginDependencies$2\n      }, createElement(Getter, {\n        name: \"rows\",\n        computed: rowsWithHeadersComputed\n      }), createElement(Getter, {\n        name: \"totalCount\",\n        computed: totalCountComputed\n      }), createElement(Getter, {\n        name: \"currentPage\",\n        computed: currentPageComputed\n      }), createElement(Getter, {\n        name: \"rows\",\n        computed: paginatedRowsComputed\n      }));\n    }\n  }]);\n\n  return IntegratedPaging;\n}(PureComponent);\n\nvar pluginDependencies$3 = [{\n  name: 'PagingState'\n}];\n\nvar CustomPaging =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(CustomPaging, _React$PureComponent);\n\n  function CustomPaging() {\n    _classCallCheck(this, CustomPaging);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CustomPaging).apply(this, arguments));\n  }\n\n  _createClass(CustomPaging, [{\n    key: \"render\",\n    value: function render() {\n      var totalCount = this.props.totalCount;\n      return createElement(Plugin, {\n        name: \"CustomPaging\",\n        dependencies: pluginDependencies$3\n      }, createElement(Getter, {\n        name: \"totalCount\",\n        value: totalCount\n      }));\n    }\n  }]);\n\n  return CustomPaging;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? CustomPaging.propTypes = {\n  totalCount: number\n} : void 0;\nCustomPaging.defaultProps = {\n  totalCount: 0\n};\nvar dependencies = [{\n  name: 'SortingState',\n  optional: true\n}];\n\nvar columnExtensionValueGetter$2 = function columnExtensionValueGetter(columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'groupingEnabled', defaultValue);\n};\n\nvar GroupingState =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(GroupingState, _React$PureComponent);\n\n  function GroupingState(props) {\n    var _this;\n\n    _classCallCheck(this, GroupingState);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GroupingState).call(this, props));\n    _this.state = {\n      grouping: props.grouping || props.defaultGrouping,\n      draftGrouping: null,\n      expandedGroups: props.expandedGroups || props.defaultExpandedGroups\n    };\n    _this.stateHelper = createStateHelper(_assertThisInitialized(_assertThisInitialized(_this)), {\n      grouping: function grouping() {\n        var onGroupingChange = _this.props.onGroupingChange;\n        return onGroupingChange;\n      },\n      expandedGroups: function expandedGroups() {\n        var onExpandedGroupsChange = _this.props.onExpandedGroupsChange;\n        return onExpandedGroupsChange;\n      }\n    });\n    _this.changeColumnGrouping = _this.changeColumnGrouping.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleGroupExpanded = _this.stateHelper.applyReducer.bind(_this.stateHelper, toggleExpandedGroups);\n    _this.draftColumnGrouping = _this.stateHelper.applyReducer.bind(_this.stateHelper, draftColumnGrouping);\n    _this.cancelColumnGroupingDraft = _this.stateHelper.applyReducer.bind(_this.stateHelper, cancelColumnGroupingDraft);\n    _this.changeColumnSorting = _this.changeColumnSorting.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(GroupingState, [{\n    key: \"changeColumnSorting\",\n    value: function changeColumnSorting$$1(_ref, _ref2, _ref3) {\n      var columnName = _ref.columnName,\n          keepOther = _ref.keepOther,\n          restParams = _objectWithoutProperties(_ref, [\"columnName\", \"keepOther\"]);\n\n      var sorting = _ref2.sorting;\n      var _changeColumnSorting = _ref3.changeColumnSorting;\n      var grouping = this.state.grouping;\n      var groupingIndex = grouping.findIndex(function (columnGrouping) {\n        return columnGrouping.columnName === columnName;\n      });\n\n      if (groupingIndex === -1) {\n        _changeColumnSorting(_objectSpread({\n          columnName: columnName,\n          keepOther: keepOther || grouping.map(function (columnGrouping) {\n            return columnGrouping.columnName;\n          })\n        }, restParams));\n\n        return false;\n      }\n\n      var sortIndex = adjustSortIndex(groupingIndex, grouping, sorting);\n\n      _changeColumnSorting(_objectSpread({\n        columnName: columnName,\n        keepOther: true,\n        sortIndex: sortIndex\n      }, restParams));\n\n      return false;\n    }\n  }, {\n    key: \"changeColumnGrouping\",\n    value: function changeColumnGrouping$$1(_ref4, getters, actions) {\n      var columnName = _ref4.columnName,\n          groupIndex = _ref4.groupIndex;\n      this.stateHelper.applyReducer(changeColumnGrouping, {\n        columnName: columnName,\n        groupIndex: groupIndex\n      }, function (nextState, state) {\n        var grouping = nextState.grouping;\n        var prevGrouping = state.grouping;\n        var sorting = getters.sorting;\n        var changeColumnSorting$$1 = actions.changeColumnSorting;\n        if (!sorting) return;\n        var columnSortingIndex = sorting.findIndex(function (columnSorting) {\n          return columnSorting.columnName === columnName;\n        });\n        var prevGroupingIndex = prevGrouping.findIndex(function (columnGrouping) {\n          return columnGrouping.columnName === columnName;\n        });\n        var groupingIndex = grouping.findIndex(function (columnGrouping) {\n          return columnGrouping.columnName === columnName;\n        });\n        if (columnSortingIndex === -1 || prevGroupingIndex === prevGrouping.length - 1 && groupingIndex === -1) return;\n        var sortIndex = adjustSortIndex(groupingIndex === -1 ? grouping.length : groupingIndex, grouping, sorting);\n        if (columnSortingIndex === sortIndex) return;\n        changeColumnSorting$$1(_objectSpread({\n          keepOther: true,\n          sortIndex: sortIndex\n        }, sorting[columnSortingIndex]));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          grouping = _this$state.grouping,\n          draftGrouping = _this$state.draftGrouping,\n          expandedGroups = _this$state.expandedGroups;\n      var _this$props = this.props,\n          columnExtensions = _this$props.columnExtensions,\n          columnGroupingEnabled = _this$props.columnGroupingEnabled;\n      return createElement(Plugin, {\n        name: \"GroupingState\",\n        dependencies: dependencies\n      }, createElement(Getter, {\n        name: \"grouping\",\n        value: grouping\n      }), createElement(Getter, {\n        name: \"draftGrouping\",\n        value: draftGrouping || grouping\n      }), createElement(Getter, {\n        name: \"isColumnGroupingEnabled\",\n        value: columnExtensionValueGetter$2(columnExtensions, columnGroupingEnabled)\n      }), createElement(Action, {\n        name: \"changeColumnGrouping\",\n        action: this.changeColumnGrouping\n      }), createElement(Action, {\n        name: \"draftColumnGrouping\",\n        action: this.draftColumnGrouping\n      }), createElement(Action, {\n        name: \"cancelColumnGroupingDraft\",\n        action: this.cancelColumnGroupingDraft\n      }), createElement(Getter, {\n        name: \"expandedGroups\",\n        value: expandedGroups\n      }), createElement(Action, {\n        name: \"toggleGroupExpanded\",\n        action: this.toggleGroupExpanded\n      }), createElement(Action, {\n        name: \"changeColumnSorting\",\n        action: this.changeColumnSorting\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$grouping = nextProps.grouping,\n          grouping = _nextProps$grouping === void 0 ? prevState.grouping : _nextProps$grouping,\n          _nextProps$expandedGr = nextProps.expandedGroups,\n          expandedGroups = _nextProps$expandedGr === void 0 ? prevState.expandedGroups : _nextProps$expandedGr;\n      return {\n        grouping: grouping,\n        expandedGroups: expandedGroups\n      };\n    }\n  }]);\n\n  return GroupingState;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? GroupingState.propTypes = {\n  grouping: array,\n  defaultGrouping: array,\n  onGroupingChange: func,\n  expandedGroups: array,\n  defaultExpandedGroups: array,\n  onExpandedGroupsChange: func,\n  columnExtensions: array,\n  columnGroupingEnabled: bool\n} : void 0;\nGroupingState.defaultProps = {\n  grouping: undefined,\n  defaultGrouping: [],\n  onGroupingChange: undefined,\n  expandedGroups: undefined,\n  defaultExpandedGroups: [],\n  onExpandedGroupsChange: undefined,\n  columnExtensions: undefined,\n  columnGroupingEnabled: true\n};\nvar pluginDependencies$4 = [{\n  name: 'GroupingState'\n}];\n\nvar getCollapsedRowsComputed$1 = function getCollapsedRowsComputed(_ref) {\n  var getCollapsedRows = _ref.getCollapsedRows;\n  return groupCollapsedRowsGetter(getCollapsedRows);\n};\n\nvar expandedGroupedRowsComputed = function expandedGroupedRowsComputed(_ref2) {\n  var rows = _ref2.rows,\n      grouping = _ref2.grouping,\n      expandedGroups = _ref2.expandedGroups;\n  return expandedGroupRows(rows, grouping, expandedGroups);\n};\n\nvar IntegratedGrouping =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(IntegratedGrouping, _React$PureComponent);\n\n  function IntegratedGrouping() {\n    _classCallCheck(this, IntegratedGrouping);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IntegratedGrouping).apply(this, arguments));\n  }\n\n  _createClass(IntegratedGrouping, [{\n    key: \"render\",\n    value: function render() {\n      var columnExtensions = this.props.columnExtensions;\n\n      var getColumnCriteria = function getColumnCriteria(columnName) {\n        return getColumnExtension(columnExtensions, columnName).criteria;\n      };\n\n      var groupedRowsComputed = function groupedRowsComputed(_ref3) {\n        var rows = _ref3.rows,\n            grouping = _ref3.grouping,\n            getCellValue = _ref3.getCellValue;\n        return groupedRows(rows, grouping, getCellValue, getColumnCriteria);\n      };\n\n      return createElement(Plugin, {\n        name: \"IntegratedGrouping\",\n        dependencies: pluginDependencies$4\n      }, createElement(Getter, {\n        name: \"isGroupRow\",\n        value: groupRowChecker\n      }), createElement(Getter, {\n        name: \"getRowLevelKey\",\n        value: groupRowLevelKeyGetter\n      }), createElement(Getter, {\n        name: \"getCollapsedRows\",\n        computed: getCollapsedRowsComputed$1\n      }), createElement(Getter, {\n        name: \"rows\",\n        computed: groupedRowsComputed\n      }), createElement(Getter, {\n        name: \"rows\",\n        computed: expandedGroupedRowsComputed\n      }));\n    }\n  }]);\n\n  return IntegratedGrouping;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? IntegratedGrouping.propTypes = {\n  columnExtensions: array\n} : void 0;\nIntegratedGrouping.defaultProps = {\n  columnExtensions: undefined\n};\nvar pluginDependencies$5 = [{\n  name: 'GroupingState'\n}];\n\nvar getCollapsedRowsComputed$2 = function getCollapsedRowsComputed(_ref) {\n  var getCollapsedRows = _ref.getCollapsedRows;\n  return groupCollapsedRowsGetter(getCollapsedRows);\n};\n\nvar expandedGroupedRowsComputed$1 = function expandedGroupedRowsComputed(_ref2) {\n  var rows = _ref2.rows,\n      grouping = _ref2.grouping,\n      expandedGroups = _ref2.expandedGroups;\n  return expandedGroupRows(rows, grouping, expandedGroups);\n};\n\nvar getRowIdComputed = function getRowIdComputed(_ref3) {\n  var getRowId = _ref3.getRowId,\n      rows = _ref3.rows;\n  return customGroupingRowIdGetter(getRowId, rows);\n};\n\nvar CustomGrouping =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(CustomGrouping, _React$PureComponent);\n\n  function CustomGrouping() {\n    _classCallCheck(this, CustomGrouping);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CustomGrouping).apply(this, arguments));\n  }\n\n  _createClass(CustomGrouping, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          getChildGroups = _this$props.getChildGroups,\n          appliedGrouping = _this$props.grouping,\n          appliedExpandedGroups = _this$props.expandedGroups;\n\n      var groupedRowsComputed = function groupedRowsComputed(_ref4) {\n        var rows = _ref4.rows,\n            grouping = _ref4.grouping;\n        return customGroupedRows(rows, grouping, getChildGroups);\n      };\n\n      return createElement(Plugin, {\n        name: \"CustomGrouping\",\n        dependencies: pluginDependencies$5\n      }, appliedGrouping && createElement(Getter, {\n        name: \"grouping\",\n        value: appliedGrouping\n      }), appliedExpandedGroups && createElement(Getter, {\n        name: \"expandedGroups\",\n        value: appliedExpandedGroups\n      }), createElement(Getter, {\n        name: \"isGroupRow\",\n        value: groupRowChecker\n      }), createElement(Getter, {\n        name: \"getRowLevelKey\",\n        value: groupRowLevelKeyGetter\n      }), createElement(Getter, {\n        name: \"getCollapsedRows\",\n        computed: getCollapsedRowsComputed$2\n      }), createElement(Getter, {\n        name: \"rows\",\n        computed: groupedRowsComputed\n      }), createElement(Getter, {\n        name: \"getRowId\",\n        computed: getRowIdComputed\n      }), createElement(Getter, {\n        name: \"rows\",\n        computed: expandedGroupedRowsComputed$1\n      }));\n    }\n  }]);\n\n  return CustomGrouping;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? CustomGrouping.propTypes = {\n  getChildGroups: func.isRequired,\n  grouping: array,\n  expandedGroups: array\n} : void 0;\nCustomGrouping.defaultProps = {\n  grouping: undefined,\n  expandedGroups: undefined\n};\n\nvar SelectionState =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(SelectionState, _React$PureComponent);\n\n  function SelectionState(props) {\n    var _this;\n\n    _classCallCheck(this, SelectionState);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SelectionState).call(this, props));\n    _this.state = {\n      selection: props.selection || props.defaultSelection\n    };\n    var stateHelper = createStateHelper(_assertThisInitialized(_assertThisInitialized(_this)), {\n      selection: function selection() {\n        var onSelectionChange = _this.props.onSelectionChange;\n        return onSelectionChange;\n      }\n    });\n    _this.toggleSelection = stateHelper.applyFieldReducer.bind(stateHelper, 'selection', toggleSelection);\n    return _this;\n  }\n\n  _createClass(SelectionState, [{\n    key: \"render\",\n    value: function render() {\n      var selection = this.state.selection;\n      return createElement(Plugin, {\n        name: \"SelectionState\"\n      }, createElement(Getter, {\n        name: \"selection\",\n        value: selection\n      }), createElement(Action, {\n        name: \"toggleSelection\",\n        action: this.toggleSelection\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$selection = nextProps.selection,\n          selection = _nextProps$selection === void 0 ? prevState.selection : _nextProps$selection;\n      return {\n        selection: selection\n      };\n    }\n  }]);\n\n  return SelectionState;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? SelectionState.propTypes = {\n  selection: array,\n  defaultSelection: array,\n  onSelectionChange: func\n} : void 0;\nSelectionState.defaultProps = {\n  selection: undefined,\n  defaultSelection: [],\n  onSelectionChange: undefined\n};\n\nvar rowsWithAvailableToSelectComputed = function rowsWithAvailableToSelectComputed(_ref) {\n  var rows = _ref.rows,\n      getRowId = _ref.getRowId,\n      isGroupRow = _ref.isGroupRow;\n  return rowsWithAvailableToSelect(rows, getRowId, isGroupRow);\n};\n\nvar allSelectedComputed = function allSelectedComputed(_ref2) {\n  var rows = _ref2.rows,\n      selection = _ref2.selection;\n  return allSelected(rows, selection);\n};\n\nvar someSelectedComputed = function someSelectedComputed(_ref3) {\n  var rows = _ref3.rows,\n      selection = _ref3.selection;\n  return someSelected(rows, selection);\n};\n\nvar selectAllAvailableComputed = function selectAllAvailableComputed(_ref4) {\n  var availableToSelect = _ref4.rows.availableToSelect;\n  return !!availableToSelect.length;\n};\n\nvar toggleSelectAll = function toggleSelectAll(state, _ref5, _ref6) {\n  var availableToSelect = _ref5.rows.availableToSelect;\n  var toggleSelection$$1 = _ref6.toggleSelection;\n  toggleSelection$$1({\n    rowIds: availableToSelect,\n    state: state\n  });\n};\n\nvar unwrapRowsComputed = function unwrapRowsComputed(_ref7) {\n  var rows = _ref7.rows;\n  return unwrapSelectedRows(rows);\n};\n\nvar pluginDependencies$6 = [{\n  name: 'SelectionState'\n}]; // eslint-disable-next-line react/prefer-stateless-function\n\nvar IntegratedSelection =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(IntegratedSelection, _React$PureComponent);\n\n  function IntegratedSelection() {\n    _classCallCheck(this, IntegratedSelection);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IntegratedSelection).apply(this, arguments));\n  }\n\n  _createClass(IntegratedSelection, [{\n    key: \"render\",\n    value: function render() {\n      return createElement(Plugin, {\n        name: \"IntegratedSelection\",\n        dependencies: pluginDependencies$6\n      }, createElement(Getter, {\n        name: \"rows\",\n        computed: rowsWithAvailableToSelectComputed\n      }), createElement(Getter, {\n        name: \"allSelected\",\n        computed: allSelectedComputed\n      }), createElement(Getter, {\n        name: \"someSelected\",\n        computed: someSelectedComputed\n      }), createElement(Getter, {\n        name: \"selectAllAvailable\",\n        computed: selectAllAvailableComputed\n      }), createElement(Action, {\n        name: \"toggleSelectAll\",\n        action: toggleSelectAll\n      }), createElement(Getter, {\n        name: \"rows\",\n        computed: unwrapRowsComputed\n      }));\n    }\n  }]);\n\n  return IntegratedSelection;\n}(PureComponent);\n\nvar columnExtensionValueGetter$3 = function columnExtensionValueGetter(columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'sortingEnabled', defaultValue);\n};\n\nvar SortingState =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(SortingState, _React$PureComponent);\n\n  function SortingState(props) {\n    var _this;\n\n    _classCallCheck(this, SortingState);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SortingState).call(this, props));\n    _this.state = {\n      sorting: props.sorting || props.defaultSorting\n    };\n    var stateHelper = createStateHelper(_assertThisInitialized(_assertThisInitialized(_this)), {\n      sorting: function sorting() {\n        var onSortingChange = _this.props.onSortingChange;\n        return onSortingChange;\n      }\n    });\n    _this.changeColumnSorting = stateHelper.applyReducer.bind(stateHelper, function (prevState, payload) {\n      var _this$props$sorting = _this.props.sorting,\n          sorting = _this$props$sorting === void 0 ? prevState.sorting : _this$props$sorting;\n      var persistentSortedColumns = getPersistentSortedColumns(sorting, props.columnExtensions);\n      var keepOther = calculateKeepOther(prevState.sorting, payload.keepOther, persistentSortedColumns);\n      return changeColumnSorting(prevState, _objectSpread({}, payload, {\n        keepOther: keepOther\n      }));\n    });\n    return _this;\n  }\n\n  _createClass(SortingState, [{\n    key: \"render\",\n    value: function render() {\n      var sorting = this.state.sorting;\n      var _this$props = this.props,\n          columnExtensions = _this$props.columnExtensions,\n          columnSortingEnabled = _this$props.columnSortingEnabled;\n      return createElement(Plugin, {\n        name: \"SortingState\"\n      }, createElement(Getter, {\n        name: \"sorting\",\n        value: sorting\n      }), createElement(Getter, {\n        name: \"isColumnSortingEnabled\",\n        value: columnExtensionValueGetter$3(columnExtensions, columnSortingEnabled)\n      }), createElement(Action, {\n        name: \"changeColumnSorting\",\n        action: this.changeColumnSorting\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$sorting = nextProps.sorting,\n          sorting = _nextProps$sorting === void 0 ? prevState.sorting : _nextProps$sorting;\n      return {\n        sorting: sorting\n      };\n    }\n  }]);\n\n  return SortingState;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? SortingState.propTypes = {\n  sorting: array,\n  defaultSorting: array,\n  onSortingChange: func,\n  columnExtensions: array,\n  columnSortingEnabled: bool\n} : void 0;\nSortingState.defaultProps = {\n  sorting: undefined,\n  defaultSorting: [],\n  onSortingChange: undefined,\n  columnExtensions: undefined,\n  columnSortingEnabled: true\n};\nvar pluginDependencies$7 = [{\n  name: 'SortingState'\n}];\n\nvar IntegratedSorting =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(IntegratedSorting, _React$PureComponent);\n\n  function IntegratedSorting() {\n    _classCallCheck(this, IntegratedSorting);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IntegratedSorting).apply(this, arguments));\n  }\n\n  _createClass(IntegratedSorting, [{\n    key: \"render\",\n    value: function render() {\n      var columnExtensions = this.props.columnExtensions;\n\n      var getColumnCompare = function getColumnCompare(columnName) {\n        return getColumnExtension(columnExtensions, columnName).compare;\n      };\n\n      var rowsComputed = function rowsComputed(_ref) {\n        var rows = _ref.rows,\n            sorting = _ref.sorting,\n            getCellValue = _ref.getCellValue,\n            isGroupRow = _ref.isGroupRow,\n            getRowLevelKey = _ref.getRowLevelKey;\n        return sortedRows(rows, sorting, getCellValue, getColumnCompare, isGroupRow, getRowLevelKey);\n      };\n\n      return createElement(Plugin, {\n        name: \"IntegratedSorting\",\n        dependencies: pluginDependencies$7\n      }, createElement(Getter, {\n        name: \"rows\",\n        computed: rowsComputed\n      }));\n    }\n  }]);\n\n  return IntegratedSorting;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? IntegratedSorting.propTypes = {\n  columnExtensions: array\n} : void 0;\nIntegratedSorting.defaultProps = {\n  columnExtensions: undefined\n};\n\nvar getTargetColumns = function getTargetColumns(payload, columns) {\n  return payload.filter(function (item) {\n    return item.type === 'column';\n  }).map(function (item) {\n    return columns.find(function (column) {\n      return column.name === item.columnName;\n    });\n  });\n};\n\nvar DragDropProvider$1 =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(DragDropProvider$$1, _React$PureComponent);\n\n  function DragDropProvider$$1(props) {\n    var _this;\n\n    _classCallCheck(this, DragDropProvider$$1);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DragDropProvider$$1).call(this, props));\n    _this.state = {\n      payload: null,\n      clientOffset: null\n    };\n\n    _this.change = function (_ref) {\n      var payload = _ref.payload,\n          clientOffset = _ref.clientOffset;\n      return _this.setState({\n        payload: payload,\n        clientOffset: clientOffset\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(DragDropProvider$$1, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Container = _this$props.containerComponent,\n          Column = _this$props.columnComponent;\n      var _this$state = this.state,\n          payload = _this$state.payload,\n          clientOffset = _this$state.clientOffset;\n      return createElement(Plugin, {\n        name: \"DragDropProvider\"\n      }, createElement(Getter, {\n        name: \"draggingEnabled\",\n        value: true\n      }), createElement(Template, {\n        name: \"root\"\n      }, createElement(DragDropProvider, {\n        onChange: this.change\n      }, createElement(TemplatePlaceholder, null)), payload && createElement(TemplateConnector, null, function (_ref2) {\n        var columns = _ref2.columns;\n        return createElement(Container, {\n          clientOffset: clientOffset\n        }, getTargetColumns(payload, columns).map(function (column) {\n          return createElement(Column, {\n            key: column.name,\n            column: column\n          });\n        }));\n      })));\n    }\n  }]);\n\n  return DragDropProvider$$1;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? DragDropProvider$1.propTypes = {\n  containerComponent: func.isRequired,\n  columnComponent: func.isRequired\n} : void 0;\nDragDropProvider$1.components = {\n  containerComponent: 'Container',\n  columnComponent: 'Column'\n};\nvar pluginDependencies$8 = [{\n  name: 'Table'\n}];\n\nvar tableHeaderRowsComputed = function tableHeaderRowsComputed(_ref) {\n  var tableHeaderRows = _ref.tableHeaderRows;\n  return tableHeaderRowsWithReordering(tableHeaderRows);\n};\n\nvar TableColumnReorderingRaw =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TableColumnReorderingRaw, _React$PureComponent);\n\n  function TableColumnReorderingRaw(props) {\n    var _this;\n\n    _classCallCheck(this, TableColumnReorderingRaw);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TableColumnReorderingRaw).call(this, props));\n    _this.state = {\n      order: props.defaultOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1\n    };\n    _this.onOver = _this.handleOver.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onLeave = _this.handleLeave.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDrop = _this.handleDrop.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TableColumnReorderingRaw, [{\n    key: \"getState\",\n    value: function getState() {\n      var orderState = this.state.order;\n      var _this$props$order = this.props.order,\n          order = _this$props$order === void 0 ? orderState : _this$props$order;\n      return _objectSpread({}, this.state, {\n        order: order\n      });\n    }\n  }, {\n    key: \"getDraftOrder\",\n    value: function getDraftOrder() {\n      var _this$getState = this.getState(),\n          order = _this$getState.order,\n          sourceColumnIndex = _this$getState.sourceColumnIndex,\n          targetColumnIndex = _this$getState.targetColumnIndex;\n\n      return draftOrder(order, sourceColumnIndex, targetColumnIndex);\n    }\n  }, {\n    key: \"getAvailableColumns\",\n    value: function getAvailableColumns() {\n      var _this2 = this;\n\n      return this.getDraftOrder().filter(function (columnName) {\n        return !!_this2.cellDimensionGetters[columnName];\n      });\n    }\n  }, {\n    key: \"cacheCellDimensions\",\n    value: function cacheCellDimensions() {\n      var _this3 = this;\n\n      this.cellDimensions = this.cellDimensions && this.cellDimensions.length ? this.cellDimensions : this.getAvailableColumns().map(function (columnName) {\n        return _this3.cellDimensionGetters[columnName]();\n      });\n    }\n  }, {\n    key: \"resetCellDimensions\",\n    value: function resetCellDimensions() {\n      this.cellDimensions = [];\n    }\n  }, {\n    key: \"ensureCellDimensionGetters\",\n    value: function ensureCellDimensionGetters(tableColumns) {\n      var _this4 = this;\n\n      Object.keys(this.cellDimensionGetters).forEach(function (columnName) {\n        var columnIndex = tableColumns.findIndex(function (_ref2) {\n          var type = _ref2.type,\n              column = _ref2.column;\n          return type === TABLE_DATA_TYPE && column.name === columnName;\n        });\n\n        if (columnIndex === -1) {\n          delete _this4.cellDimensionGetters[columnName];\n        }\n      });\n    }\n  }, {\n    key: \"storeCellDimensionsGetter\",\n    value: function storeCellDimensionsGetter(tableColumn, getter, tableColumns) {\n      if (tableColumn.type === TABLE_DATA_TYPE) {\n        this.cellDimensionGetters[tableColumn.column.name] = getter;\n      }\n\n      this.ensureCellDimensionGetters(tableColumns);\n    }\n  }, {\n    key: \"handleOver\",\n    value: function handleOver(_ref3) {\n      var payload = _ref3.payload,\n          x = _ref3.clientOffset.x;\n      var sourceColumnName = payload[0].columnName;\n      var availableColumns = this.getAvailableColumns();\n      var relativeSourceColumnIndex = availableColumns.indexOf(sourceColumnName);\n      if (relativeSourceColumnIndex === -1) return;\n      this.cacheCellDimensions();\n      var cellDimensions = this.cellDimensions;\n      var overlappedColumns = cellDimensions.filter(function (_ref4) {\n        var left = _ref4.left,\n            right = _ref4.right;\n        return left <= x && x <= right;\n      });\n      if (overlappedColumns.length > 1) return;\n      var relativeTargetIndex = getTableTargetColumnIndex(cellDimensions, relativeSourceColumnIndex, x);\n      if (relativeTargetIndex === -1) return;\n\n      var _this$getState2 = this.getState(),\n          prevSourceColumnIndex = _this$getState2.sourceColumnIndex,\n          prevTargetColumnIndex = _this$getState2.targetColumnIndex;\n\n      var draftOrder$$1 = this.getDraftOrder();\n      var targetColumnIndex = draftOrder$$1.indexOf(availableColumns[relativeTargetIndex]);\n      if (targetColumnIndex === prevTargetColumnIndex) return;\n      var sourceColumnIndex = prevSourceColumnIndex === -1 ? draftOrder$$1.indexOf(sourceColumnName) : prevSourceColumnIndex;\n      this.setState({\n        sourceColumnIndex: sourceColumnIndex,\n        targetColumnIndex: targetColumnIndex\n      });\n    }\n  }, {\n    key: \"handleLeave\",\n    value: function handleLeave() {\n      this.setState({\n        sourceColumnIndex: -1,\n        targetColumnIndex: -1\n      });\n      this.resetCellDimensions();\n    }\n  }, {\n    key: \"handleDrop\",\n    value: function handleDrop() {\n      var _this$getState3 = this.getState(),\n          sourceColumnIndex = _this$getState3.sourceColumnIndex,\n          targetColumnIndex = _this$getState3.targetColumnIndex,\n          order = _this$getState3.order;\n\n      var onOrderChange = this.props.onOrderChange;\n      if (sourceColumnIndex === -1 && targetColumnIndex === -1) return;\n      var nextOrder = changeColumnOrder(order, {\n        sourceColumnName: order[sourceColumnIndex],\n        targetColumnName: order[targetColumnIndex]\n      });\n      this.setState({\n        order: nextOrder,\n        sourceColumnIndex: -1,\n        targetColumnIndex: -1\n      });\n\n      if (onOrderChange) {\n        onOrderChange(nextOrder);\n      }\n\n      this.resetCellDimensions();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var _this$props = this.props,\n          Container = _this$props.tableContainerComponent,\n          Row = _this$props.rowComponent,\n          Cell = _this$props.cellComponent;\n\n      var columnsComputed = function columnsComputed(_ref5) {\n        var tableColumns = _ref5.tableColumns;\n        return orderedColumns(tableColumns, _this5.getDraftOrder());\n      };\n\n      this.cellDimensionGetters = {};\n      return createElement(Plugin, {\n        name: \"TableColumnReordering\",\n        dependencies: pluginDependencies$8\n      }, createElement(Getter, {\n        name: \"tableColumns\",\n        computed: columnsComputed\n      }), createElement(Getter, {\n        name: \"tableHeaderRows\",\n        computed: tableHeaderRowsComputed\n      }), createElement(Template, {\n        name: \"table\"\n      }, function (params) {\n        return createElement(Container, _extends({}, params, {\n          onOver: _this5.onOver,\n          onLeave: _this5.onLeave,\n          onDrop: _this5.onDrop\n        }), createElement(TemplatePlaceholder, null));\n      }), createElement(Template, {\n        name: \"tableRow\",\n        predicate: function predicate(_ref6) {\n          var tableRow = _ref6.tableRow;\n          return tableRow.type === TABLE_REORDERING_TYPE;\n        }\n      }, function (params) {\n        return createElement(Row, params);\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref7) {\n          var tableRow = _ref7.tableRow;\n          return tableRow.type === TABLE_REORDERING_TYPE;\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref8) {\n          var tableColumns = _ref8.tableColumns;\n          return createElement(Cell, _extends({}, params, {\n            getCellDimensions: function getCellDimensions(getter) {\n              return _this5.storeCellDimensionsGetter(params.tableColumn, getter, tableColumns);\n            }\n          }));\n        });\n      }));\n    }\n  }]);\n\n  return TableColumnReorderingRaw;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? TableColumnReorderingRaw.propTypes = {\n  order: arrayOf(string),\n  defaultOrder: arrayOf(string),\n  onOrderChange: func,\n  tableContainerComponent: func.isRequired,\n  rowComponent: func.isRequired,\n  cellComponent: func.isRequired\n} : void 0;\nTableColumnReorderingRaw.defaultProps = {\n  order: undefined,\n  defaultOrder: [],\n  onOrderChange: undefined\n};\nTableColumnReorderingRaw.components = {\n  tableContainerComponent: 'TableContainer',\n  rowComponent: 'Row',\n  cellComponent: 'Cell'\n};\n\nvar TableContainer = function TableContainer(_ref9) {\n  var onOver = _ref9.onOver,\n      onLeave = _ref9.onLeave,\n      onDrop = _ref9.onDrop,\n      children = _ref9.children;\n  return createElement(DropTarget, {\n    onOver: onOver,\n    onLeave: onLeave,\n    onDrop: onDrop\n  }, children);\n};\n\nvar TableColumnReordering = withComponents({\n  TableContainer: TableContainer\n})(TableColumnReorderingRaw);\n\nvar RowPlaceholder = function RowPlaceholder(props) {\n  return createElement(TemplatePlaceholder, {\n    name: \"tableRow\",\n    params: props\n  });\n};\n\nvar CellPlaceholder = function CellPlaceholder(props) {\n  return createElement(TemplatePlaceholder, {\n    name: \"tableCell\",\n    params: props\n  });\n};\n\nvar tableHeaderRows = [];\n\nvar tableBodyRowsComputed = function tableBodyRowsComputed(_ref) {\n  var rows = _ref.rows,\n      getRowId = _ref.getRowId;\n  return tableRowsWithDataRows(rows, getRowId);\n};\n\nvar tableFooterRows = [];\nvar defaultMessages = {\n  noData: 'No data'\n};\n\nvar Table =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Table, _React$PureComponent);\n\n  function Table(props) {\n    var _this;\n\n    _classCallCheck(this, Table);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Table).call(this, props));\n    _this.tableColumnsComputed = memoize(function (columnExtensions) {\n      return function (_ref2) {\n        var columns = _ref2.columns;\n        return tableColumnsWithDataRows(columns, columnExtensions);\n      };\n    });\n    return _this;\n  }\n\n  _createClass(Table, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Layout = _this$props.layoutComponent,\n          Cell = _this$props.cellComponent,\n          Row = _this$props.rowComponent,\n          NoDataRow = _this$props.noDataRowComponent,\n          NoDataCell = _this$props.noDataCellComponent,\n          StubRow = _this$props.stubRowComponent,\n          StubCell = _this$props.stubCellComponent,\n          StubHeaderCell = _this$props.stubHeaderCellComponent,\n          columnExtensions = _this$props.columnExtensions,\n          messages = _this$props.messages,\n          containerComponent = _this$props.containerComponent,\n          tableComponent = _this$props.tableComponent,\n          headComponent = _this$props.headComponent,\n          bodyComponent = _this$props.bodyComponent,\n          footerComponent = _this$props.footerComponent;\n      var getMessage = getMessagesFormatter(_objectSpread({}, defaultMessages, messages));\n      var tableColumnsComputed = this.tableColumnsComputed(columnExtensions);\n      return createElement(Plugin, {\n        name: \"Table\"\n      }, createElement(Getter, {\n        name: \"tableHeaderRows\",\n        value: tableHeaderRows\n      }), createElement(Getter, {\n        name: \"tableBodyRows\",\n        computed: tableBodyRowsComputed\n      }), createElement(Getter, {\n        name: \"tableFooterRows\",\n        value: tableFooterRows\n      }), createElement(Getter, {\n        name: \"tableColumns\",\n        computed: tableColumnsComputed\n      }), createElement(Getter, {\n        name: \"getTableCellColSpan\",\n        value: tableCellColSpanGetter\n      }), createElement(Template, {\n        name: \"body\"\n      }, createElement(TemplatePlaceholder, {\n        name: \"table\"\n      })), createElement(Template, {\n        name: \"table\"\n      }, createElement(TemplateConnector, null, function (_ref3) {\n        var headerRows = _ref3.tableHeaderRows,\n            bodyRows = _ref3.tableBodyRows,\n            footerRows = _ref3.tableFooterRows,\n            columns = _ref3.tableColumns,\n            getTableCellColSpan = _ref3.getTableCellColSpan;\n        return createElement(Layout, {\n          tableComponent: tableComponent,\n          headComponent: headComponent,\n          bodyComponent: bodyComponent,\n          footerComponent: footerComponent,\n          containerComponent: containerComponent,\n          headerRows: headerRows,\n          bodyRows: bodyRows,\n          footerRows: footerRows,\n          columns: columns,\n          rowComponent: RowPlaceholder,\n          cellComponent: CellPlaceholder,\n          getCellColSpan: getTableCellColSpan\n        });\n      })), createElement(Template, {\n        name: \"tableCell\"\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref4) {\n          var headerRows = _ref4.tableHeaderRows;\n          return isHeaderStubTableCell(params.tableRow, headerRows) ? createElement(StubHeaderCell, params) : createElement(StubCell, params);\n        });\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref5) {\n          var tableRow = _ref5.tableRow,\n              tableColumn = _ref5.tableColumn;\n          return isDataTableCell(tableRow, tableColumn);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref6) {\n          var getCellValue = _ref6.getCellValue;\n          var columnName = params.tableColumn.column.name;\n          var value = getCellValue(params.tableRow.row, columnName);\n          return createElement(TemplatePlaceholder, {\n            name: \"valueFormatter\",\n            params: {\n              row: params.tableRow.row,\n              column: params.tableColumn.column,\n              value: value\n            }\n          }, function (content) {\n            return createElement(Cell, _extends({}, params, {\n              row: params.tableRow.row,\n              column: params.tableColumn.column,\n              value: value\n            }), content);\n          });\n        });\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref7) {\n          var tableRow = _ref7.tableRow;\n          return isNoDataTableRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref8) {\n          var tableColumns = _ref8.tableColumns;\n\n          if (isNoDataTableCell(params.tableColumn, tableColumns)) {\n            return createElement(NoDataCell, _extends({}, params, {\n              getMessage: getMessage\n            }));\n          }\n\n          return null;\n        });\n      }), createElement(Template, {\n        name: \"tableRow\"\n      }, function (params) {\n        return createElement(StubRow, params);\n      }), createElement(Template, {\n        name: \"tableRow\",\n        predicate: function predicate(_ref9) {\n          var tableRow = _ref9.tableRow;\n          return isDataTableRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(Row, _extends({}, params, {\n          row: params.tableRow.row\n        }));\n      }), createElement(Template, {\n        name: \"tableRow\",\n        predicate: function predicate(_ref10) {\n          var tableRow = _ref10.tableRow;\n          return isNoDataTableRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(NoDataRow, params);\n      }));\n    }\n  }]);\n\n  return Table;\n}(PureComponent);\n\nTable.COLUMN_TYPE = TABLE_DATA_TYPE;\nTable.ROW_TYPE = TABLE_DATA_TYPE;\nTable.NODATA_ROW_TYPE = TABLE_NODATA_TYPE;\nprocess.env.NODE_ENV !== \"production\" ? Table.propTypes = {\n  layoutComponent: func.isRequired,\n  tableComponent: func.isRequired,\n  headComponent: func.isRequired,\n  bodyComponent: func.isRequired,\n  footerComponent: func.isRequired,\n  containerComponent: func.isRequired,\n  cellComponent: func.isRequired,\n  rowComponent: func.isRequired,\n  noDataCellComponent: func.isRequired,\n  noDataRowComponent: func.isRequired,\n  stubRowComponent: func.isRequired,\n  stubCellComponent: func.isRequired,\n  stubHeaderCellComponent: func.isRequired,\n  columnExtensions: array,\n  messages: shape({\n    noData: string\n  })\n} : void 0;\nTable.defaultProps = {\n  columnExtensions: undefined,\n  messages: {}\n};\nTable.components = {\n  tableComponent: 'Table',\n  headComponent: 'TableHead',\n  bodyComponent: 'TableBody',\n  footerComponent: 'TableFooter',\n  containerComponent: 'Container',\n  layoutComponent: 'Layout',\n  rowComponent: 'Row',\n  cellComponent: 'Cell',\n  noDataRowComponent: 'NoDataRow',\n  noDataCellComponent: 'NoDataCell',\n  stubRowComponent: 'StubRow',\n  stubCellComponent: 'StubCell',\n  stubHeaderCellComponent: 'StubHeaderCell'\n};\n\nvar TableSelection =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TableSelection, _React$PureComponent);\n\n  function TableSelection() {\n    _classCallCheck(this, TableSelection);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TableSelection).apply(this, arguments));\n  }\n\n  _createClass(TableSelection, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          highlightRow = _this$props.highlightRow,\n          selectByRowClick = _this$props.selectByRowClick,\n          showSelectionColumn = _this$props.showSelectionColumn,\n          showSelectAll = _this$props.showSelectAll,\n          HeaderCell = _this$props.headerCellComponent,\n          Cell = _this$props.cellComponent,\n          Row = _this$props.rowComponent,\n          selectionColumnWidth = _this$props.selectionColumnWidth;\n\n      var tableColumnsComputed = function tableColumnsComputed(_ref) {\n        var tableColumns = _ref.tableColumns;\n        return tableColumnsWithSelection(tableColumns, selectionColumnWidth);\n      };\n\n      return createElement(Plugin, {\n        name: \"TableSelection\",\n        dependencies: [{\n          name: 'Table'\n        }, {\n          name: 'SelectionState'\n        }, {\n          name: 'IntegratedSelection',\n          optional: !showSelectAll\n        }]\n      }, showSelectionColumn && createElement(Getter, {\n        name: \"tableColumns\",\n        computed: tableColumnsComputed\n      }), showSelectionColumn && showSelectAll && createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref2) {\n          var tableRow = _ref2.tableRow,\n              tableColumn = _ref2.tableColumn;\n          return isSelectAllTableCell(tableRow, tableColumn);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref3, _ref4) {\n          var selectAllAvailable = _ref3.selectAllAvailable,\n              allSelected$$1 = _ref3.allSelected,\n              someSelected$$1 = _ref3.someSelected;\n          var toggleSelectAll = _ref4.toggleSelectAll;\n          return createElement(HeaderCell, _extends({}, params, {\n            disabled: !selectAllAvailable,\n            allSelected: allSelected$$1,\n            someSelected: someSelected$$1,\n            onToggle: function onToggle(select) {\n              return toggleSelectAll(select);\n            }\n          }));\n        });\n      }), showSelectionColumn && createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref5) {\n          var tableRow = _ref5.tableRow,\n              tableColumn = _ref5.tableColumn;\n          return isSelectTableCell(tableRow, tableColumn);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref6, _ref7) {\n          var selection = _ref6.selection;\n          var toggleSelection$$1 = _ref7.toggleSelection;\n          return createElement(Cell, _extends({}, params, {\n            row: params.tableRow.row,\n            selected: selection.indexOf(params.tableRow.rowId) !== -1,\n            onToggle: function onToggle() {\n              return toggleSelection$$1({\n                rowIds: [params.tableRow.rowId]\n              });\n            }\n          }));\n        });\n      }), (highlightRow || selectByRowClick) && createElement(Template, {\n        name: \"tableRow\",\n        predicate: function predicate(_ref8) {\n          var tableRow = _ref8.tableRow;\n          return isDataTableRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref9, _ref10) {\n          var selection = _ref9.selection;\n          var toggleSelection$$1 = _ref10.toggleSelection;\n          return createElement(Row, _extends({}, params, {\n            selectByRowClick: selectByRowClick,\n            selected: highlightRow && selection.indexOf(params.tableRow.rowId) !== -1,\n            onToggle: function onToggle() {\n              return toggleSelection$$1({\n                rowIds: [params.tableRow.rowId]\n              });\n            }\n          }));\n        });\n      }));\n    }\n  }]);\n\n  return TableSelection;\n}(PureComponent);\n\nTableSelection.COLUMN_TYPE = TABLE_SELECT_TYPE;\nprocess.env.NODE_ENV !== \"production\" ? TableSelection.propTypes = {\n  headerCellComponent: func.isRequired,\n  cellComponent: func.isRequired,\n  rowComponent: func.isRequired,\n  highlightRow: bool,\n  selectByRowClick: bool,\n  showSelectAll: bool,\n  showSelectionColumn: bool,\n  selectionColumnWidth: number.isRequired\n} : void 0;\nTableSelection.defaultProps = {\n  highlightRow: false,\n  selectByRowClick: false,\n  showSelectAll: false,\n  showSelectionColumn: true\n};\nTableSelection.components = {\n  rowComponent: 'Row',\n  cellComponent: 'Cell',\n  headerCellComponent: 'HeaderCell'\n};\n\nvar RowDetailState =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(RowDetailState, _React$PureComponent);\n\n  function RowDetailState(props) {\n    var _this;\n\n    _classCallCheck(this, RowDetailState);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RowDetailState).call(this, props));\n    _this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds\n    };\n    var stateHelper = createStateHelper(_assertThisInitialized(_assertThisInitialized(_this)), {\n      expandedRowIds: function expandedRowIds() {\n        var onExpandedRowIdsChange = _this.props.onExpandedRowIdsChange;\n        return onExpandedRowIdsChange;\n      }\n    });\n    _this.toggleDetailRowExpanded = stateHelper.applyFieldReducer.bind(stateHelper, 'expandedRowIds', toggleDetailRowExpanded);\n    return _this;\n  }\n\n  _createClass(RowDetailState, [{\n    key: \"render\",\n    value: function render() {\n      var expandedRowIds = this.state.expandedRowIds;\n      return createElement(Plugin, {\n        name: \"RowDetailState\"\n      }, createElement(Getter, {\n        name: \"expandedDetailRowIds\",\n        value: expandedRowIds\n      }), createElement(Action, {\n        name: \"toggleDetailRowExpanded\",\n        action: this.toggleDetailRowExpanded\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$expandedRo = nextProps.expandedRowIds,\n          expandedRowIds = _nextProps$expandedRo === void 0 ? prevState.expandedRowIds : _nextProps$expandedRo;\n      return {\n        expandedRowIds: expandedRowIds\n      };\n    }\n  }]);\n\n  return RowDetailState;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? RowDetailState.propTypes = {\n  expandedRowIds: array,\n  defaultExpandedRowIds: array,\n  onExpandedRowIdsChange: func\n} : void 0;\nRowDetailState.defaultProps = {\n  expandedRowIds: undefined,\n  defaultExpandedRowIds: [],\n  onExpandedRowIdsChange: undefined\n};\n\nvar getCellColSpanComputed = function getCellColSpanComputed(_ref) {\n  var getTableCellColSpan = _ref.getTableCellColSpan;\n  return tableDetailCellColSpanGetter(getTableCellColSpan);\n};\n\nvar pluginDependencies$9 = [{\n  name: 'RowDetailState'\n}, {\n  name: 'Table'\n}];\n\nvar TableRowDetail =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TableRowDetail, _React$PureComponent);\n\n  function TableRowDetail() {\n    _classCallCheck(this, TableRowDetail);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TableRowDetail).apply(this, arguments));\n  }\n\n  _createClass(TableRowDetail, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          rowHeight = _this$props.rowHeight,\n          Content = _this$props.contentComponent,\n          ToggleCell = _this$props.toggleCellComponent,\n          Cell = _this$props.cellComponent,\n          Row = _this$props.rowComponent,\n          toggleColumnWidth = _this$props.toggleColumnWidth;\n\n      var tableColumnsComputed = function tableColumnsComputed(_ref2) {\n        var tableColumns = _ref2.tableColumns;\n        return tableColumnsWithDetail(tableColumns, toggleColumnWidth);\n      };\n\n      var tableBodyRowsComputed = function tableBodyRowsComputed(_ref3) {\n        var tableBodyRows = _ref3.tableBodyRows,\n            expandedDetailRowIds = _ref3.expandedDetailRowIds;\n        return tableRowsWithExpandedDetail(tableBodyRows, expandedDetailRowIds, rowHeight);\n      };\n\n      return createElement(Plugin, {\n        name: \"TableRowDetail\",\n        dependencies: pluginDependencies$9\n      }, createElement(Getter, {\n        name: \"tableColumns\",\n        computed: tableColumnsComputed\n      }), createElement(Getter, {\n        name: \"tableBodyRows\",\n        computed: tableBodyRowsComputed\n      }), createElement(Getter, {\n        name: \"getTableCellColSpan\",\n        computed: getCellColSpanComputed\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref4) {\n          var tableRow = _ref4.tableRow,\n              tableColumn = _ref4.tableColumn;\n          return isDetailToggleTableCell(tableRow, tableColumn);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref5, _ref6) {\n          var expandedDetailRowIds = _ref5.expandedDetailRowIds;\n          var toggleDetailRowExpanded$$1 = _ref6.toggleDetailRowExpanded;\n          return createElement(ToggleCell, _extends({}, params, {\n            row: params.tableRow.row,\n            expanded: isDetailRowExpanded(expandedDetailRowIds, params.tableRow.rowId),\n            onToggle: function onToggle() {\n              return toggleDetailRowExpanded$$1({\n                rowId: params.tableRow.rowId\n              });\n            }\n          }));\n        });\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref7) {\n          var tableRow = _ref7.tableRow;\n          return isDetailTableRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref8) {\n          var tableColumns = _ref8.tableColumns;\n\n          if (isDetailTableCell(params.tableColumn, tableColumns)) {\n            return createElement(Cell, _extends({}, params, {\n              row: params.tableRow.row\n            }), createElement(Content, {\n              row: params.tableRow.row\n            }));\n          }\n\n          return null;\n        });\n      }), createElement(Template, {\n        name: \"tableRow\",\n        predicate: function predicate(_ref9) {\n          var tableRow = _ref9.tableRow;\n          return isDetailTableRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(Row, _extends({}, params, {\n          row: params.tableRow.row\n        }));\n      }));\n    }\n  }]);\n\n  return TableRowDetail;\n}(PureComponent);\n\nTableRowDetail.ROW_TYPE = TABLE_DETAIL_TYPE;\nTableRowDetail.COLUMN_TYPE = TABLE_DETAIL_TYPE;\nprocess.env.NODE_ENV !== \"production\" ? TableRowDetail.propTypes = {\n  contentComponent: func,\n  toggleCellComponent: func.isRequired,\n  cellComponent: func.isRequired,\n  rowComponent: func.isRequired,\n  toggleColumnWidth: number.isRequired,\n  rowHeight: number\n} : void 0;\nTableRowDetail.defaultProps = {\n  contentComponent: function contentComponent() {\n    return null;\n  },\n  rowHeight: undefined\n};\nTableRowDetail.components = {\n  rowComponent: 'Row',\n  cellComponent: 'Cell',\n  toggleCellComponent: 'ToggleCell'\n};\nvar pluginDependencies$a = [{\n  name: 'GroupingState'\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}];\n\nvar tableBodyRowsComputed$1 = function tableBodyRowsComputed(_ref) {\n  var tableBodyRows = _ref.tableBodyRows,\n      isGroupRow = _ref.isGroupRow;\n  return tableRowsWithGrouping(tableBodyRows, isGroupRow);\n};\n\nvar getCellColSpanComputed$1 = function getCellColSpanComputed(_ref2) {\n  var getTableCellColSpan = _ref2.getTableCellColSpan;\n  return tableGroupCellColSpanGetter(getTableCellColSpan);\n};\n\nvar showColumnWhenGroupedGetter = function showColumnWhenGroupedGetter(showColumnsWhenGrouped) {\n  var columnExtensions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var map = columnExtensions.reduce(function (acc, columnExtension) {\n    acc[columnExtension.columnName] = columnExtension.showWhenGrouped;\n    return acc;\n  }, {});\n  return function (columnName) {\n    return map[columnName] || showColumnsWhenGrouped;\n  };\n};\n\nvar TableGroupRow =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TableGroupRow, _React$PureComponent);\n\n  function TableGroupRow() {\n    _classCallCheck(this, TableGroupRow);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TableGroupRow).apply(this, arguments));\n  }\n\n  _createClass(TableGroupRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          GroupCell = _this$props.cellComponent,\n          Content = _this$props.contentComponent,\n          Icon = _this$props.iconComponent,\n          GroupRow = _this$props.rowComponent,\n          GroupIndentCell = _this$props.indentCellComponent,\n          indentColumnWidth = _this$props.indentColumnWidth,\n          showColumnsWhenGrouped = _this$props.showColumnsWhenGrouped,\n          columnExtensions = _this$props.columnExtensions;\n\n      var tableColumnsComputed = function tableColumnsComputed(_ref3) {\n        var columns = _ref3.columns,\n            tableColumns = _ref3.tableColumns,\n            grouping = _ref3.grouping,\n            draftGrouping = _ref3.draftGrouping;\n        return tableColumnsWithGrouping(columns, tableColumns, grouping, draftGrouping, indentColumnWidth, showColumnWhenGroupedGetter(showColumnsWhenGrouped, columnExtensions));\n      };\n\n      return createElement(Plugin, {\n        name: \"TableGroupRow\",\n        dependencies: pluginDependencies$a\n      }, createElement(Getter, {\n        name: \"tableColumns\",\n        computed: tableColumnsComputed\n      }), createElement(Getter, {\n        name: \"tableBodyRows\",\n        computed: tableBodyRowsComputed$1\n      }), createElement(Getter, {\n        name: \"getTableCellColSpan\",\n        computed: getCellColSpanComputed$1\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref4) {\n          var tableRow = _ref4.tableRow;\n          return isGroupTableRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref5, _ref6) {\n          var grouping = _ref5.grouping,\n              expandedGroups = _ref5.expandedGroups;\n          var toggleGroupExpanded = _ref6.toggleGroupExpanded;\n\n          if (isGroupTableCell(params.tableRow, params.tableColumn)) {\n            return createElement(TemplatePlaceholder, {\n              name: \"valueFormatter\",\n              params: {\n                column: params.tableColumn.column,\n                value: params.tableRow.row.value\n              }\n            }, function (content) {\n              return createElement(GroupCell, _extends({}, params, {\n                contentComponent: Content,\n                iconComponent: Icon,\n                row: params.tableRow.row,\n                column: params.tableColumn.column,\n                expanded: expandedGroups.indexOf(params.tableRow.row.compoundKey) !== -1,\n                onToggle: function onToggle() {\n                  return toggleGroupExpanded({\n                    groupKey: params.tableRow.row.compoundKey\n                  });\n                }\n              }), content);\n            });\n          }\n\n          if (isGroupIndentTableCell(params.tableRow, params.tableColumn, grouping)) {\n            if (GroupIndentCell) {\n              return createElement(GroupIndentCell, _extends({}, params, {\n                row: params.tableRow.row,\n                column: params.tableColumn.column\n              }));\n            }\n\n            return createElement(TemplatePlaceholder, null);\n          }\n\n          return null;\n        });\n      }), createElement(Template, {\n        name: \"tableRow\",\n        predicate: function predicate(_ref7) {\n          var tableRow = _ref7.tableRow;\n          return isGroupTableRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(GroupRow, _extends({}, params, {\n          row: params.tableRow.row\n        }));\n      }));\n    }\n  }]);\n\n  return TableGroupRow;\n}(PureComponent);\n\nTableGroupRow.ROW_TYPE = TABLE_GROUP_TYPE;\nTableGroupRow.COLUMN_TYPE = TABLE_GROUP_TYPE;\nprocess.env.NODE_ENV !== \"production\" ? TableGroupRow.propTypes = {\n  cellComponent: func.isRequired,\n  contentComponent: func.isRequired,\n  iconComponent: func.isRequired,\n  rowComponent: func.isRequired,\n  indentCellComponent: func,\n  indentColumnWidth: number.isRequired,\n  showColumnsWhenGrouped: bool,\n  columnExtensions: array\n} : void 0;\nTableGroupRow.defaultProps = {\n  indentCellComponent: null,\n  showColumnsWhenGrouped: false,\n  columnExtensions: undefined\n};\nTableGroupRow.components = {\n  rowComponent: 'Row',\n  cellComponent: 'Cell',\n  contentComponent: 'Content',\n  iconComponent: 'Icon'\n};\n\nvar tableHeaderRowsComputed$1 = function tableHeaderRowsComputed(_ref) {\n  var tableHeaderRows = _ref.tableHeaderRows;\n  return tableRowsWithHeading(tableHeaderRows);\n};\n\nvar TableHeaderRow =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TableHeaderRow, _React$PureComponent);\n\n  function TableHeaderRow() {\n    _classCallCheck(this, TableHeaderRow);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TableHeaderRow).apply(this, arguments));\n  }\n\n  _createClass(TableHeaderRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          showSortingControls = _this$props.showSortingControls,\n          showGroupingControls = _this$props.showGroupingControls,\n          HeaderCell = _this$props.cellComponent,\n          HeaderRow = _this$props.rowComponent,\n          Content = _this$props.contentComponent,\n          SortLabel = _this$props.sortLabelComponent,\n          GroupButton = _this$props.groupButtonComponent,\n          Title = _this$props.titleComponent,\n          messages = _this$props.messages;\n      var getMessage = getMessagesFormatter(messages);\n      return createElement(Plugin, {\n        name: \"TableHeaderRow\",\n        dependencies: [{\n          name: 'Table'\n        }, {\n          name: 'SortingState',\n          optional: !showSortingControls\n        }, {\n          name: 'GroupingState',\n          optional: !showGroupingControls\n        }, {\n          name: 'DragDropProvider',\n          optional: true\n        }, {\n          name: 'TableColumnResizing',\n          optional: true\n        }]\n      }, createElement(Getter, {\n        name: \"tableHeaderRows\",\n        computed: tableHeaderRowsComputed$1\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref2) {\n          var tableRow = _ref2.tableRow,\n              tableColumn = _ref2.tableColumn;\n          return isHeadingTableCell(tableRow, tableColumn);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref3, _ref4) {\n          var sorting = _ref3.sorting,\n              tableColumns = _ref3.tableColumns,\n              draggingEnabled = _ref3.draggingEnabled,\n              tableColumnResizingEnabled = _ref3.tableColumnResizingEnabled,\n              isColumnSortingEnabled = _ref3.isColumnSortingEnabled,\n              isColumnGroupingEnabled = _ref3.isColumnGroupingEnabled;\n          var changeColumnSorting$$1 = _ref4.changeColumnSorting,\n              changeColumnGrouping$$1 = _ref4.changeColumnGrouping,\n              changeTableColumnWidth$$1 = _ref4.changeTableColumnWidth,\n              draftTableColumnWidth$$1 = _ref4.draftTableColumnWidth,\n              cancelTableColumnWidthDraft$$1 = _ref4.cancelTableColumnWidthDraft;\n          var _params$tableColumn$c = params.tableColumn.column,\n              columnName = _params$tableColumn$c.name,\n              columnTitle = _params$tableColumn$c.title;\n          var atLeastOneDataColumn = tableColumns.filter(function (_ref5) {\n            var type = _ref5.type;\n            return type === TABLE_DATA_TYPE;\n          }).length > 1;\n          var sortingEnabled = isColumnSortingEnabled && isColumnSortingEnabled(columnName);\n          var groupingEnabled = isColumnGroupingEnabled && isColumnGroupingEnabled(columnName) && atLeastOneDataColumn;\n          return createElement(HeaderCell, _extends({}, params, {\n            column: params.tableColumn.column,\n            getMessage: getMessage,\n            draggingEnabled: draggingEnabled && atLeastOneDataColumn,\n            resizingEnabled: tableColumnResizingEnabled,\n            onWidthChange: function onWidthChange(_ref6) {\n              var shift = _ref6.shift;\n              return changeTableColumnWidth$$1({\n                columnName: columnName,\n                shift: shift\n              });\n            },\n            onWidthDraft: function onWidthDraft(_ref7) {\n              var shift = _ref7.shift;\n              return draftTableColumnWidth$$1({\n                columnName: columnName,\n                shift: shift\n              });\n            },\n            onWidthDraftCancel: function onWidthDraftCancel() {\n              return cancelTableColumnWidthDraft$$1();\n            } // @deprecated\n            ,\n            sortingEnabled: sortingEnabled // @deprecated\n            ,\n            groupingEnabled: groupingEnabled // @deprecated\n            ,\n            showSortingControls: showSortingControls // @deprecated\n            ,\n            showGroupingControls: showGroupingControls // @deprecated\n            ,\n            sortingDirection: showSortingControls && sorting !== undefined ? getColumnSortingDirection(sorting, columnName) : undefined // @deprecated\n            ,\n            onSort: function onSort(_ref8) {\n              var direction = _ref8.direction,\n                  keepOther = _ref8.keepOther;\n              return changeColumnSorting$$1({\n                columnName: columnName,\n                direction: direction,\n                keepOther: keepOther\n              });\n            } // @deprecated\n            ,\n            onGroup: function onGroup() {\n              return changeColumnGrouping$$1({\n                columnName: columnName\n              });\n            } // @deprecated\n            ,\n            before: createElement(TemplatePlaceholder, {\n              name: \"tableHeaderCellBefore\",\n              params: {\n                column: params.tableColumn.column\n              }\n            })\n          }), createElement(TemplatePlaceholder, {\n            name: \"tableHeaderCellBefore\",\n            params: {\n              column: params.tableColumn.column\n            }\n          }), createElement(Content, {\n            column: params.tableColumn.column,\n            align: params.tableColumn.align\n          }, showSortingControls ? createElement(SortLabel, {\n            column: params.tableColumn.column,\n            align: params.tableColumn.align,\n            direction: getColumnSortingDirection(sorting, columnName),\n            disabled: !sortingEnabled,\n            onSort: function onSort(_ref9) {\n              var direction = _ref9.direction,\n                  keepOther = _ref9.keepOther;\n              changeColumnSorting$$1({\n                columnName: columnName,\n                direction: direction,\n                keepOther: keepOther\n              });\n            },\n            getMessage: getMessage\n          }, createElement(Title, null, columnTitle || columnName)) : createElement(Title, null, columnTitle || columnName)), showGroupingControls ? createElement(GroupButton, {\n            disabled: !groupingEnabled,\n            onGroup: function onGroup() {\n              return changeColumnGrouping$$1({\n                columnName: columnName\n              });\n            }\n          }) : null);\n        });\n      }), createElement(Template, {\n        name: \"tableRow\",\n        predicate: function predicate(_ref10) {\n          var tableRow = _ref10.tableRow;\n          return isHeadingTableRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(HeaderRow, params);\n      }));\n    }\n  }]);\n\n  return TableHeaderRow;\n}(PureComponent);\n\nTableHeaderRow.ROW_TYPE = TABLE_HEADING_TYPE;\nprocess.env.NODE_ENV !== \"production\" ? TableHeaderRow.propTypes = {\n  showSortingControls: bool,\n  showGroupingControls: bool,\n  cellComponent: func.isRequired,\n  contentComponent: func.isRequired,\n  rowComponent: func.isRequired,\n  titleComponent: func.isRequired,\n  sortLabelComponent: func.isRequired,\n  groupButtonComponent: func.isRequired,\n  messages: object\n} : void 0;\nTableHeaderRow.defaultProps = {\n  showSortingControls: false,\n  showGroupingControls: false,\n  messages: null\n};\nTableHeaderRow.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  contentComponent: 'Content',\n  sortLabelComponent: 'SortLabel',\n  titleComponent: 'Title',\n  groupButtonComponent: 'GroupButton'\n};\n\nvar CellPlaceholder$1 = function CellPlaceholder(props) {\n  return createElement(TemplatePlaceholder, {\n    params: props\n  });\n};\n\nvar TableBandHeader =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TableBandHeader, _React$PureComponent);\n\n  function TableBandHeader() {\n    _classCallCheck(this, TableBandHeader);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TableBandHeader).apply(this, arguments));\n  }\n\n  _createClass(TableBandHeader, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Cell = _this$props.cellComponent,\n          Row = _this$props.rowComponent,\n          HeaderCell = _this$props.bandedHeaderCellComponent,\n          InvisibleCell = _this$props.invisibleCellComponent,\n          columnBands = _this$props.columnBands;\n\n      var tableHeaderRowsComputed = function tableHeaderRowsComputed(_ref) {\n        var tableHeaderRows = _ref.tableHeaderRows,\n            tableColumns = _ref.tableColumns;\n        return tableRowsWithBands(tableHeaderRows, columnBands, tableColumns);\n      };\n\n      var tableHeaderColumnChainsComputed = function tableHeaderColumnChainsComputed(_ref2) {\n        var tableHeaderRows = _ref2.tableHeaderRows,\n            tableColumns = _ref2.tableColumns;\n        return tableHeaderColumnChainsWithBands(tableHeaderRows, tableColumns, columnBands);\n      };\n\n      return createElement(Plugin, {\n        name: \"TableBandHeader\",\n        dependencies: [{\n          name: 'Table'\n        }, {\n          name: 'TableHeaderRow'\n        }, {\n          name: 'TableSelection',\n          optional: true\n        }, {\n          name: 'TableEditColumn',\n          optional: true\n        }]\n      }, createElement(Getter, {\n        name: \"tableHeaderRows\",\n        computed: tableHeaderRowsComputed\n      }), createElement(Getter, {\n        name: \"tableHeaderColumnChains\",\n        computed: tableHeaderColumnChainsComputed\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref3) {\n          var tableRow = _ref3.tableRow;\n          return isBandedOrHeaderRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref4) {\n          var tableColumns = _ref4.tableColumns,\n              tableHeaderRows = _ref4.tableHeaderRows,\n              tableHeaderColumnChains = _ref4.tableHeaderColumnChains;\n          var bandComponent = getBandComponent(params, tableHeaderRows, tableColumns, columnBands, tableHeaderColumnChains);\n\n          switch (bandComponent.type) {\n            case BAND_DUPLICATE_RENDER:\n              return createElement(TemplatePlaceholder, null);\n\n            case BAND_EMPTY_CELL:\n              return createElement(InvisibleCell, null);\n\n            case BAND_GROUP_CELL:\n              {\n                var _bandComponent$payloa = bandComponent.payload,\n                    value = _bandComponent$payloa.value,\n                    payload = _objectWithoutProperties(_bandComponent$payloa, [\"value\"]);\n\n                return createElement(Cell, _extends({}, params, payload), value);\n              }\n\n            case BAND_HEADER_CELL:\n              return createElement(TemplatePlaceholder, {\n                name: \"tableCell\",\n                params: _objectSpread({}, params, bandComponent.payload)\n              });\n\n            default:\n              return null;\n          }\n        });\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref5) {\n          var tableRow = _ref5.tableRow,\n              tableColumn = _ref5.tableColumn;\n          return isHeadingTableCell(tableRow, tableColumn);\n        }\n      }, function (params) {\n        return createElement(HeaderCell, _extends({\n          component: CellPlaceholder$1\n        }, params));\n      }), createElement(Template, {\n        name: \"tableRow\",\n        predicate: function predicate(_ref6) {\n          var tableRow = _ref6.tableRow;\n          return isBandedTableRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(Row, params);\n      }));\n    }\n  }]);\n\n  return TableBandHeader;\n}(PureComponent);\n\nTableBandHeader.ROW_TYPE = TABLE_BAND_TYPE;\nprocess.env.NODE_ENV !== \"production\" ? TableBandHeader.propTypes = {\n  columnBands: array.isRequired,\n  cellComponent: func.isRequired,\n  rowComponent: func.isRequired,\n  bandedHeaderCellComponent: func.isRequired,\n  invisibleCellComponent: func.isRequired\n} : void 0;\nTableBandHeader.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  bandedHeaderCellComponent: 'BandedHeaderCell',\n  invisibleCellComponent: 'InvisibleCell'\n};\nvar pluginDependencies$b = [{\n  name: 'FilteringState'\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}];\nvar defaultMessages$1 = {\n  filterPlaceholder: 'Filter...',\n  contains: 'Contains',\n  notContains: 'Does not contain',\n  startsWith: 'Starts with',\n  endsWith: 'Ends with',\n  equal: 'Equals',\n  notEqual: 'Does not equal',\n  greaterThan: 'Greater than',\n  greaterThanOrEqual: 'Greater than or equal to',\n  lessThan: 'Less than',\n  lessThanOrEqual: 'Less than or equal to'\n};\n\nvar TableFilterRow =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TableFilterRow, _React$PureComponent);\n\n  function TableFilterRow(props) {\n    var _this;\n\n    _classCallCheck(this, TableFilterRow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TableFilterRow).call(this, props));\n    _this.state = {\n      filterOperations: {}\n    };\n    return _this;\n  }\n\n  _createClass(TableFilterRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          rowHeight = _this$props.rowHeight,\n          showFilterSelector = _this$props.showFilterSelector,\n          FilterCell = _this$props.cellComponent,\n          FilterRow = _this$props.rowComponent,\n          FilterSelector = _this$props.filterSelectorComponent,\n          iconComponent = _this$props.iconComponent,\n          toggleButtonComponent = _this$props.toggleButtonComponent,\n          EditorComponent = _this$props.editorComponent,\n          messages = _this$props.messages;\n      var getMessage = getMessagesFormatter(_objectSpread({}, defaultMessages$1, messages));\n\n      var tableHeaderRowsComputed = function tableHeaderRowsComputed(_ref) {\n        var tableHeaderRows = _ref.tableHeaderRows;\n        return tableHeaderRowsWithFilter(tableHeaderRows, rowHeight);\n      };\n\n      return createElement(Plugin, {\n        name: \"TableFilterRow\",\n        dependencies: pluginDependencies$b\n      }, createElement(Getter, {\n        name: \"tableHeaderRows\",\n        computed: tableHeaderRowsComputed\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref2) {\n          var tableRow = _ref2.tableRow,\n              tableColumn = _ref2.tableColumn;\n          return isFilterTableCell(tableRow, tableColumn);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref3, _ref4) {\n          var filters = _ref3.filters,\n              isColumnFilteringEnabled = _ref3.isColumnFilteringEnabled,\n              getAvailableFilterOperations = _ref3.getAvailableFilterOperations;\n          var changeColumnFilter$$1 = _ref4.changeColumnFilter;\n          var filterOperations = _this2.state.filterOperations;\n          var columnName = params.tableColumn.column.name;\n          var filter = getColumnFilterConfig(filters, columnName);\n\n          var onFilter = function onFilter(config) {\n            return changeColumnFilter$$1({\n              columnName: columnName,\n              config: config\n            });\n          };\n\n          var columnFilterOperations = getColumnFilterOperations(getAvailableFilterOperations, columnName);\n          var selectedFilterOperation = getSelectedFilterOperation(filterOperations, columnName, filter, columnFilterOperations);\n\n          var handleFilterOperationChange = function handleFilterOperationChange(value) {\n            _this2.setState({\n              filterOperations: _objectSpread({}, filterOperations, _defineProperty({}, columnName, value))\n            });\n\n            if (filter && !isFilterValueEmpty(filter.value)) {\n              onFilter({\n                value: filter.value,\n                operation: value\n              });\n            }\n          };\n\n          var handleFilterValueChange = function handleFilterValueChange(value) {\n            return onFilter(!isFilterValueEmpty(value) ? {\n              value: value,\n              operation: selectedFilterOperation\n            } : null);\n          };\n\n          var filteringEnabled = isColumnFilteringEnabled(columnName);\n          return createElement(TemplatePlaceholder, {\n            name: \"valueEditor\",\n            params: {\n              column: params.tableColumn.column,\n              value: filter ? filter.value : undefined,\n              onValueChange: handleFilterValueChange\n            }\n          }, function (content) {\n            return createElement(FilterCell, _extends({}, params, {\n              getMessage: getMessage,\n              column: params.tableColumn.column,\n              filter: filter,\n              filteringEnabled: filteringEnabled,\n              onFilter: onFilter\n            }), showFilterSelector ? createElement(FilterSelector, {\n              toggleButtonComponent: toggleButtonComponent,\n              iconComponent: iconComponent,\n              value: selectedFilterOperation,\n              availableValues: columnFilterOperations,\n              onChange: handleFilterOperationChange,\n              disabled: !filteringEnabled,\n              getMessage: getMessage\n            }) : null, content || createElement(EditorComponent, {\n              value: filter ? filter.value : undefined,\n              disabled: !filteringEnabled,\n              getMessage: getMessage,\n              onChange: handleFilterValueChange\n            }));\n          });\n        });\n      }), createElement(Template, {\n        name: \"tableRow\",\n        predicate: function predicate(_ref5) {\n          var tableRow = _ref5.tableRow;\n          return isFilterTableRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(FilterRow, params);\n      }));\n    }\n  }]);\n\n  return TableFilterRow;\n}(PureComponent);\n\nTableFilterRow.ROW_TYPE = TABLE_FILTER_TYPE;\nprocess.env.NODE_ENV !== \"production\" ? TableFilterRow.propTypes = {\n  rowHeight: any,\n  showFilterSelector: bool,\n  messages: shape({\n    filterPlaceholder: string,\n    contains: string,\n    notContains: string,\n    startsWith: string,\n    endsWith: string,\n    equal: string,\n    notEqual: string,\n    greaterThan: string,\n    greaterThanOrEqual: string,\n    lessThan: string,\n    lessThanOrEqual: string\n  }),\n  cellComponent: func.isRequired,\n  rowComponent: func.isRequired,\n  filterSelectorComponent: func.isRequired,\n  toggleButtonComponent: func.isRequired,\n  iconComponent: func.isRequired,\n  editorComponent: func.isRequired\n} : void 0;\nTableFilterRow.defaultProps = {\n  rowHeight: undefined,\n  showFilterSelector: false,\n  messages: {}\n};\nTableFilterRow.components = {\n  rowComponent: 'Row',\n  cellComponent: 'Cell',\n  filterSelectorComponent: 'FilterSelector',\n  iconComponent: 'Icon',\n  editorComponent: 'Editor',\n  toggleButtonComponent: 'ToggleButton'\n};\nvar pluginDependencies$c = [{\n  name: 'EditingState'\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}];\n\nvar TableEditRow =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TableEditRow, _React$PureComponent);\n\n  function TableEditRow() {\n    _classCallCheck(this, TableEditRow);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TableEditRow).apply(this, arguments));\n  }\n\n  _createClass(TableEditRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          EditCell = _this$props.cellComponent,\n          EditRow = _this$props.rowComponent,\n          rowHeight = _this$props.rowHeight;\n\n      var tableBodyRowsComputed = function tableBodyRowsComputed(_ref) {\n        var tableBodyRows = _ref.tableBodyRows,\n            editingRowIds = _ref.editingRowIds,\n            addedRows = _ref.addedRows;\n        return tableRowsWithEditing(tableBodyRows, editingRowIds, addedRows, rowHeight);\n      };\n\n      return createElement(Plugin, {\n        name: \"TableEditRow\",\n        dependencies: pluginDependencies$c\n      }, createElement(Getter, {\n        name: \"tableBodyRows\",\n        computed: tableBodyRowsComputed\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref2) {\n          var tableRow = _ref2.tableRow,\n              tableColumn = _ref2.tableColumn;\n          return isEditTableCell(tableRow, tableColumn);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref3, _ref4) {\n          var getCellValue = _ref3.getCellValue,\n              createRowChange = _ref3.createRowChange,\n              rowChanges = _ref3.rowChanges,\n              isColumnEditingEnabled = _ref3.isColumnEditingEnabled;\n          var changeAddedRow$$1 = _ref4.changeAddedRow,\n              changeRow$$1 = _ref4.changeRow;\n          var _params$tableRow = params.tableRow,\n              rowId = _params$tableRow.rowId,\n              row = _params$tableRow.row;\n          var column = params.tableColumn.column;\n          var columnName = column.name;\n          var isNew = isAddedTableRow(params.tableRow);\n          var changedRow = isNew ? row : _objectSpread({}, row, getRowChange(rowChanges, rowId));\n          var value = getCellValue(changedRow, columnName);\n\n          var onValueChange = function onValueChange(newValue) {\n            var changeArgs = {\n              rowId: rowId,\n              change: createRowChange(changedRow, newValue, columnName)\n            };\n\n            if (isNew) {\n              changeAddedRow$$1(changeArgs);\n            } else {\n              changeRow$$1(changeArgs);\n            }\n          };\n\n          return createElement(TemplatePlaceholder, {\n            name: \"valueEditor\",\n            params: {\n              column: column,\n              row: row,\n              value: value,\n              onValueChange: onValueChange\n            }\n          }, function (content) {\n            return createElement(EditCell, _extends({}, params, {\n              row: row,\n              column: column,\n              value: value,\n              editingEnabled: isColumnEditingEnabled(columnName),\n              onValueChange: onValueChange\n            }), content);\n          });\n        });\n      }), createElement(Template, {\n        name: \"tableRow\",\n        predicate: function predicate(_ref5) {\n          var tableRow = _ref5.tableRow;\n          return isEditTableRow(tableRow) || isAddedTableRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(EditRow, _extends({}, params, {\n          row: params.tableRow.row\n        }));\n      }));\n    }\n  }]);\n\n  return TableEditRow;\n}(PureComponent);\n\nTableEditRow.ADDED_ROW_TYPE = TABLE_ADDED_TYPE;\nTableEditRow.EDIT_ROW_TYPE = TABLE_EDIT_TYPE;\nprocess.env.NODE_ENV !== \"production\" ? TableEditRow.propTypes = {\n  rowHeight: any,\n  cellComponent: func.isRequired,\n  rowComponent: func.isRequired\n} : void 0;\nTableEditRow.defaultProps = {\n  rowHeight: undefined\n};\nTableEditRow.components = {\n  rowComponent: 'Row',\n  cellComponent: 'Cell'\n};\nvar pluginDependencies$d = [{\n  name: 'EditingState'\n}, {\n  name: 'Table'\n}];\nvar defaultMessages$2 = {\n  addCommand: 'New',\n  editCommand: 'Edit',\n  deleteCommand: 'Delete',\n  commitCommand: 'Save',\n  cancelCommand: 'Cancel'\n};\n\nvar TableEditColumn =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TableEditColumn, _React$PureComponent);\n\n  function TableEditColumn() {\n    _classCallCheck(this, TableEditColumn);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TableEditColumn).apply(this, arguments));\n  }\n\n  _createClass(TableEditColumn, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Cell = _this$props.cellComponent,\n          HeaderCell = _this$props.headerCellComponent,\n          Command = _this$props.commandComponent,\n          showAddCommand = _this$props.showAddCommand,\n          showEditCommand = _this$props.showEditCommand,\n          showDeleteCommand = _this$props.showDeleteCommand,\n          width = _this$props.width,\n          messages = _this$props.messages;\n      var getMessage = getMessagesFormatter(_objectSpread({}, defaultMessages$2, messages));\n\n      var tableColumnsComputed = function tableColumnsComputed(_ref) {\n        var tableColumns = _ref.tableColumns;\n        return tableColumnsWithEditing(tableColumns, width);\n      };\n\n      return createElement(Plugin, {\n        name: \"TableEditColumn\",\n        dependencies: pluginDependencies$d\n      }, createElement(Getter, {\n        name: \"tableColumns\",\n        computed: tableColumnsComputed\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref2) {\n          var tableRow = _ref2.tableRow,\n              tableColumn = _ref2.tableColumn;\n          return isHeadingEditCommandsTableCell(tableRow, tableColumn);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (getters, actions) {\n          return createElement(HeaderCell, params, showAddCommand && createElement(Command, {\n            id: \"add\",\n            text: getMessage('addCommand'),\n            onExecute: function onExecute() {\n              return actions.addRow();\n            }\n          }));\n        });\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref3) {\n          var tableRow = _ref3.tableRow,\n              tableColumn = _ref3.tableColumn;\n          return isEditCommandsTableCell(tableRow, tableColumn);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (getters, actions) {\n          var isEdit = isEditTableRow(params.tableRow);\n          var isNew = isAddedTableRow(params.tableRow);\n          var isEditing = isEdit || isNew;\n          var rowIds = [params.tableRow.rowId];\n          return createElement(Cell, _extends({}, params, {\n            row: params.tableRow.row\n          }), showEditCommand && !isEditing && createElement(Command, {\n            id: \"edit\",\n            text: getMessage('editCommand'),\n            onExecute: function onExecute() {\n              return actions.startEditRows({\n                rowIds: rowIds\n              });\n            }\n          }), showDeleteCommand && !isEditing && createElement(Command, {\n            id: \"delete\",\n            text: getMessage('deleteCommand'),\n            onExecute: function onExecute() {\n              actions.deleteRows({\n                rowIds: rowIds\n              });\n              actions.commitDeletedRows({\n                rowIds: rowIds\n              });\n            }\n          }), isEditing && createElement(Command, {\n            id: \"commit\",\n            text: getMessage('commitCommand'),\n            onExecute: function onExecute() {\n              if (isNew) {\n                actions.commitAddedRows({\n                  rowIds: rowIds\n                });\n              } else {\n                actions.stopEditRows({\n                  rowIds: rowIds\n                });\n                actions.commitChangedRows({\n                  rowIds: rowIds\n                });\n              }\n            }\n          }), isEditing && createElement(Command, {\n            id: \"cancel\",\n            text: getMessage('cancelCommand'),\n            onExecute: function onExecute() {\n              if (isNew) {\n                actions.cancelAddedRows({\n                  rowIds: rowIds\n                });\n              } else {\n                actions.stopEditRows({\n                  rowIds: rowIds\n                });\n                actions.cancelChangedRows({\n                  rowIds: rowIds\n                });\n              }\n            }\n          }));\n        });\n      }));\n    }\n  }]);\n\n  return TableEditColumn;\n}(PureComponent);\n\nTableEditColumn.COLUMN_TYPE = TABLE_EDIT_COMMAND_TYPE;\nprocess.env.NODE_ENV !== \"production\" ? TableEditColumn.propTypes = {\n  cellComponent: func.isRequired,\n  headerCellComponent: func.isRequired,\n  commandComponent: func.isRequired,\n  showAddCommand: bool,\n  showEditCommand: bool,\n  showDeleteCommand: bool,\n  width: number,\n  messages: shape({\n    addCommand: string,\n    editCommand: string,\n    deleteCommand: string,\n    commitCommand: string,\n    cancelCommand: string\n  })\n} : void 0;\nTableEditColumn.defaultProps = {\n  showAddCommand: false,\n  showEditCommand: false,\n  showDeleteCommand: false,\n  width: 140,\n  messages: {}\n};\nTableEditColumn.components = {\n  cellComponent: 'Cell',\n  headerCellComponent: 'HeaderCell',\n  commandComponent: 'Command'\n};\nvar pluginDependencies$e = [{\n  name: 'Table'\n}];\n\nvar TableColumnResizing =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TableColumnResizing, _React$PureComponent);\n\n  function TableColumnResizing(props) {\n    var _this;\n\n    _classCallCheck(this, TableColumnResizing);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TableColumnResizing).call(this, props));\n    _this.state = {\n      columnWidths: props.columnWidths || props.defaultColumnWidths,\n      draftColumnWidths: []\n    };\n    var stateHelper = createStateHelper(_assertThisInitialized(_assertThisInitialized(_this)), {\n      columnWidths: function columnWidths() {\n        var onColumnWidthsChange = _this.props.onColumnWidthsChange;\n        return onColumnWidthsChange;\n      }\n    });\n    _this.tableColumnsComputed = memoize(function (columnWidths) {\n      return function (_ref) {\n        var tableColumns = _ref.tableColumns;\n        return tableColumnsWithWidths(tableColumns, columnWidths);\n      };\n    });\n    _this.tableColumnsDraftComputed = memoize(function (draftColumnWidths) {\n      return function (_ref2) {\n        var tableColumns = _ref2.tableColumns;\n        return tableColumnsWithDraftWidths(tableColumns, draftColumnWidths);\n      };\n    });\n    _this.changeTableColumnWidth = stateHelper.applyReducer.bind(stateHelper, function (prevState, payload) {\n      var minColumnWidth = _this.props.minColumnWidth;\n      return changeTableColumnWidth(prevState, _objectSpread({}, payload, {\n        minColumnWidth: minColumnWidth\n      }));\n    });\n    _this.draftTableColumnWidth = stateHelper.applyReducer.bind(stateHelper, function (prevState, payload) {\n      var minColumnWidth = _this.props.minColumnWidth;\n      return draftTableColumnWidth(prevState, _objectSpread({}, payload, {\n        minColumnWidth: minColumnWidth\n      }));\n    });\n    _this.cancelTableColumnWidthDraft = stateHelper.applyReducer.bind(stateHelper, cancelTableColumnWidthDraft);\n    return _this;\n  }\n\n  _createClass(TableColumnResizing, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          columnWidths = _this$state.columnWidths,\n          draftColumnWidths = _this$state.draftColumnWidths;\n      var tableColumnsComputed = this.tableColumnsComputed(columnWidths);\n      var tableColumnsDraftComputed = this.tableColumnsDraftComputed(draftColumnWidths);\n      return createElement(Plugin, {\n        name: \"TableColumnResizing\",\n        dependencies: pluginDependencies$e\n      }, createElement(Getter, {\n        name: \"tableColumnResizingEnabled\",\n        value: true\n      }), createElement(Getter, {\n        name: \"tableColumns\",\n        computed: tableColumnsComputed\n      }), createElement(Getter, {\n        name: \"tableColumns\",\n        computed: tableColumnsDraftComputed\n      }), createElement(Action, {\n        name: \"changeTableColumnWidth\",\n        action: this.changeTableColumnWidth\n      }), createElement(Action, {\n        name: \"draftTableColumnWidth\",\n        action: this.draftTableColumnWidth\n      }), createElement(Action, {\n        name: \"cancelTableColumnWidthDraft\",\n        action: this.cancelTableColumnWidthDraft\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$columnWidt = nextProps.columnWidths,\n          columnWidths = _nextProps$columnWidt === void 0 ? prevState.columnWidths : _nextProps$columnWidt;\n      return {\n        columnWidths: columnWidths\n      };\n    }\n  }]);\n\n  return TableColumnResizing;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? TableColumnResizing.propTypes = {\n  defaultColumnWidths: array,\n  columnWidths: array,\n  onColumnWidthsChange: func,\n  minColumnWidth: number.isRequired\n} : void 0;\nTableColumnResizing.defaultProps = {\n  defaultColumnWidths: [],\n  columnWidths: undefined,\n  onColumnWidthsChange: undefined\n};\nvar pluginDependencies$f = [{\n  name: 'PagingState'\n}];\nvar defaultMessages$3 = {\n  showAll: 'All',\n  info: function info(_ref) {\n    var from = _ref.from,\n        to = _ref.to,\n        count = _ref.count;\n    return \"\".concat(from).concat(from < to ? \"-\".concat(to) : '', \" of \").concat(count);\n  }\n};\n\nvar PagingPanel =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(PagingPanel, _React$PureComponent);\n\n  function PagingPanel() {\n    _classCallCheck(this, PagingPanel);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PagingPanel).apply(this, arguments));\n  }\n\n  _createClass(PagingPanel, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Pager = _this$props.containerComponent,\n          pageSizes = _this$props.pageSizes,\n          messages = _this$props.messages;\n      var getMessage = getMessagesFormatter(_objectSpread({}, defaultMessages$3, messages));\n      return createElement(Plugin, {\n        name: \"PagingPanel\",\n        dependencies: pluginDependencies$f\n      }, createElement(Template, {\n        name: \"footer\"\n      }, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_ref2, _ref3) {\n        var currentPage$$1 = _ref2.currentPage,\n            pageSize = _ref2.pageSize,\n            totalCount = _ref2.totalCount;\n        var setCurrentPage$$1 = _ref3.setCurrentPage,\n            setPageSize$$1 = _ref3.setPageSize;\n        return createElement(Pager, {\n          currentPage: currentPage$$1,\n          pageSize: pageSize,\n          totalCount: totalCount,\n          totalPages: pageCount(totalCount, pageSize),\n          pageSizes: pageSizes,\n          getMessage: getMessage,\n          onCurrentPageChange: setCurrentPage$$1,\n          onPageSizeChange: setPageSize$$1\n        });\n      })));\n    }\n  }]);\n\n  return PagingPanel;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? PagingPanel.propTypes = {\n  pageSizes: arrayOf(number),\n  containerComponent: func.isRequired,\n  messages: shape({\n    showAll: string,\n    info: oneOfType([string, func])\n  })\n} : void 0;\nPagingPanel.defaultProps = {\n  pageSizes: [],\n  messages: {}\n};\nPagingPanel.components = {\n  containerComponent: 'Container'\n};\n\nvar ItemLayout =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(ItemLayout, _React$PureComponent);\n\n  function ItemLayout(props) {\n    var _this;\n\n    _classCallCheck(this, ItemLayout);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ItemLayout).call(this, props));\n    _this.state = {\n      dragging: false\n    };\n    return _this;\n  }\n\n  _createClass(ItemLayout, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          item = _this$props.item,\n          Item = _this$props.itemComponent,\n          draggingEnabled = _this$props.draggingEnabled,\n          onDragStart = _this$props.onDragStart,\n          onDragEnd = _this$props.onDragEnd;\n      var dragging = this.state.dragging;\n      var itemElement = createElement(Item, {\n        item: _objectSpread({}, item, {\n          draft: dragging || item.draft\n        })\n      });\n      return draggingEnabled ? createElement(DragSource, {\n        payload: [{\n          type: 'column',\n          columnName: item.column.name\n        }],\n        onStart: function onStart() {\n          _this2.setState({\n            dragging: true\n          });\n\n          onDragStart();\n        },\n        onEnd: function onEnd() {\n          _this2.setState({\n            dragging: false\n          });\n\n          onDragEnd();\n        }\n      }, itemElement) : itemElement;\n    }\n  }]);\n\n  return ItemLayout;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? ItemLayout.propTypes = {\n  item: shape({\n    column: object,\n    draft: bool\n  }).isRequired,\n  itemComponent: func.isRequired,\n  draggingEnabled: bool,\n  onDragStart: func,\n  onDragEnd: func\n} : void 0;\nItemLayout.defaultProps = {\n  draggingEnabled: false,\n  onDragStart: function onDragStart() {},\n  onDragEnd: function onDragEnd() {}\n};\n\nvar GroupPanelLayout =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(GroupPanelLayout, _React$PureComponent);\n\n  function GroupPanelLayout(props) {\n    var _this;\n\n    _classCallCheck(this, GroupPanelLayout);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GroupPanelLayout).call(this, props));\n    _this.state = {\n      sourceColumnName: null,\n      targetItemIndex: -1\n    };\n\n    _this.handleDragEvent = function (eventHandler, _ref) {\n      var payload = _ref.payload,\n          restArgs = _objectWithoutProperties(_ref, [\"payload\"]);\n\n      var isColumnGroupingEnabled = _this.props.isColumnGroupingEnabled;\n      var columnName = payload[0].columnName;\n\n      if (isColumnGroupingEnabled(columnName)) {\n        eventHandler(_objectSpread({\n          payload: payload\n        }, restArgs));\n      }\n    };\n\n    _this.onEnter = function (_ref2) {\n      var payload = _ref2.payload;\n\n      _this.setState({\n        sourceColumnName: payload[0].columnName\n      });\n    };\n\n    _this.onOver = function (_ref3) {\n      var clientOffset = _ref3.clientOffset;\n      var _this$props = _this.props,\n          onGroupDraft = _this$props.onGroupDraft,\n          items = _this$props.items;\n      var _this$state = _this.state,\n          sourceColumnName = _this$state.sourceColumnName,\n          prevTargetItemIndex = _this$state.targetItemIndex; // eslint-disable-next-line react/no-find-dom-node\n\n      var itemGeometries = _this.itemRefs.map(function (ref) {\n        return findDOMNode(ref).getBoundingClientRect();\n      });\n\n      var sourceItemIndex = items.findIndex(function (_ref4) {\n        var column = _ref4.column;\n        return column.name === sourceColumnName;\n      });\n      var targetItemIndex = getGroupCellTargetIndex(itemGeometries, sourceItemIndex, clientOffset);\n      if (prevTargetItemIndex === targetItemIndex) return;\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex\n      });\n\n      _this.setState({\n        targetItemIndex: targetItemIndex\n      });\n    };\n\n    _this.onLeave = function () {\n      var onGroupDraft = _this.props.onGroupDraft;\n      var sourceColumnName = _this.state.sourceColumnName;\n\n      if (!_this.draggingColumnName) {\n        _this.resetState();\n\n        return;\n      }\n\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: -1\n      });\n\n      _this.setState({\n        targetItemIndex: -1\n      });\n    };\n\n    _this.onDrop = function () {\n      var onGroup = _this.props.onGroup;\n      var _this$state2 = _this.state,\n          sourceColumnName = _this$state2.sourceColumnName,\n          targetItemIndex = _this$state2.targetItemIndex;\n\n      _this.resetState();\n\n      onGroup({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex\n      });\n    };\n\n    _this.onDragStart = function (columnName) {\n      _this.draggingColumnName = columnName;\n    };\n\n    _this.onDragEnd = function () {\n      _this.draggingColumnName = null;\n      var _this$state3 = _this.state,\n          sourceColumnName = _this$state3.sourceColumnName,\n          targetItemIndex = _this$state3.targetItemIndex;\n      var onGroup = _this.props.onGroup;\n\n      if (sourceColumnName && targetItemIndex === -1) {\n        onGroup({\n          columnName: sourceColumnName\n        });\n      }\n\n      _this.resetState();\n    };\n\n    return _this;\n  }\n\n  _createClass(GroupPanelLayout, [{\n    key: \"resetState\",\n    value: function resetState() {\n      var onGroupDraftCancel = this.props.onGroupDraftCancel;\n      onGroupDraftCancel();\n      this.setState({\n        sourceColumnName: null,\n        targetItemIndex: -1\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          items = _this$props2.items,\n          EmptyMessage = _this$props2.emptyMessageComponent,\n          Container = _this$props2.containerComponent,\n          Item = _this$props2.itemComponent,\n          draggingEnabled = _this$props2.draggingEnabled,\n          isColumnGroupingEnabled = _this$props2.isColumnGroupingEnabled;\n      this.itemRefs = [];\n      var groupPanel = items.length ? createElement(Container, null, items.map(function (item) {\n        var columnName = item.column.name;\n        return createElement(ItemLayout, {\n          key: columnName,\n          ref: function ref(element) {\n            return element && _this2.itemRefs.push(element);\n          },\n          item: item,\n          itemComponent: Item,\n          draggingEnabled: draggingEnabled && isColumnGroupingEnabled(columnName),\n          onDragStart: function onDragStart() {\n            return _this2.onDragStart(columnName);\n          },\n          onDragEnd: _this2.onDragEnd\n        });\n      })) : createElement(EmptyMessage, null);\n      return draggingEnabled ? createElement(DropTarget, {\n        onEnter: function onEnter(args) {\n          return _this2.handleDragEvent(_this2.onEnter, args);\n        },\n        onOver: function onOver(args) {\n          return _this2.handleDragEvent(_this2.onOver, args);\n        },\n        onLeave: function onLeave(args) {\n          return _this2.handleDragEvent(_this2.onLeave, args);\n        },\n        onDrop: function onDrop(args) {\n          return _this2.handleDragEvent(_this2.onDrop, args);\n        }\n      }, groupPanel) : groupPanel;\n    }\n  }]);\n\n  return GroupPanelLayout;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? GroupPanelLayout.propTypes = {\n  items: arrayOf(shape({\n    column: object,\n    draft: bool\n  })).isRequired,\n  onGroup: func,\n  itemComponent: func.isRequired,\n  containerComponent: func.isRequired,\n  emptyMessageComponent: func.isRequired,\n  draggingEnabled: bool,\n  isColumnGroupingEnabled: func,\n  onGroupDraft: func,\n  onGroupDraftCancel: func\n} : void 0;\nGroupPanelLayout.defaultProps = {\n  onGroup: function onGroup() {},\n  draggingEnabled: false,\n  isColumnGroupingEnabled: function isColumnGroupingEnabled() {},\n  onGroupDraft: function onGroupDraft() {},\n  onGroupDraftCancel: function onGroupDraftCancel() {}\n};\nvar defaultMessages$4 = {\n  groupByColumn: 'Drag a column header here to group by that column'\n};\n\nvar GroupingPanelRaw =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(GroupingPanelRaw, _React$PureComponent);\n\n  function GroupingPanelRaw() {\n    _classCallCheck(this, GroupingPanelRaw);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GroupingPanelRaw).apply(this, arguments));\n  }\n\n  _createClass(GroupingPanelRaw, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          LayoutComponent = _this$props.layoutComponent,\n          Container = _this$props.containerComponent,\n          Item = _this$props.itemComponent,\n          EmptyMessage = _this$props.emptyMessageComponent,\n          showSortingControls = _this$props.showSortingControls,\n          showGroupingControls = _this$props.showGroupingControls,\n          messages = _this$props.messages;\n      var getMessage = getMessagesFormatter(_objectSpread({}, defaultMessages$4, messages));\n\n      var EmptyMessagePlaceholder = function EmptyMessagePlaceholder() {\n        return createElement(EmptyMessage, {\n          getMessage: getMessage\n        });\n      };\n\n      var ItemPlaceholder = function ItemPlaceholder(_ref) {\n        var item = _ref.item;\n        var columnName = item.column.name;\n        return createElement(TemplateConnector, null, function (_ref2, _ref3) {\n          var sorting = _ref2.sorting,\n              isColumnSortingEnabled = _ref2.isColumnSortingEnabled,\n              isColumnGroupingEnabled = _ref2.isColumnGroupingEnabled;\n          var changeColumnGrouping$$1 = _ref3.changeColumnGrouping,\n              changeColumnSorting$$1 = _ref3.changeColumnSorting;\n          var sortingEnabled = isColumnSortingEnabled && isColumnSortingEnabled(columnName);\n          var groupingEnabled = isColumnGroupingEnabled && isColumnGroupingEnabled(columnName);\n          return createElement(Item, {\n            item: item,\n            sortingEnabled: sortingEnabled,\n            groupingEnabled: groupingEnabled,\n            showSortingControls: showSortingControls,\n            sortingDirection: showSortingControls ? getColumnSortingDirection(sorting, columnName) : undefined,\n            showGroupingControls: showGroupingControls,\n            onGroup: function onGroup() {\n              return changeColumnGrouping$$1({\n                columnName: columnName\n              });\n            },\n            onSort: function onSort(_ref4) {\n              var direction = _ref4.direction,\n                  keepOther = _ref4.keepOther;\n              return changeColumnSorting$$1({\n                columnName: columnName,\n                direction: direction,\n                keepOther: keepOther\n              });\n            }\n          });\n        });\n      };\n\n      return createElement(Plugin, {\n        name: \"GroupingPanel\",\n        dependencies: [{\n          name: 'GroupingState'\n        }, {\n          name: 'Toolbar'\n        }, {\n          name: 'SortingState',\n          optional: !showSortingControls\n        }]\n      }, createElement(Template, {\n        name: \"toolbarContent\"\n      }, createElement(TemplateConnector, null, function (_ref5, _ref6) {\n        var columns = _ref5.columns,\n            grouping = _ref5.grouping,\n            draftGrouping = _ref5.draftGrouping,\n            draggingEnabled = _ref5.draggingEnabled,\n            isColumnGroupingEnabled = _ref5.isColumnGroupingEnabled;\n        var changeColumnGrouping$$1 = _ref6.changeColumnGrouping,\n            draftColumnGrouping$$1 = _ref6.draftColumnGrouping,\n            cancelColumnGroupingDraft$$1 = _ref6.cancelColumnGroupingDraft;\n        return createElement(LayoutComponent, {\n          items: groupingPanelItems(columns, grouping, draftGrouping),\n          isColumnGroupingEnabled: isColumnGroupingEnabled,\n          draggingEnabled: draggingEnabled,\n          onGroup: changeColumnGrouping$$1,\n          onGroupDraft: draftColumnGrouping$$1,\n          onGroupDraftCancel: cancelColumnGroupingDraft$$1,\n          itemComponent: ItemPlaceholder,\n          emptyMessageComponent: EmptyMessagePlaceholder,\n          containerComponent: Container\n        });\n      }), createElement(TemplatePlaceholder, null)));\n    }\n  }]);\n\n  return GroupingPanelRaw;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? GroupingPanelRaw.propTypes = {\n  showSortingControls: bool,\n  showGroupingControls: bool,\n  layoutComponent: func.isRequired,\n  containerComponent: func.isRequired,\n  itemComponent: func.isRequired,\n  emptyMessageComponent: func.isRequired,\n  messages: object\n} : void 0;\nGroupingPanelRaw.defaultProps = {\n  showSortingControls: false,\n  showGroupingControls: false,\n  messages: {}\n};\nGroupingPanelRaw.components = {\n  layoutComponent: 'Layout',\n  containerComponent: 'Container',\n  itemComponent: 'Item',\n  emptyMessageComponent: 'EmptyMessage'\n};\nvar GroupingPanel = withComponents({\n  Layout: GroupPanelLayout\n})(GroupingPanelRaw);\n\nvar DataTypeProvider =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(DataTypeProvider, _React$PureComponent);\n\n  function DataTypeProvider() {\n    _classCallCheck(this, DataTypeProvider);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DataTypeProvider).apply(this, arguments));\n  }\n\n  _createClass(DataTypeProvider, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          columnNames = _this$props.for,\n          Formatter = _this$props.formatterComponent,\n          Editor = _this$props.editorComponent,\n          availableFilterOperations = _this$props.availableFilterOperations;\n\n      var getAvailableFilterOperationsComputed = function getAvailableFilterOperationsComputed(_ref) {\n        var getAvailableFilterOperations = _ref.getAvailableFilterOperations;\n        return getAvailableFilterOperationsGetter(getAvailableFilterOperations, availableFilterOperations, columnNames);\n      };\n\n      return createElement(Plugin, {\n        name: \"DataTypeProvider\"\n      }, createElement(Getter, {\n        name: \"getAvailableFilterOperations\",\n        computed: getAvailableFilterOperationsComputed\n      }), Formatter ? createElement(Template, {\n        name: \"valueFormatter\",\n        predicate: function predicate(_ref2) {\n          var column = _ref2.column;\n          return columnNames.includes(column.name);\n        }\n      }, function (params) {\n        return createElement(Formatter, params);\n      }) : null, Editor ? createElement(Template, {\n        name: \"valueEditor\",\n        predicate: function predicate(_ref3) {\n          var column = _ref3.column;\n          return columnNames.includes(column.name);\n        }\n      }, function (params) {\n        return createElement(Editor, params);\n      }) : null);\n    }\n  }]);\n\n  return DataTypeProvider;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? DataTypeProvider.propTypes = {\n  for: arrayOf(string).isRequired,\n  formatterComponent: func,\n  editorComponent: func,\n  availableFilterOperations: arrayOf(string)\n} : void 0;\nDataTypeProvider.defaultProps = {\n  formatterComponent: undefined,\n  editorComponent: undefined,\n  availableFilterOperations: undefined\n};\nvar pluginDependencies$g = [{\n  name: 'Table'\n}];\nvar defaultMessages$5 = {\n  noColumns: 'Nothing to show'\n};\n\nvar visibleTableColumnsComputed = function visibleTableColumnsComputed(_ref) {\n  var tableColumns = _ref.tableColumns,\n      hiddenColumnNames = _ref.hiddenColumnNames;\n  return visibleTableColumns(tableColumns, hiddenColumnNames);\n};\n\nvar columnExtensionValueGetter$4 = function columnExtensionValueGetter(columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'togglingEnabled', defaultValue);\n};\n\nvar TableColumnVisibility =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TableColumnVisibility, _React$PureComponent);\n\n  function TableColumnVisibility(props) {\n    var _this;\n\n    _classCallCheck(this, TableColumnVisibility);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TableColumnVisibility).call(this, props));\n    _this.state = {\n      hiddenColumnNames: props.hiddenColumnNames || props.defaultHiddenColumnNames\n    };\n    var stateHelper = createStateHelper(_assertThisInitialized(_assertThisInitialized(_this)), {\n      hiddenColumnNames: function hiddenColumnNames() {\n        var onHiddenColumnNamesChange = _this.props.onHiddenColumnNamesChange;\n        return onHiddenColumnNamesChange;\n      }\n    });\n    _this.toggleColumnVisibility = stateHelper.applyFieldReducer.bind(stateHelper, 'hiddenColumnNames', toggleColumn);\n    return _this;\n  }\n\n  _createClass(TableColumnVisibility, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          EmptyMessage = _this$props.emptyMessageComponent,\n          messages = _this$props.messages;\n      var getMessage = getMessagesFormatter(_objectSpread({}, defaultMessages$5, messages));\n      var hiddenColumnNames = this.state.hiddenColumnNames;\n      var _this$props2 = this.props,\n          columnExtensions = _this$props2.columnExtensions,\n          columnTogglingEnabled = _this$props2.columnTogglingEnabled;\n      return createElement(Plugin, {\n        name: \"TableColumnVisibility\",\n        dependencies: pluginDependencies$g\n      }, createElement(Getter, {\n        name: \"hiddenColumnNames\",\n        value: hiddenColumnNames\n      }), createElement(Getter, {\n        name: \"tableColumns\",\n        computed: visibleTableColumnsComputed\n      }), createElement(Getter, {\n        name: \"isColumnTogglingEnabled\",\n        value: columnExtensionValueGetter$4(columnExtensions, columnTogglingEnabled)\n      }), createElement(Action, {\n        name: \"toggleColumnVisibility\",\n        action: this.toggleColumnVisibility\n      }), createElement(Template, {\n        name: \"table\"\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref2) {\n          var tableColumns = _ref2.tableColumns;\n          return tableDataColumnsExist(tableColumns) ? createElement(TemplatePlaceholder, null) : createElement(EmptyMessage, _extends({\n            getMessage: getMessage\n          }, params));\n        });\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$hiddenColu = nextProps.hiddenColumnNames,\n          hiddenColumnNames = _nextProps$hiddenColu === void 0 ? prevState.hiddenColumnNames : _nextProps$hiddenColu;\n      return {\n        hiddenColumnNames: hiddenColumnNames\n      };\n    }\n  }]);\n\n  return TableColumnVisibility;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? TableColumnVisibility.propTypes = {\n  hiddenColumnNames: arrayOf(string),\n  defaultHiddenColumnNames: arrayOf(string),\n  emptyMessageComponent: func.isRequired,\n  onHiddenColumnNamesChange: func,\n  messages: object,\n  columnExtensions: array,\n  columnTogglingEnabled: bool\n} : void 0;\nTableColumnVisibility.defaultProps = {\n  hiddenColumnNames: undefined,\n  defaultHiddenColumnNames: [],\n  onHiddenColumnNamesChange: undefined,\n  messages: {},\n  columnExtensions: undefined,\n  columnTogglingEnabled: true\n};\nTableColumnVisibility.components = {\n  emptyMessageComponent: 'EmptyMessage'\n};\n\nvar Toolbar =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Toolbar, _React$PureComponent);\n\n  function Toolbar() {\n    _classCallCheck(this, Toolbar);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Toolbar).apply(this, arguments));\n  }\n\n  _createClass(Toolbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Root = _this$props.rootComponent,\n          FlexibleSpaceComponent = _this$props.flexibleSpaceComponent;\n      return createElement(Plugin, {\n        name: \"Toolbar\"\n      }, createElement(Template, {\n        name: \"header\"\n      }, createElement(Root, null, createElement(TemplatePlaceholder, {\n        name: \"toolbarContent\"\n      })), createElement(TemplatePlaceholder, null)), createElement(Template, {\n        name: \"toolbarContent\"\n      }, createElement(FlexibleSpaceComponent, null)));\n    }\n  }]);\n\n  return Toolbar;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? Toolbar.propTypes = {\n  rootComponent: func.isRequired,\n  flexibleSpaceComponent: func.isRequired\n} : void 0;\nToolbar.components = {\n  rootComponent: 'Root',\n  flexibleSpaceComponent: 'FlexibleSpace'\n};\n\nvar TreeDataState =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TreeDataState, _React$PureComponent);\n\n  function TreeDataState(props) {\n    var _this;\n\n    _classCallCheck(this, TreeDataState);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TreeDataState).call(this, props));\n    _this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds\n    };\n    var stateHelper = createStateHelper(_assertThisInitialized(_assertThisInitialized(_this)), {\n      expandedRowIds: function expandedRowIds() {\n        var onExpandedRowIdsChange = _this.props.onExpandedRowIdsChange;\n        return onExpandedRowIdsChange;\n      }\n    });\n    _this.toggleRowExpanded = stateHelper.applyFieldReducer.bind(stateHelper, 'expandedRowIds', toggleRowExpanded);\n    return _this;\n  }\n\n  _createClass(TreeDataState, [{\n    key: \"render\",\n    value: function render() {\n      var expandedRowIds = this.state.expandedRowIds;\n      return createElement(Plugin, {\n        name: \"TreeDataState\"\n      }, createElement(Getter, {\n        name: \"expandedRowIds\",\n        value: expandedRowIds\n      }), ' ', createElement(Action, {\n        name: \"toggleRowExpanded\",\n        action: this.toggleRowExpanded\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$expandedRo = nextProps.expandedRowIds,\n          expandedRowIds = _nextProps$expandedRo === void 0 ? prevState.expandedRowIds : _nextProps$expandedRo;\n      return {\n        expandedRowIds: expandedRowIds\n      };\n    }\n  }]);\n\n  return TreeDataState;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? TreeDataState.propTypes = {\n  expandedRowIds: array,\n  defaultExpandedRowIds: array,\n  onExpandedRowIdsChange: func\n} : void 0;\nTreeDataState.defaultProps = {\n  expandedRowIds: undefined,\n  defaultExpandedRowIds: [],\n  onExpandedRowIdsChange: undefined\n};\nvar pluginDependencies$h = [{\n  name: 'TreeDataState'\n}];\n\nvar expandedTreeRowsComputed = function expandedTreeRowsComputed(_ref) {\n  var rows = _ref.rows,\n      getRowId = _ref.getRowId,\n      expandedRowIds = _ref.expandedRowIds;\n  return expandedTreeRows(rows, getRowId, expandedRowIds);\n};\n\nvar getRowIdComputed$1 = function getRowIdComputed(_ref2) {\n  var getRowId = _ref2.getRowId,\n      rows = _ref2.rows;\n  return customTreeRowIdGetter(getRowId, rows);\n};\n\nvar getRowLevelKeyComputed = function getRowLevelKeyComputed(_ref3) {\n  var getRowLevelKey = _ref3.getRowLevelKey,\n      rows = _ref3.rows;\n  return customTreeRowLevelKeyGetter(getRowLevelKey, rows);\n};\n\nvar isTreeRowLeafComputed = function isTreeRowLeafComputed(_ref4) {\n  var rows = _ref4.rows;\n  return isTreeRowLeafGetter(rows);\n};\n\nvar getTreeRowLevelComputed = function getTreeRowLevelComputed(_ref5) {\n  var rows = _ref5.rows;\n  return getTreeRowLevelGetter(rows);\n};\n\nvar collapsedTreeRowsGetterComputed = function collapsedTreeRowsGetterComputed(_ref6) {\n  var rows = _ref6.rows,\n      getCollapsedRows = _ref6.getCollapsedRows;\n  return collapsedTreeRowsGetter(getCollapsedRows, rows);\n};\n\nvar unwrappedTreeRowsComputed = function unwrappedTreeRowsComputed(_ref7) {\n  var rows = _ref7.rows;\n  return unwrappedCustomTreeRows(rows);\n};\n\nvar CustomTreeData =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(CustomTreeData, _React$PureComponent);\n\n  function CustomTreeData() {\n    _classCallCheck(this, CustomTreeData);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CustomTreeData).apply(this, arguments));\n  }\n\n  _createClass(CustomTreeData, [{\n    key: \"render\",\n    value: function render() {\n      var getChildRows = this.props.getChildRows;\n\n      var treeRowsComputed = function treeRowsComputed(_ref8) {\n        var rows = _ref8.rows;\n        return customTreeRowsWithMeta(rows, getChildRows);\n      };\n\n      return createElement(Plugin, {\n        name: \"CustomTreeData\",\n        dependencies: pluginDependencies$h\n      }, createElement(Getter, {\n        name: \"rows\",\n        computed: treeRowsComputed\n      }), createElement(Getter, {\n        name: \"getRowId\",\n        computed: getRowIdComputed$1\n      }), createElement(Getter, {\n        name: \"getRowLevelKey\",\n        computed: getRowLevelKeyComputed\n      }), createElement(Getter, {\n        name: \"isTreeRowLeaf\",\n        computed: isTreeRowLeafComputed\n      }), createElement(Getter, {\n        name: \"getTreeRowLevel\",\n        computed: getTreeRowLevelComputed\n      }), createElement(Getter, {\n        name: \"rows\",\n        computed: expandedTreeRowsComputed\n      }), createElement(Getter, {\n        name: \"getCollapsedRows\",\n        computed: collapsedTreeRowsGetterComputed\n      }), createElement(Getter, {\n        name: \"rows\",\n        computed: unwrappedTreeRowsComputed\n      }));\n    }\n  }]);\n\n  return CustomTreeData;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? CustomTreeData.propTypes = {\n  getChildRows: func.isRequired\n} : void 0;\n\nvar TableTreeColumn =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TableTreeColumn, _React$PureComponent);\n\n  function TableTreeColumn() {\n    _classCallCheck(this, TableTreeColumn);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TableTreeColumn).apply(this, arguments));\n  }\n\n  _createClass(TableTreeColumn, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          forColumnName = _this$props.for,\n          showSelectionControls = _this$props.showSelectionControls,\n          showSelectAll = _this$props.showSelectAll,\n          Indent = _this$props.indentComponent,\n          ExpandButton = _this$props.expandButtonComponent,\n          Checkbox = _this$props.checkboxComponent,\n          Content = _this$props.contentComponent,\n          Cell = _this$props.cellComponent;\n      return createElement(Plugin, {\n        name: \"TableTreeColumn\",\n        dependencies: [{\n          name: 'DataTypeProvider',\n          optional: true\n        }, {\n          name: 'TreeDataState'\n        }, {\n          name: 'SelectionState',\n          optional: !showSelectionControls\n        }, {\n          name: 'IntegratedSelection',\n          optional: !showSelectAll\n        }, {\n          name: 'Table'\n        }, {\n          name: 'TableHeaderRow',\n          optional: true\n        }]\n      }, createElement(Getter, {\n        name: \"tableTreeColumnName\",\n        value: forColumnName\n      }), createElement(Template, {\n        name: \"tableHeaderCellBefore\",\n        predicate: function predicate(_ref) {\n          var column = _ref.column;\n          return column.name === forColumnName;\n        }\n      }, createElement(ExpandButton, {\n        visible: false\n      }), showSelectionControls && showSelectAll && createElement(TemplateConnector, null, function (_ref2, _ref3) {\n        var selectAllAvailable = _ref2.selectAllAvailable,\n            allSelected$$1 = _ref2.allSelected,\n            someSelected$$1 = _ref2.someSelected;\n        var toggleSelectAll = _ref3.toggleSelectAll;\n        return createElement(Checkbox, {\n          disabled: !selectAllAvailable,\n          checked: allSelected$$1,\n          indeterminate: someSelected$$1,\n          onChange: toggleSelectAll\n        });\n      })), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref4) {\n          var tableRow = _ref4.tableRow,\n              tableColumn = _ref4.tableColumn;\n          return isTreeTableCell(tableRow, tableColumn, forColumnName);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref5, _ref6) {\n          var getCollapsedRows = _ref5.getCollapsedRows,\n              expandedRowIds = _ref5.expandedRowIds,\n              selection = _ref5.selection,\n              isTreeRowLeaf = _ref5.isTreeRowLeaf,\n              getTreeRowLevel = _ref5.getTreeRowLevel,\n              getCellValue = _ref5.getCellValue;\n          var toggleRowExpanded$$1 = _ref6.toggleRowExpanded,\n              toggleSelection$$1 = _ref6.toggleSelection;\n          var _params$tableRow = params.tableRow,\n              row = _params$tableRow.row,\n              rowId = _params$tableRow.rowId;\n          var columnName = params.tableColumn.column.name;\n          var value = getCellValue(row, columnName);\n          var collapsedRows = getCollapsedRows(row);\n          return createElement(TemplatePlaceholder, {\n            name: \"valueFormatter\",\n            params: {\n              row: row,\n              column: params.tableColumn.column,\n              value: value\n            }\n          }, function (content) {\n            return createElement(Cell, _extends({}, params, {\n              row: row,\n              column: params.tableColumn.column,\n              value: value\n            }), createElement(Indent, {\n              level: getTreeRowLevel(row)\n            }), createElement(ExpandButton, {\n              visible: collapsedRows ? !!collapsedRows.length : !isTreeRowLeaf(row),\n              expanded: expandedRowIds.indexOf(rowId) > -1,\n              onToggle: function onToggle() {\n                return toggleRowExpanded$$1({\n                  rowId: rowId\n                });\n              }\n            }), showSelectionControls && createElement(Checkbox, {\n              disabled: false,\n              checked: selection.indexOf(rowId) > -1,\n              indeterminate: false,\n              onChange: function onChange() {\n                return toggleSelection$$1({\n                  rowIds: [rowId]\n                });\n              }\n            }), createElement(Content, null, content || value));\n          });\n        });\n      }));\n    }\n  }]);\n\n  return TableTreeColumn;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? TableTreeColumn.propTypes = {\n  for: string.isRequired,\n  showSelectionControls: bool,\n  showSelectAll: bool,\n  cellComponent: func.isRequired,\n  indentComponent: func.isRequired,\n  expandButtonComponent: func.isRequired,\n  checkboxComponent: func.isRequired,\n  contentComponent: func.isRequired\n} : void 0;\nTableTreeColumn.defaultProps = {\n  showSelectionControls: false,\n  showSelectAll: false\n};\nTableTreeColumn.components = {\n  cellComponent: 'Cell',\n  contentComponent: 'Content',\n  indentComponent: 'Indent',\n  expandButtonComponent: 'ExpandButton',\n  checkboxComponent: 'Checkbox'\n};\n\nvar SearchState =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(SearchState, _React$PureComponent);\n\n  function SearchState(props) {\n    var _this;\n\n    _classCallCheck(this, SearchState);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SearchState).call(this, props));\n    _this.state = {\n      value: props.value || props.defaultValue\n    };\n    var stateHelper = createStateHelper(_assertThisInitialized(_assertThisInitialized(_this)), {\n      value: function value() {\n        var onValueChange = _this.props.onValueChange;\n        return onValueChange;\n      }\n    });\n    _this.changeValue = stateHelper.applyFieldReducer.bind(stateHelper, 'value', changeSearchValue);\n    return _this;\n  }\n\n  _createClass(SearchState, [{\n    key: \"render\",\n    value: function render() {\n      var value = this.state.value;\n\n      var filterExpressionComputed = function filterExpressionComputed(_ref) {\n        var filterExpression$$1 = _ref.filterExpression,\n            columns = _ref.columns;\n        return searchFilterExpression(value, columns, filterExpression$$1);\n      };\n\n      return createElement(Plugin, {\n        name: \"SearchState\"\n      }, createElement(Getter, {\n        name: \"filterExpression\",\n        computed: filterExpressionComputed\n      }), createElement(Getter, {\n        name: \"searchValue\",\n        value: value\n      }), createElement(Action, {\n        name: \"changeSearchValue\",\n        action: this.changeValue\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$value = nextProps.value,\n          value = _nextProps$value === void 0 ? prevState.value : _nextProps$value;\n      return {\n        value: value\n      };\n    }\n  }]);\n\n  return SearchState;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? SearchState.propTypes = {\n  value: string,\n  defaultValue: string,\n  onValueChange: func\n} : void 0;\nSearchState.defaultProps = {\n  value: undefined,\n  defaultValue: '',\n  onValueChange: undefined\n};\nvar pluginDependencies$i = [{\n  name: 'Toolbar'\n}, {\n  name: 'SearchState'\n}];\nvar defaultMessages$6 = {\n  searchPlaceholder: 'Search...'\n};\n\nvar SearchPanel =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(SearchPanel, _React$PureComponent);\n\n  function SearchPanel() {\n    _classCallCheck(this, SearchPanel);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SearchPanel).apply(this, arguments));\n  }\n\n  _createClass(SearchPanel, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Input = _this$props.inputComponent,\n          messages = _this$props.messages;\n      var getMessage = getMessagesFormatter(_objectSpread({}, defaultMessages$6, messages));\n      return createElement(Plugin, {\n        name: \"SearchPanel\",\n        dependencies: pluginDependencies$i\n      }, createElement(Template, {\n        name: \"toolbarContent\"\n      }, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_ref, _ref2) {\n        var searchValue = _ref.searchValue;\n        var changeSearchValue$$1 = _ref2.changeSearchValue;\n        return createElement(Input, {\n          value: searchValue,\n          onValueChange: changeSearchValue$$1,\n          getMessage: getMessage\n        });\n      })));\n    }\n  }]);\n\n  return SearchPanel;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? SearchPanel.propTypes = {\n  inputComponent: func.isRequired,\n  messages: object\n} : void 0;\nSearchPanel.defaultProps = {\n  messages: {}\n};\nSearchPanel.components = {\n  inputComponent: 'Input'\n};\n\nvar tableHeaderRowsComputed$2 = function tableHeaderRowsComputed(_ref) {\n  var tableHeaderRows = _ref.tableHeaderRows;\n  return tableHeaderRowsWithFixed(tableHeaderRows);\n};\n\nvar tableHeaderColumnChainsComputed = function tableHeaderColumnChainsComputed(_ref2) {\n  var tableColumns = _ref2.tableColumns,\n      tableHeaderRows = _ref2.tableHeaderRows,\n      tableHeaderColumnChains = _ref2.tableHeaderColumnChains;\n  return tableHeaderColumnChainsWithFixed(tableHeaderColumnChains, tableHeaderRows, tableColumns);\n};\n\nvar CellPlaceholder$2 = function CellPlaceholder(props) {\n  return createElement(TemplatePlaceholder, {\n    params: props\n  });\n};\n\nvar pluginDependencies$j = [{\n  name: 'Table'\n}, {\n  name: 'TableBandHeader',\n  optional: true\n}, {\n  name: 'TableColumnReordering',\n  optional: true\n}, {\n  name: 'TableEditColumn',\n  optional: true\n}, {\n  name: 'TableEditRow',\n  optional: true\n}, {\n  name: 'TableFilterRow',\n  optional: true\n}, {\n  name: 'TableHeaderRow',\n  optional: true\n}, {\n  name: 'TableSelection',\n  optional: true\n}, {\n  name: 'TableSummaryRow',\n  optional: true\n}, {\n  name: 'TableTreeColumn',\n  optional: true\n}];\n\nvar TableFixedColumns =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TableFixedColumns, _React$PureComponent);\n\n  function TableFixedColumns(props) {\n    var _this;\n\n    _classCallCheck(this, TableFixedColumns);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TableFixedColumns).call(this, props));\n    _this.state = {\n      tableColumnDimensions: {}\n    };\n    return _this;\n  }\n\n  _createClass(TableFixedColumns, [{\n    key: \"handleListenerSizeChange\",\n    value: function handleListenerSizeChange(key, width) {\n      this.setState(function (state) {\n        return {\n          tableColumnDimensions: _objectSpread({}, state.tableColumnDimensions, _defineProperty({}, key, width))\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          leftColumns = _this$props.leftColumns,\n          rightColumns = _this$props.rightColumns,\n          Cell = _this$props.cellComponent,\n          ListenerRow = _this$props.listenerRowComponent,\n          ListenerCell = _this$props.listenerCellComponent;\n\n      var tableColumnsComputed = function tableColumnsComputed(_ref3) {\n        var tableColumns = _ref3.tableColumns;\n        return tableColumnsWithFixed(tableColumns, leftColumns, rightColumns);\n      };\n\n      return createElement(Plugin, {\n        name: \"TableFixedColumns\",\n        dependencies: pluginDependencies$j\n      }, createElement(Getter, {\n        name: \"tableHeaderRows\",\n        computed: tableHeaderRowsComputed$2\n      }), createElement(Getter, {\n        name: \"tableColumns\",\n        computed: tableColumnsComputed\n      }), createElement(Getter, {\n        name: \"tableHeaderColumnChains\",\n        computed: tableHeaderColumnChainsComputed\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref4) {\n          var tableColumn = _ref4.tableColumn;\n          return !!tableColumn.fixed;\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref5) {\n          var tableColumns = _ref5.tableColumns,\n              tableHeaderColumnChains = _ref5.tableHeaderColumnChains;\n          var tableColumnDimensions = _this2.state.tableColumnDimensions;\n          var fixedColumnProps = calculateFixedColumnProps(params, {\n            leftColumns: leftColumns,\n            rightColumns: rightColumns\n          }, tableColumns, tableColumnDimensions, tableHeaderColumnChains);\n          return createElement(Cell, _extends({}, params, fixedColumnProps, {\n            component: CellPlaceholder$2\n          }));\n        });\n      }), createElement(Template, {\n        name: \"tableRow\",\n        predicate: function predicate(_ref6) {\n          var tableRow = _ref6.tableRow;\n          return isFixedTableRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(ListenerRow, params);\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref7) {\n          var tableRow = _ref7.tableRow;\n          return isFixedTableRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(ListenerCell, _extends({}, params, {\n          listen: !!params.tableColumn.fixed,\n          onSizeChange: function onSizeChange(_ref8) {\n            var width = _ref8.width;\n            return _this2.handleListenerSizeChange(params.tableColumn.key, width);\n          }\n        }));\n      }));\n    }\n  }]);\n\n  return TableFixedColumns;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? TableFixedColumns.propTypes = {\n  leftColumns: arrayOf(oneOfType([string, symbol])),\n  rightColumns: arrayOf(oneOfType([string, symbol])),\n  cellComponent: func.isRequired,\n  listenerRowComponent: func.isRequired,\n  listenerCellComponent: func.isRequired\n} : void 0;\nTableFixedColumns.defaultProps = {\n  leftColumns: [],\n  rightColumns: []\n};\nTableFixedColumns.components = {\n  cellComponent: 'Cell',\n  listenerRowComponent: 'ListenerRow',\n  listenerCellComponent: 'ListenerCell'\n};\n\nvar SummaryState =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(SummaryState, _React$PureComponent);\n\n  function SummaryState() {\n    _classCallCheck(this, SummaryState);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SummaryState).apply(this, arguments));\n  }\n\n  _createClass(SummaryState, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          totalItems = _this$props.totalItems,\n          groupItems = _this$props.groupItems,\n          treeItems = _this$props.treeItems;\n      return createElement(Plugin, {\n        name: \"SummaryState\"\n      }, createElement(Getter, {\n        name: \"totalSummaryItems\",\n        value: totalItems\n      }), createElement(Getter, {\n        name: \"groupSummaryItems\",\n        value: groupItems\n      }), createElement(Getter, {\n        name: \"treeSummaryItems\",\n        value: treeItems\n      }));\n    }\n  }]);\n\n  return SummaryState;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? SummaryState.propTypes = {\n  totalItems: array,\n  groupItems: array,\n  treeItems: array\n} : void 0;\nSummaryState.defaultProps = {\n  totalItems: undefined,\n  groupItems: undefined,\n  treeItems: undefined\n};\nvar pluginDependencies$k = [{\n  name: 'SummaryState'\n}];\n\nvar IntegratedSummary =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(IntegratedSummary, _React$PureComponent);\n\n  function IntegratedSummary() {\n    _classCallCheck(this, IntegratedSummary);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IntegratedSummary).apply(this, arguments));\n  }\n\n  _createClass(IntegratedSummary, [{\n    key: \"render\",\n    value: function render() {\n      var calculator = this.props.calculator;\n\n      var totalSummaryValuesComputed = function totalSummaryValuesComputed(_ref) {\n        var rows = _ref.rows,\n            totalSummaryItems = _ref.totalSummaryItems,\n            getCellValue = _ref.getCellValue,\n            getRowLevelKey = _ref.getRowLevelKey,\n            isGroupRow = _ref.isGroupRow,\n            getCollapsedRows = _ref.getCollapsedRows;\n        return totalSummaryValues(rows, totalSummaryItems, getCellValue, getRowLevelKey, isGroupRow, getCollapsedRows, calculator);\n      };\n\n      var groupSummaryValuesComputed = function groupSummaryValuesComputed(_ref2) {\n        var rows = _ref2.rows,\n            groupSummaryItems = _ref2.groupSummaryItems,\n            getCellValue = _ref2.getCellValue,\n            getRowLevelKey = _ref2.getRowLevelKey,\n            isGroupRow = _ref2.isGroupRow;\n        return groupSummaryValues(rows, groupSummaryItems, getCellValue, getRowLevelKey, isGroupRow, calculator);\n      };\n\n      var treeSummaryValuesComputed = function treeSummaryValuesComputed(_ref3) {\n        var rows = _ref3.rows,\n            treeSummaryItems = _ref3.treeSummaryItems,\n            getCellValue = _ref3.getCellValue,\n            getRowLevelKey = _ref3.getRowLevelKey,\n            isGroupRow = _ref3.isGroupRow,\n            getRowId = _ref3.getRowId;\n        return treeSummaryValues(rows, treeSummaryItems, getCellValue, getRowLevelKey, isGroupRow, getRowId, calculator);\n      };\n\n      return createElement(Plugin, {\n        name: \"IntegratedSummary\",\n        dependencies: pluginDependencies$k\n      }, createElement(Getter, {\n        name: \"totalSummaryValues\",\n        computed: totalSummaryValuesComputed\n      }), createElement(Getter, {\n        name: \"groupSummaryValues\",\n        computed: groupSummaryValuesComputed\n      }), createElement(Getter, {\n        name: \"treeSummaryValues\",\n        computed: treeSummaryValuesComputed\n      }));\n    }\n  }]);\n\n  return IntegratedSummary;\n}(PureComponent);\n\nIntegratedSummary.defaultCalculator = defaultSummaryCalculator;\nprocess.env.NODE_ENV !== \"production\" ? IntegratedSummary.propTypes = {\n  calculator: func\n} : void 0;\nIntegratedSummary.defaultProps = {\n  calculator: undefined\n};\nvar pluginDependencies$l = [{\n  name: 'SummaryState'\n}];\n\nvar CustomSummary =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(CustomSummary, _React$PureComponent);\n\n  function CustomSummary() {\n    _classCallCheck(this, CustomSummary);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CustomSummary).apply(this, arguments));\n  }\n\n  _createClass(CustomSummary, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          totalValues = _this$props.totalValues,\n          groupValues = _this$props.groupValues,\n          treeValues = _this$props.treeValues;\n      return createElement(Plugin, {\n        name: \"CustomSummary\",\n        dependencies: pluginDependencies$l\n      }, createElement(Getter, {\n        name: \"totalSummaryValues\",\n        value: totalValues\n      }), createElement(Getter, {\n        name: \"groupSummaryValues\",\n        value: groupValues\n      }), createElement(Getter, {\n        name: \"treeSummaryValues\",\n        value: treeValues\n      }));\n    }\n  }]);\n\n  return CustomSummary;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? CustomSummary.propTypes = {\n  totalValues: array,\n  groupValues: object,\n  treeValues: object\n} : void 0;\nCustomSummary.defaultProps = {\n  totalValues: undefined,\n  groupValues: undefined,\n  treeValues: undefined\n};\nvar dependencies$1 = [{\n  name: 'DataTypeProvider',\n  optional: true\n}, {\n  name: 'SummaryState'\n}, {\n  name: 'CustomSummary',\n  optional: true\n}, {\n  name: 'IntegratedSummary',\n  optional: true\n}, {\n  name: 'Table'\n}, {\n  name: 'TableTreeColumn',\n  optional: true\n}];\nvar defaultMessages$7 = {\n  sum: 'Sum',\n  min: 'Min',\n  max: 'Max',\n  avg: 'Avg',\n  count: 'Count'\n};\n\nvar tableBodyRowsComputed$2 = function tableBodyRowsComputed(_ref) {\n  var tableBodyRows = _ref.tableBodyRows,\n      getRowLevelKey = _ref.getRowLevelKey,\n      isGroupRow = _ref.isGroupRow,\n      getRowId = _ref.getRowId;\n  return tableRowsWithSummaries(tableBodyRows, getRowLevelKey, isGroupRow, getRowId);\n};\n\nvar tableFooterRowsComputed = function tableFooterRowsComputed(_ref2) {\n  var tableFooterRows = _ref2.tableFooterRows;\n  return tableRowsWithTotalSummaries(tableFooterRows);\n};\n\nvar defaultTypelessSummaries = ['count'];\n\nvar TableSummaryRow =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TableSummaryRow, _React$PureComponent);\n\n  function TableSummaryRow() {\n    _classCallCheck(this, TableSummaryRow);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TableSummaryRow).apply(this, arguments));\n  }\n\n  _createClass(TableSummaryRow, [{\n    key: \"renderContent\",\n    value: function renderContent(column, columnSummaries) {\n      var _this$props = this.props,\n          formatlessSummaryTypes = _this$props.formatlessSummaryTypes,\n          Item = _this$props.itemComponent,\n          messages = _this$props.messages;\n      var getMessage = getMessagesFormatter(_objectSpread({}, defaultMessages$7, messages));\n\n      var SummaryItem = function SummaryItem(_ref3) {\n        var summary = _ref3.summary,\n            children = _ref3.children;\n        return createElement(Item, {\n          getMessage: getMessage,\n          type: summary.type,\n          value: summary.value\n        }, children || String(summary.value));\n      };\n\n      return createElement(Fragment, null, columnSummaries.map(function (summary) {\n        if (summary.value === null || formatlessSummaryTypes.includes(summary.type) || defaultTypelessSummaries.includes(summary.type)) {\n          return createElement(SummaryItem, {\n            key: summary.type,\n            summary: summary\n          });\n        }\n\n        return createElement(TemplatePlaceholder, {\n          key: summary.type,\n          name: \"valueFormatter\",\n          params: {\n            column: column,\n            value: summary.value\n          }\n        }, function (content) {\n          return createElement(SummaryItem, {\n            summary: summary\n          }, content);\n        });\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props2 = this.props,\n          TotalRow = _this$props2.totalRowComponent,\n          GroupRow = _this$props2.groupRowComponent,\n          TreeRow = _this$props2.treeRowComponent,\n          TotalCell = _this$props2.totalCellComponent,\n          GroupCell = _this$props2.groupCellComponent,\n          TreeCell = _this$props2.treeCellComponent,\n          TreeColumnCell = _this$props2.treeColumnCellComponent,\n          TreeColumnContent = _this$props2.treeColumnContentComponent,\n          TreeColumnIndent = _this$props2.treeColumnIndentComponent;\n      return createElement(Plugin, {\n        name: \"TableSummaryRow\",\n        dependencies: dependencies$1\n      }, createElement(Getter, {\n        name: \"tableBodyRows\",\n        computed: tableBodyRowsComputed$2\n      }), createElement(Getter, {\n        name: \"tableFooterRows\",\n        computed: tableFooterRowsComputed\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref4) {\n          var tableRow = _ref4.tableRow,\n              tableColumn = _ref4.tableColumn;\n          return isTotalSummaryTableCell(tableRow, tableColumn);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref5) {\n          var totalSummaryItems = _ref5.totalSummaryItems,\n              totalSummaryValues$$1 = _ref5.totalSummaryValues;\n          var columnSummaries = getColumnSummaries(totalSummaryItems, params.tableColumn.column.name, totalSummaryValues$$1);\n          return createElement(TotalCell, _extends({}, params, {\n            column: params.tableColumn.column\n          }), _this.renderContent(params.tableColumn.column, columnSummaries));\n        });\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref6) {\n          var tableRow = _ref6.tableRow,\n              tableColumn = _ref6.tableColumn;\n          return isGroupSummaryTableCell(tableRow, tableColumn);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref7) {\n          var groupSummaryItems = _ref7.groupSummaryItems,\n              groupSummaryValues$$1 = _ref7.groupSummaryValues;\n          var columnSummaries = getColumnSummaries(groupSummaryItems, params.tableColumn.column.name, groupSummaryValues$$1[params.tableRow.row.compoundKey]);\n          return createElement(GroupCell, _extends({}, params, {\n            column: params.tableColumn.column\n          }), _this.renderContent(params.tableColumn.column, columnSummaries));\n        });\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function predicate(_ref8) {\n          var tableRow = _ref8.tableRow,\n              tableColumn = _ref8.tableColumn;\n          return isTreeSummaryTableCell(tableRow, tableColumn);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_ref9) {\n          var treeSummaryItems = _ref9.treeSummaryItems,\n              treeSummaryValues$$1 = _ref9.treeSummaryValues,\n              tableTreeColumnName = _ref9.tableTreeColumnName,\n              getRowId = _ref9.getRowId,\n              getTreeRowLevel = _ref9.getTreeRowLevel;\n          var columnSummaries = getColumnSummaries(treeSummaryItems, params.tableColumn.column.name, treeSummaryValues$$1[getRowId(params.tableRow.row)]);\n\n          if (tableTreeColumnName === params.tableColumn.column.name) {\n            return createElement(TreeColumnCell, _extends({}, params, {\n              column: params.tableColumn.column\n            }), createElement(TreeColumnIndent, {\n              level: getTreeRowLevel(params.tableRow.row)\n            }), createElement(TreeColumnContent, null, _this.renderContent(params.tableColumn.column, columnSummaries)));\n          }\n\n          return createElement(TreeCell, _extends({}, params, {\n            column: params.tableColumn.column\n          }), _this.renderContent(params.tableColumn.column, columnSummaries));\n        });\n      }), createElement(Template, {\n        name: \"tableRow\",\n        predicate: function predicate(_ref10) {\n          var tableRow = _ref10.tableRow;\n          return isTotalSummaryTableRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(TotalRow, params);\n      }), createElement(Template, {\n        name: \"tableRow\",\n        predicate: function predicate(_ref11) {\n          var tableRow = _ref11.tableRow;\n          return isGroupSummaryTableRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(GroupRow, params);\n      }), createElement(Template, {\n        name: \"tableRow\",\n        predicate: function predicate(_ref12) {\n          var tableRow = _ref12.tableRow;\n          return isTreeSummaryTableRow(tableRow);\n        }\n      }, function (params) {\n        return createElement(TreeRow, params);\n      }));\n    }\n  }]);\n\n  return TableSummaryRow;\n}(PureComponent);\n\nTableSummaryRow.TREE_ROW_TYPE = TABLE_TREE_SUMMARY_TYPE;\nTableSummaryRow.GROUP_ROW_TYPE = TABLE_GROUP_SUMMARY_TYPE;\nTableSummaryRow.TOTAL_ROW_TYPE = TABLE_TOTAL_SUMMARY_TYPE;\nprocess.env.NODE_ENV !== \"production\" ? TableSummaryRow.propTypes = {\n  formatlessSummaryTypes: array,\n  totalRowComponent: func.isRequired,\n  groupRowComponent: func.isRequired,\n  treeRowComponent: func.isRequired,\n  totalCellComponent: func.isRequired,\n  groupCellComponent: func.isRequired,\n  treeCellComponent: func.isRequired,\n  treeColumnCellComponent: func.isRequired,\n  treeColumnContentComponent: func.isRequired,\n  treeColumnIndentComponent: func.isRequired,\n  itemComponent: func.isRequired,\n  messages: shape({\n    sum: string,\n    min: string,\n    max: string,\n    avg: string,\n    count: string\n  })\n} : void 0;\nTableSummaryRow.defaultProps = {\n  formatlessSummaryTypes: [],\n  messages: {}\n};\nTableSummaryRow.components = {\n  totalRowComponent: 'TotalRow',\n  groupRowComponent: 'GroupRow',\n  treeRowComponent: 'TreeRow',\n  totalCellComponent: 'TotalCell',\n  groupCellComponent: 'GroupCell',\n  treeCellComponent: 'TreeCell',\n  treeColumnCellComponent: 'TableTreeCell',\n  treeColumnContentComponent: 'TableTreeContent',\n  treeColumnIndentComponent: 'TableTreeIndent',\n  itemComponent: 'Item'\n};\n\nvar TableLayout =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TableLayout, _React$PureComponent);\n\n  function TableLayout(props) {\n    var _this;\n\n    _classCallCheck(this, TableLayout);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TableLayout).call(this, props));\n    _this.state = {\n      animationState: new Map()\n    };\n    _this.animations = new Map();\n    _this.savedScrolldWidth = {};\n    _this.tableRef = createRef();\n    return _this;\n  }\n\n  _createClass(TableLayout, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var columns = this.props.columns;\n      var prevColumns = prevProps.columns;\n      var tableWidth = this.getTableWidth(prevColumns, columns);\n      this.animations = getAnimations(prevColumns, columns, tableWidth, this.animations);\n      cancelAnimationFrame(this.raf);\n      this.raf = requestAnimationFrame(this.processAnimationFrame.bind(this));\n    }\n  }, {\n    key: \"getTableWidth\",\n    value: function getTableWidth(prevColumns, columns) {\n      var _this$tableRef$curren = this.tableRef.current,\n          offsetWidth = _this$tableRef$curren.offsetWidth,\n          scrollWidth = _this$tableRef$curren.scrollWidth;\n      var animationState = this.state.animationState;\n      var widthChanged = this.savedOffsetWidth !== offsetWidth || !this.savedScrolldWidth[columns.length];\n      var columnCountChanged = columns.length !== prevColumns.length;\n\n      if (columnCountChanged || widthChanged && !animationState.size) {\n        this.savedScrolldWidth = {};\n        this.savedScrolldWidth[columns.length] = scrollWidth;\n        this.savedOffsetWidth = offsetWidth;\n      }\n\n      return this.savedScrolldWidth[columns.length];\n    }\n  }, {\n    key: \"getColumns\",\n    value: function getColumns() {\n      var columns = this.props.columns;\n      var animationState = this.state.animationState;\n      var result = columns;\n      var isFixedWidth = columns.filter(function (column) {\n        return column.width === undefined;\n      }).length === 0;\n\n      if (isFixedWidth) {\n        result = result.slice();\n        result.push({\n          key: TABLE_FLEX_TYPE.toString(),\n          type: TABLE_FLEX_TYPE\n        });\n      }\n\n      if (animationState.size) {\n        result = result.map(function (column) {\n          return animationState.has(column.key) ? _objectSpread({}, column, {\n            animationState: animationState.get(column.key)\n          }) : column;\n        });\n      }\n\n      return result;\n    }\n  }, {\n    key: \"processAnimationFrame\",\n    value: function processAnimationFrame() {\n      var animationComponentState = this.state.animationState;\n      this.animations = filterActiveAnimations(this.animations);\n\n      if (!this.animations.size) {\n        if (animationComponentState.size) {\n          this.setState({\n            animationState: new Map()\n          });\n        }\n\n        return;\n      }\n\n      var animationState = evalAnimations(this.animations);\n      this.setState({\n        animationState: animationState\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Layout = _this$props.layoutComponent,\n          minColumnWidth = _this$props.minColumnWidth,\n          restProps = _objectWithoutProperties(_this$props, [\"layoutComponent\", \"minColumnWidth\"]);\n\n      var columns = this.getColumns();\n      var minWidth = columns.map(function (column) {\n        return column.width || (column.type === TABLE_FLEX_TYPE ? 0 : minColumnWidth);\n      }).reduce(function (acc, width) {\n        return acc + width;\n      }, 0);\n      return createElement(Layout, _extends({}, restProps, {\n        tableRef: this.tableRef,\n        columns: columns,\n        minWidth: minWidth,\n        minColumnWidth: minColumnWidth\n      }));\n    }\n  }]);\n\n  return TableLayout;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? TableLayout.propTypes = {\n  columns: array.isRequired,\n  minColumnWidth: number.isRequired,\n  layoutComponent: func.isRequired\n} : void 0;\n\nvar ColumnGroup =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(ColumnGroup, _React$PureComponent);\n\n  function ColumnGroup() {\n    _classCallCheck(this, ColumnGroup);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ColumnGroup).apply(this, arguments));\n  }\n\n  _createClass(ColumnGroup, [{\n    key: \"render\",\n    value: function render() {\n      var columns = this.props.columns;\n      return createElement(\"colgroup\", null, columns.map(function (column) {\n        return createElement(\"col\", {\n          key: column.key,\n          style: column.width !== undefined ? {\n            width: \"\".concat(column.width, \"px\")\n          } : null\n        });\n      }));\n    }\n  }]);\n\n  return ColumnGroup;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? ColumnGroup.propTypes = {\n  columns: array.isRequired\n} : void 0;\nvar AUTO_HEIGHT = 'auto';\n\nvar VirtualTableLayout =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(VirtualTableLayout, _React$PureComponent);\n\n  function VirtualTableLayout(props) {\n    var _this;\n\n    _classCallCheck(this, VirtualTableLayout);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VirtualTableLayout).call(this, props));\n    _this.state = {\n      rowHeights: new Map(),\n      viewportTop: 0,\n      viewportLeft: 0,\n      width: 800,\n      height: 600\n    };\n    _this.state.headerHeight = props.headerRows.reduce(function (acc, row) {\n      return acc + _this.getRowHeight(row);\n    }, 0);\n    _this.state.bodyHeight = 0;\n    _this.state.footerHeight = props.footerRows.reduce(function (acc, row) {\n      return acc + _this.getRowHeight(row);\n    }, 0);\n    _this.rowRefs = new Map();\n    _this.blockRefs = new Map();\n    _this.registerRowRef = _this.registerRowRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getRowHeight = _this.getRowHeight.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateViewport = _this.updateViewport.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleContainerSizeChange = _this.handleContainerSizeChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(VirtualTableLayout, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.isEdgeBrowser = isEdgeBrowser();\n      this.storeRowHeights();\n      this.storeBloksHeights();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.storeRowHeights();\n      this.storeBloksHeights();\n    }\n  }, {\n    key: \"getRowHeight\",\n    value: function getRowHeight(row) {\n      var rowHeights = this.state.rowHeights;\n      var estimatedRowHeight = this.props.estimatedRowHeight;\n      var storedHeight = rowHeights.get(row.key);\n      if (storedHeight !== undefined) return storedHeight;\n      if (row.height) return row.height;\n      return estimatedRowHeight;\n    }\n  }, {\n    key: \"storeRowHeights\",\n    value: function storeRowHeights() {\n      var _this2 = this;\n\n      var rowsWithChangedHeights = Array.from(this.rowRefs.entries()) // eslint-disable-next-line react/no-find-dom-node\n      .map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            row = _ref2[0],\n            ref = _ref2[1];\n\n        return [row, findDOMNode(ref)];\n      }).filter(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            node$$1 = _ref4[1];\n\n        return !!node$$1;\n      }).map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            row = _ref6[0],\n            node$$1 = _ref6[1];\n\n        return [row, node$$1.getBoundingClientRect().height];\n      }).filter(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 1),\n            row = _ref8[0];\n\n        return row.type !== TABLE_STUB_TYPE;\n      }).filter(function (_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 2),\n            row = _ref10[0],\n            height = _ref10[1];\n\n        return height !== _this2.getRowHeight(row);\n      });\n\n      if (rowsWithChangedHeights.length) {\n        var rowHeights = this.state.rowHeights;\n        rowsWithChangedHeights.forEach(function (_ref11) {\n          var _ref12 = _slicedToArray(_ref11, 2),\n              row = _ref12[0],\n              height = _ref12[1];\n\n          return rowHeights.set(row.key, height);\n        });\n        this.setState({\n          rowHeights: rowHeights\n        });\n      }\n    }\n  }, {\n    key: \"storeBloksHeights\",\n    value: function storeBloksHeights() {\n      var headerHeight = this.blockRefs.get('header') // eslint-disable-next-line react/no-find-dom-node\n      ? findDOMNode(this.blockRefs.get('header')).getBoundingClientRect().height : 0;\n      var bodyHeight = this.blockRefs.get('body') // eslint-disable-next-line react/no-find-dom-node\n      ? findDOMNode(this.blockRefs.get('body')).getBoundingClientRect().height : 0;\n      var footerHeight = this.blockRefs.get('footer') // eslint-disable-next-line react/no-find-dom-node\n      ? findDOMNode(this.blockRefs.get('footer')).getBoundingClientRect().height : 0;\n      var _this$state = this.state,\n          prevHeaderHeight = _this$state.headerHeight,\n          prevBodyHeight = _this$state.bodyHeight,\n          prevFooterHeight = _this$state.footerHeight;\n\n      if (prevHeaderHeight !== headerHeight || prevBodyHeight !== bodyHeight || prevFooterHeight !== footerHeight) {\n        this.setState({\n          headerHeight: headerHeight,\n          bodyHeight: bodyHeight,\n          footerHeight: footerHeight\n        });\n      }\n    }\n  }, {\n    key: \"registerRowRef\",\n    value: function registerRowRef(row, ref) {\n      if (ref === null) {\n        this.rowRefs.delete(row);\n      } else {\n        this.rowRefs.set(row, ref);\n      }\n    }\n  }, {\n    key: \"registerBlockRef\",\n    value: function registerBlockRef(name, ref) {\n      if (ref === null) {\n        this.blockRefs.delete(name);\n      } else {\n        this.blockRefs.set(name, ref);\n      }\n    }\n  }, {\n    key: \"shouldSkipScrollEvent\",\n    value: function shouldSkipScrollEvent(e) {\n      var node$$1 = e.target; // NOTE: prevent nested scroll to update viewport\n\n      if (node$$1 !== e.currentTarget) {\n        return true;\n      } // NOTE: prevent iOS to flicker in bounces and correct rendering on high dpi screens\n\n\n      var correction = this.isEdgeBrowser ? 1 : 0;\n      var nodeHorizontalOffset = parseInt(node$$1.scrollLeft + node$$1.clientWidth, 10) - correction;\n      var nodeVerticalOffset = parseInt(node$$1.scrollTop + node$$1.clientHeight, 10) - correction;\n\n      if (node$$1.scrollTop < 0 || node$$1.scrollLeft < 0 || nodeHorizontalOffset > Math.max(node$$1.scrollWidth, node$$1.clientWidth) || nodeVerticalOffset > Math.max(node$$1.scrollHeight, node$$1.clientHeight)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"updateViewport\",\n    value: function updateViewport(e) {\n      var node$$1 = e.target;\n\n      if (this.shouldSkipScrollEvent(e)) {\n        return;\n      }\n\n      this.setState({\n        viewportTop: node$$1.scrollTop,\n        viewportLeft: node$$1.scrollLeft\n      });\n    }\n  }, {\n    key: \"handleContainerSizeChange\",\n    value: function handleContainerSizeChange(_ref13) {\n      var width = _ref13.width,\n          height = _ref13.height;\n      this.setState({\n        width: width,\n        height: height\n      });\n    }\n  }, {\n    key: \"renderRowsBlock\",\n    value: function renderRowsBlock(name, collapsedGrid, Table, Body, blockRef, marginBottom) {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          minWidth = _this$props.minWidth,\n          Row = _this$props.rowComponent,\n          Cell = _this$props.cellComponent;\n      var tableRef = blockRef || createRef();\n      return createElement(RefHolder, {\n        ref: function ref(_ref15) {\n          return _this3.registerBlockRef(name, _ref15);\n        }\n      }, createElement(Table, {\n        tableRef: tableRef,\n        style: _objectSpread({\n          minWidth: \"\".concat(minWidth, \"px\")\n        }, marginBottom ? {\n          marginBottom: \"\".concat(marginBottom, \"px\")\n        } : null)\n      }, createElement(ColumnGroup, {\n        columns: collapsedGrid.columns\n      }), createElement(Body, null, collapsedGrid.rows.map(function (visibleRow) {\n        var row = visibleRow.row,\n            _visibleRow$cells = visibleRow.cells,\n            cells = _visibleRow$cells === void 0 ? [] : _visibleRow$cells;\n        return createElement(RefHolder, {\n          key: row.key,\n          ref: function ref(_ref14) {\n            return _this3.registerRowRef(row, _ref14);\n          }\n        }, createElement(Row, {\n          tableRow: row,\n          style: row.height !== undefined ? {\n            height: \"\".concat(row.height, \"px\")\n          } : undefined\n        }, cells.map(function (cell) {\n          var column = cell.column;\n          return createElement(Cell, {\n            key: column.key,\n            tableRow: row,\n            tableColumn: column,\n            style: column.animationState,\n            colSpan: cell.colSpan\n          });\n        })));\n      }))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          headerRows = _this$props2.headerRows,\n          bodyRows = _this$props2.bodyRows,\n          footerRows = _this$props2.footerRows,\n          columns = _this$props2.columns,\n          minColumnWidth = _this$props2.minColumnWidth,\n          propHeight = _this$props2.height,\n          Container = _this$props2.containerComponent,\n          HeadTable = _this$props2.headTableComponent,\n          FootTable = _this$props2.footerTableComponent,\n          Table = _this$props2.tableComponent,\n          Head = _this$props2.headComponent,\n          Body = _this$props2.bodyComponent,\n          Footer = _this$props2.footerComponent,\n          getCellColSpan = _this$props2.getCellColSpan,\n          tableRef = _this$props2.tableRef;\n      var _this$state2 = this.state,\n          viewportLeft = _this$state2.viewportLeft,\n          viewportTop = _this$state2.viewportTop,\n          headerHeight = _this$state2.headerHeight,\n          bodyHeight = _this$state2.bodyHeight,\n          footerHeight = _this$state2.footerHeight,\n          width = _this$state2.width,\n          height = _this$state2.height;\n\n      var getColumnWidth = function getColumnWidth(column) {\n        return column.type === TABLE_FLEX_TYPE ? null : column.width || minColumnWidth;\n      };\n\n      var getColSpan = function getColSpan(tableRow, tableColumn) {\n        return getCellColSpan({\n          tableRow: tableRow,\n          tableColumn: tableColumn,\n          tableColumns: columns\n        });\n      };\n\n      var collapsedHeaderGrid = getCollapsedGrid({\n        rows: headerRows,\n        columns: columns,\n        top: 0,\n        left: viewportLeft,\n        width: width,\n        height: headerHeight,\n        getColumnWidth: getColumnWidth,\n        getRowHeight: this.getRowHeight,\n        getColSpan: getColSpan\n      });\n      var collapsedBodyGrid = getCollapsedGrid({\n        rows: bodyRows,\n        columns: columns,\n        top: viewportTop,\n        left: viewportLeft,\n        width: width,\n        height: height - headerHeight - footerHeight,\n        getColumnWidth: getColumnWidth,\n        getRowHeight: this.getRowHeight,\n        getColSpan: getColSpan\n      });\n      var collapsedFooterGrid = getCollapsedGrid({\n        rows: footerRows,\n        columns: columns,\n        top: 0,\n        left: viewportLeft,\n        width: width,\n        height: footerHeight,\n        getColumnWidth: getColumnWidth,\n        getRowHeight: this.getRowHeight,\n        getColSpan: getColSpan\n      });\n      return createElement(Sizer, {\n        onSizeChange: this.handleContainerSizeChange,\n        containerComponent: Container,\n        style: _objectSpread({}, propHeight === AUTO_HEIGHT ? null : {\n          height: \"\".concat(propHeight, \"px\")\n        }),\n        onScroll: this.updateViewport\n      }, !!headerRows.length && this.renderRowsBlock('header', collapsedHeaderGrid, HeadTable, Head), this.renderRowsBlock('body', collapsedBodyGrid, Table, Body, tableRef, Math.max(0, height - headerHeight - bodyHeight - footerHeight)), !!footerRows.length && this.renderRowsBlock('footer', collapsedFooterGrid, FootTable, Footer));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var prevRowHeight = prevState.rowHeights;\n      var rowHeights = [].concat(_toConsumableArray(nextProps.headerRows), _toConsumableArray(nextProps.bodyRows), _toConsumableArray(nextProps.footerRows)).reduce(function (acc, row) {\n        var rowHeight = prevRowHeight.get(row.key);\n\n        if (rowHeight !== undefined) {\n          acc.set(row.key, rowHeight);\n        }\n\n        return acc;\n      }, new Map());\n      return {\n        rowHeights: rowHeights\n      };\n    }\n  }]);\n\n  return VirtualTableLayout;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? VirtualTableLayout.propTypes = {\n  minWidth: number.isRequired,\n  minColumnWidth: number.isRequired,\n  height: oneOfType([number, oneOf(['auto'])]).isRequired,\n  headerRows: array,\n  bodyRows: array.isRequired,\n  footerRows: array,\n  columns: array.isRequired,\n  cellComponent: func.isRequired,\n  rowComponent: func.isRequired,\n  bodyComponent: func.isRequired,\n  headComponent: func,\n  footerComponent: func,\n  tableComponent: func.isRequired,\n  headTableComponent: func,\n  footerTableComponent: func,\n  containerComponent: func.isRequired,\n  estimatedRowHeight: number.isRequired,\n  getCellColSpan: func.isRequired,\n  tableRef: RefType.isRequired\n} : void 0;\nVirtualTableLayout.defaultProps = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: function headComponent() {\n    return null;\n  },\n  headTableComponent: function headTableComponent() {\n    return null;\n  },\n  footerComponent: function footerComponent() {\n    return null;\n  },\n  footerTableComponent: function footerTableComponent() {\n    return null;\n  }\n};\n\nvar getColumnStyle = function getColumnStyle(_ref) {\n  var column = _ref.column;\n  return column.animationState;\n};\n\nvar getRowStyle = function getRowStyle(_ref2) {\n  var row = _ref2.row;\n  return row.height !== undefined ? {\n    height: \"\".concat(row.height, \"px\")\n  } : undefined;\n};\n\nvar RowLayout =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(RowLayout, _React$PureComponent);\n\n  function RowLayout() {\n    _classCallCheck(this, RowLayout);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RowLayout).apply(this, arguments));\n  }\n\n  _createClass(RowLayout, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          row = _this$props.row,\n          columns = _this$props.columns,\n          Row = _this$props.rowComponent,\n          Cell = _this$props.cellComponent,\n          getCellColSpan = _this$props.getCellColSpan;\n\n      var getColSpan = function getColSpan(tableRow, tableColumn) {\n        return getCellColSpan({\n          tableRow: tableRow,\n          tableColumn: tableColumn,\n          tableColumns: columns\n        });\n      };\n\n      return createElement(Row, {\n        tableRow: row,\n        style: getRowStyle({\n          row: row\n        })\n      }, columns.map(function (column) {\n        return createElement(Cell, {\n          key: column.key,\n          tableRow: row,\n          tableColumn: column,\n          style: getColumnStyle({\n            column: column\n          }),\n          colSpan: getColSpan(row, column)\n        });\n      }));\n    }\n  }]);\n\n  return RowLayout;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? RowLayout.propTypes = {\n  row: any.isRequired,\n  columns: array.isRequired,\n  rowComponent: func.isRequired,\n  cellComponent: func.isRequired,\n  getCellColSpan: func.isRequired\n} : void 0;\n\nvar RowsBlockLayout =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(RowsBlockLayout, _React$PureComponent);\n\n  function RowsBlockLayout() {\n    _classCallCheck(this, RowsBlockLayout);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RowsBlockLayout).apply(this, arguments));\n  }\n\n  _createClass(RowsBlockLayout, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          rows = _this$props.rows,\n          columns = _this$props.columns,\n          Block = _this$props.blockComponent,\n          rowComponent = _this$props.rowComponent,\n          cellComponent = _this$props.cellComponent,\n          getCellColSpan = _this$props.getCellColSpan;\n      return createElement(Block, null, rows.map(function (row) {\n        return createElement(RowLayout, {\n          key: row.key,\n          row: row,\n          columns: columns,\n          rowComponent: rowComponent,\n          cellComponent: cellComponent,\n          getCellColSpan: getCellColSpan\n        });\n      }));\n    }\n  }]);\n\n  return RowsBlockLayout;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? RowsBlockLayout.propTypes = {\n  rows: array.isRequired,\n  columns: array.isRequired,\n  blockComponent: func.isRequired,\n  rowComponent: func.isRequired,\n  cellComponent: func.isRequired,\n  getCellColSpan: func.isRequired\n} : void 0;\n\nvar StaticTableLayout =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(StaticTableLayout, _React$PureComponent);\n\n  function StaticTableLayout() {\n    _classCallCheck(this, StaticTableLayout);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StaticTableLayout).apply(this, arguments));\n  }\n\n  _createClass(StaticTableLayout, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          headerRows = _this$props.headerRows,\n          bodyRows = _this$props.bodyRows,\n          footerRows = _this$props.footerRows,\n          columns = _this$props.columns,\n          minWidth = _this$props.minWidth,\n          Container = _this$props.containerComponent,\n          Table = _this$props.tableComponent,\n          headComponent = _this$props.headComponent,\n          bodyComponent = _this$props.bodyComponent,\n          footerComponent = _this$props.footerComponent,\n          rowComponent = _this$props.rowComponent,\n          cellComponent = _this$props.cellComponent,\n          getCellColSpan = _this$props.getCellColSpan,\n          tableRef = _this$props.tableRef;\n      return createElement(Container, null, createElement(Table, {\n        tableRef: tableRef,\n        style: {\n          minWidth: \"\".concat(minWidth, \"px\")\n        }\n      }, createElement(ColumnGroup, {\n        columns: columns\n      }), !!headerRows.length && createElement(RowsBlockLayout, {\n        rows: headerRows,\n        columns: columns,\n        blockComponent: headComponent,\n        rowComponent: rowComponent,\n        cellComponent: cellComponent,\n        getCellColSpan: getCellColSpan\n      }), createElement(RowsBlockLayout, {\n        rows: bodyRows,\n        columns: columns,\n        blockComponent: bodyComponent,\n        rowComponent: rowComponent,\n        cellComponent: cellComponent,\n        getCellColSpan: getCellColSpan\n      }), !!footerRows.length && createElement(RowsBlockLayout, {\n        rows: footerRows,\n        columns: columns,\n        blockComponent: footerComponent,\n        rowComponent: rowComponent,\n        cellComponent: cellComponent,\n        getCellColSpan: getCellColSpan\n      })));\n    }\n  }]);\n\n  return StaticTableLayout;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? StaticTableLayout.propTypes = {\n  headerRows: array,\n  bodyRows: array.isRequired,\n  footerRows: array,\n  columns: array.isRequired,\n  minWidth: number.isRequired,\n  containerComponent: func.isRequired,\n  tableComponent: func.isRequired,\n  headComponent: func,\n  bodyComponent: func.isRequired,\n  footerComponent: func,\n  rowComponent: func.isRequired,\n  cellComponent: func.isRequired,\n  getCellColSpan: func.isRequired,\n  tableRef: RefType.isRequired\n} : void 0;\nStaticTableLayout.defaultProps = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: function headComponent() {\n    return null;\n  },\n  footerComponent: function footerComponent() {\n    return null;\n  }\n};\n\nvar makeVirtualTable = function makeVirtualTable(Table, _ref) {\n  var VirtualLayout = _ref.VirtualLayout,\n      FixedHeader = _ref.FixedHeader,\n      FixedFooter = _ref.FixedFooter,\n      defaultEstimatedRowHeight = _ref.defaultEstimatedRowHeight,\n      defaultHeight = _ref.defaultHeight;\n\n  var VirtualTable =\n  /*#__PURE__*/\n  function (_React$PureComponent) {\n    _inherits(VirtualTable, _React$PureComponent);\n\n    function VirtualTable(props) {\n      var _this;\n\n      _classCallCheck(this, VirtualTable);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(VirtualTable).call(this, props));\n      _this.layoutRenderComponent = connectProps(VirtualLayout, function () {\n        var _this$props = _this.props,\n            height = _this$props.height,\n            estimatedRowHeight = _this$props.estimatedRowHeight,\n            headTableComponent = _this$props.headTableComponent,\n            footerTableComponent = _this$props.footerTableComponent;\n        return {\n          height: height,\n          estimatedRowHeight: estimatedRowHeight,\n          headTableComponent: headTableComponent,\n          footerTableComponent: footerTableComponent\n        };\n      });\n      return _this;\n    }\n\n    _createClass(VirtualTable, [{\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        this.layoutRenderComponent.update();\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props2 = this.props,\n            height = _this$props2.height,\n            estimatedRowHeight = _this$props2.estimatedRowHeight,\n            headTableComponent = _this$props2.headTableComponent,\n            restProps = _objectWithoutProperties(_this$props2, [\"height\", \"estimatedRowHeight\", \"headTableComponent\"]);\n\n        return createElement(Table, _extends({\n          layoutComponent: this.layoutRenderComponent\n        }, restProps));\n      }\n    }]);\n\n    return VirtualTable;\n  }(PureComponent);\n\n  process.env.NODE_ENV !== \"production\" ? VirtualTable.propTypes = {\n    estimatedRowHeight: number,\n    height: oneOfType([number, oneOf(['auto'])]),\n    headTableComponent: func,\n    footerTableComponent: func\n  } : void 0;\n  VirtualTable.defaultProps = {\n    estimatedRowHeight: defaultEstimatedRowHeight,\n    height: defaultHeight,\n    headTableComponent: FixedHeader,\n    footerTableComponent: FixedFooter\n  };\n  Object.values(Table.components).forEach(function (name) {\n    VirtualTable[name] = Table[name];\n  });\n  VirtualTable.FixedHeader = FixedHeader;\n  VirtualTable.FixedFooter = FixedFooter;\n  return VirtualTable;\n};\n\nexport { Grid, ColumnChooser, FilteringState, IntegratedFiltering, EditingState, PagingState, IntegratedPaging, CustomPaging, GroupingState, IntegratedGrouping, CustomGrouping, SelectionState, IntegratedSelection, SortingState, IntegratedSorting, DragDropProvider$1 as DragDropProvider, TableColumnReordering, Table, TableSelection, RowDetailState, TableRowDetail, TableGroupRow, TableHeaderRow, TableBandHeader, TableFilterRow, TableEditRow, TableEditColumn, TableColumnResizing, PagingPanel, GroupingPanel, DataTypeProvider, TableColumnVisibility, Toolbar, TreeDataState, CustomTreeData, TableTreeColumn, SearchState, SearchPanel, TableFixedColumns, SummaryState, IntegratedSummary, CustomSummary, TableSummaryRow, TableLayout, VirtualTableLayout, StaticTableLayout, GroupPanelLayout, makeVirtualTable };","map":null,"metadata":{},"sourceType":"module"}